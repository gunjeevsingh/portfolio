%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2008.w013.n001.262B.p30.262_01.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Natalya
%%CreationDate: 8/10/2020
%%BoundingBox: 0 0 660 400
%%HiResBoundingBox: 0 0 660 400
%%CropBox: 0 0 660 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.0 x430 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 8416 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDA1FF8460FFAFFD7BFFAF3C1AA9FD7CFF3C3C133C
%A9FD1FFFA9FFFFFFA9FFAFFD21FFA9FFFFFFA9FD2EFF603C3C3C138BFD20
%FF85856085A9FD21FF85856185A9FD2EFFA93C3C3C131A13AFFD1AFFA885
%84AF84855A5B5A615AFD1BFFA98584FF84855A615A5B5AFD2EFF85613C3C
%3C8585FD19FF85615AAFA9AFA9AF85615A615AFD19FF85615A85A9AFAFAF
%84855A615AFD2CFFA9AFA9A984A98485A8FD17FFA8AF8485A9AFA9AFA9AF
%84615A615AFFA9FD15FFA9A98485A9AFA9AFA9AF84615A5B5AFFAFFD28FF
%A9FFAFFF85A985A985AFFD16FFA9FFAFFFAFFFAFAFA9FFAFFFA9855A6184
%FD15FFAFAFA9FFAFAFA9FFAFAFA9FFA9855A6185FD29FFAFA9AFA9A984A9
%848584FFAFFD13FFAFAFA9AFA9AFA9AFA9AFA9AFA9AF84615A5B84FD13FF
%A9AFA9AFA9AFA9AFA9AFA9AFA9FF85615A61A9FFAFFD26FFAFFFA9FFA985
%84A985A9AFFD15FFAFAFA9AFAFAFA9FFAFAFA9AFAFFF84615A85FD14FFA9
%AFAFAFA9AFAFAFA9FFAFAFA9FF85615A85FD27FFA9AF85AFA9A984858485
%84AFAFFD13FFA9AFA9AFA9AFA98584AFA9AFA9AFA9AF5A615AAFAFFD11FF
%AFAFA9AFA9AFA9AFA9AF85AFA9AFA9AF5A615AAFFD27FF603C60FFA9A985
%AF85A9A9FD15FFAFAFA9FFAFFF858585FFAFFFAFAFAFA95A6185FD13FFA9
%FFAFAFA9FFAFAF84A2A9AFA9FFAF855A6185FD26FFA813071360AF848584
%A984AFFD16FFA9AFA9AFA985363C60AFA9AFA9AF85615A85A9FD12FFAFA9
%AFA9AFA9AF849B8DA2AFAFA9AFA9615A85AFFD25FFAF0D0D073684A985A9
%84A9AFFD16FFAFAFAFA9FF853C133C3C85A9FFAFAF5A615AFD14FFAFA9FF
%AFAF7EBDB6B794AFAFAFA9FF85615AFD27FF3C06070D608485848584FFAF
%FD15FFA9AFA9AFA985361A131A5AAFA9AFA9855A61A8FFA9FD11FFA9AFA9
%AF7E9B94BD94947EAFA9AFA9855A6184FFAFFD24FF85360D3660AF85A985
%AFAFFD18FFAFA9FF853C193C1960A9FFAFFF85615B8584FD13FFAFFFA9BD
%B6BDB6BDB6BDAFAFA9FF85615A8585FD24FF60AFA96060A9848584A95A84
%FD18FFAFAFA985141A131A5AAFA9AFA9A95A615A5B5AFFAFFD13FFCABD94
%BD94B794A8AFAFA9AF84615A615AFFAFFD20FFA83C858BA9FFA985858560
%8513FD1BFFA960133C1361AFAFA9AFAFFF85855A6184FD16FFC394BDB6B7
%9BAFAFAFA9FF85615A6185FFAFFD1FFF8413601384A9AF84A95A3C351384
%FD1BFF601A131935FFA9AFA9AFA9AF84615A61A8FD15FFA1B694BD94947E
%AFA9AFA9FF845B5A61A9FFAFFD1EFF84133C3B84FFA9A985851A3C138BFD
%1BFF8B133C1385AFAFA9FFAFAFA9FF85615AAFFD15FFC494BDB6BDB69BAF
%AFA9FFAFFF84855AAFFD20FFAF603C1385A9AF84A9601A3584A8FD1BFF60
%1A131960FFA9AFA9AFA9AFA9A95A5B84FD15FFA1B694B6A1CA94A9A9AFA9
%AFA9A95A6184FFAFFD1FFF8B131384FFA9AFA985133C84FD19FFAF608B60
%133C1384CAAFAFAFA9AFAFAFA9855AA9FD15FFC494BDB6A28BFFA9AFAFAF
%A9FFA9855AAFFD21FF3C13136060845A60353C1360FFFFAFFD17FF3C1A13
%1A131A59CAAFAFA9AFA9AFA9AF5A61A9FFA9FD13FF9BB694B677AFFFFFA9
%AFA9AFA9AF5A61A8FD20FFAF3C13AFCA60131959FF841A3CFD1BFF1A1A13
%3C1384CAFFFFFFA9AFAFAFA985FD17FFC4B6BD94C4AFFFFFFFAFAFA9FFA9
%85AFFD21FFAF135ACAFFC47776CAFFFF353CA8FD1AFF60131A131A60CAC4
%FFCAFFA9AFA9FD19FFA1B794B6A1AFA8FFFFFFA9AFA9FD24FF843CAFFFFF
%CAB7BDC3FFFFFF35A8CAFD19FF841A193C133C3CA8C4CBCAFD1BFFAFC494
%BD94C48BFD2CFF84CACAFFA1BD94C4FFFFCBA8AEFFCAFD19FF351A131A13
%1A3CC4A2CACAFD19FFA8AFC3B694B6A1AFA8FD2AFFCBFFFFFFC4CABDBDC4
%FFFFFFCAFFFFFFCAFD18FFAF193C131A3CCACAFD1DFFAFC494BDB6C48BFD
%28FFCAFFFFCBFFFFCACACABDB7CBFD04FFCAFFFFCBCAFD18FF3C131A3CCA
%CACBCAFD1BFFAFAFA8BD94B6A1AFA8FD2AFFCAFFFFCAFFFFC3C4FD06FFCA
%FFCAFD19FF841A3CCAC4FD1FFFAFAFAFCAB6C4AFAFFD27FFCAFFCAFFFFFF
%A2CAFFFFCAFFCAFFFFFFCAFFFFFFCBFD19FF60CAC4CBCAFD20FFAF84A8A8
%AFA8FD28FFCAFD05FFCACACACBCACAFFFFFFCBFD1CFFCACACACBFD24FF8A
%8BAFFD29FFCACAFFFFCBCAFFFFFFCAFFFFFFCACBFD1DFFCAA1FD27FFA8FD
%2BFFCBCAFFFFFFCAFFCAFFCAFFCAFD76FFA8CBCAFFA8FFCAFFA8FFCACAA8
%FD76FFCAFFCBFFCAFFCBFDFCFFFD87FFC4A8FD43FFA9FD36FFCBFFCBCBC4
%FD7AFFCACAC4CB848BFD18FFAFFD29FFA9AF5AAFFFFFA9FD2FFFCBC4CBCA
%AF603C60FD18FFAFA9FD07FFAFFD1DFFAF85A9AF856184FFFFFFAFFD2CFF
%A8CAC4CA8466FD043CAFFD15FFA8AFA9AFA9AFA9FFA9FFA9FFA9FD1BFFA8
%855A6184A98485A9FFA9FFA9FD2AFFC4FFC4FF8B423C603C663CFD17FF85
%AFA9FFAFFFA9FFAFAFAFFD1CFFAF85A984AF85FD04AFFFAFFD2CFFCACBC4
%CA60FD053CA8FD16FFA97E8584AF85A984AFA9AFA9FD1BFFA885848584A9
%84A984A9A985A8FD2CFFCACBCA673C603C3C3CAFFD16FF855A2F5A5A8585
%8584FFAFAFAFFD1BFFA9A98585FFFFA9AF85AF60FD2CFFCACAC467FD063C
%84FD13FFCACBCAAF2F06060D072F073084FFA9AFA9FFAFFD11FFCAFFCAFF
%CAFFFFFF848584FFFFFF59848461A8FFA9FD29FFCBCA8B3C603C673CAF84
%AFFD12FFCBFFFFFF855A062F070D070D075AA9FFA9FD17FFCBFFCAFFAFAF
%85A9FFFF5A0707856185FD29FFCACBC4AFFD043C1984AFFD14FFCAFFFFCA
%A95307070D070D0707065AA9AFA9AFAFFFA9FD0EFFCAFFFFCAFFFFFFA985
%84855AAF3C3C0D070684A9AFA8FD27FFCBC4FF3C3C3C603C60A9AF85AFFD
%14FFCACBA87E4C53070D072F070D0785A9FFA9AFAFFFAFFD0FFFC4CBFFFF
%A9AF85AF5A2F131A1A3C07072FFFA961A9FD25FFCBC4CAFD043C3B608485
%5A5B84FFA9FD0FFFA8FFCACAFFAF5A0629770707060D0707065A85AFA9AF
%A9FFA9FD0DFFCACBA9A9A8857EAF842F0613191A130D070D7EAF5A85AFFD
%24FFCACB603C3C603C3CAFFF85855AAFFD13FFCBFFFFAF85060D2F2F0D2F
%070D060D075A85FFA985A9FD0EFFCBA9AF618585AFAFFF5A0D0D3C191A0D
%0D0785A985A9FD25FFCBA83C3C603C3C84FFA9855A6185FD11FFCAFFCAFF
%FFFF842906070636360D0000060D075A84855AAFFD0CFFCAFFCAFF84A984
%A984A9A95A060D0D1A605A07072F85A9FFA9FD24FFCAAF193C3C3C60AFA9
%A985855AAFFD16FF608B2F07060C1A663C060005060D2FA98585AFFD0DFF
%CACBFFAF84AFFFFF84858536062F0D7E2F0D073085FD26FFCACA603C131A
%35A9848536857E5B84FD13FFA8FFA83C1935060D131A13663500010D0630
%84855AFD0DFFCAFFCAFFA98584FFFFAF8485842F060D0607060D07AFA9FF
%AFFD23FFCA84423C3C1360A9A9848585855AAFFD13FFCBFFFF601A13280D
%3C1A3C132E062F070D2FAF8585FD0EFFCBFFA9858585FFFFFFAFA9AF8430
%072F072F070D84FFA9FD23FFCAA8FD053C60AF84855A85845B84FD13FFCA
%CBFFAF131A0C13133C1306000D070D065A85855AFD0EFFCBCACB85A95AFF
%FFFFA8A984A9842F060D070D072F84AFFD23FFCA673C603C3C3CFFA9A985
%6184855AAFFD14FFCAFFFF60133C1A3C130C000D072F07072FAF8585AFFD
%0FFFCAFFAF8584FFFFFF8485AFFFA930070D072F077EFD23FFCACA3C1A13
%3C3585A9857E855A855A5B84FFAFFD11FFCACBA8FF841A131A130D000D07
%0D060D065A848584FFAFFD0EFFCACAFF84857EFFA9A984FFFFFF840D060D
%060D2FFD23FFCBA8671A1A1385A9855AA9856185855AAFFD15FFCBFFFF3C
%1A130D072F072F072F070D5AAF85AFFD11FFCBFFA985A985A985FFAFFFFF
%FF5A0D072F070D5AFD22FFC4663C3C3C1A60A9606184855A855A6184FD13
%FFCAFFCACAFF8B13602807070D070D070D0D858485A9FD11FFCACAA9A984
%A9848584AFFD04FF0D07070D070DA8FD20FFC4AF3C3C3C663CA985855A85
%8461858536AFFD14FFCAFFCAFFFF8BA97E060D072F070D065A858584FD13
%FFCACBFFFF848585FFFFFFCAFFFF85070D072F075AFD1FFFCACAFD043C13
%84A9855A618485368584A9A9FD15FFCAFFA8CAFFFF842F060D060D062F84
%A984AFA9FD13FFCACAFFAF84FFFFFFCACBFFFFFF2F060D060D06A8FD1EFF
%CBA83C3C603C60FD04855A856085AFFD19FFCAFFCACAFFFF8428070D072F
%84AF85AFFD16FFCBCBCAFFFFCACAFFCBFFFFFFA80D072F070D2FFD1EFFCB
%AF131A193C60855A855A6185A9A9FFAFFD19FFCAFFFFFFAFAF2F06065A85
%8584AFAFFD19FFCAFFCBFFCAFD05FF2F07078407077EFD1EFFAF3C133C36
%A9608585855AFFFFFFAFFD1BFFCAFFFFFFAF855A8585A985AFFD1EFFCAFD
%07FF070DA884075AFD1EFFAF131A133C84855AAFA9FFA9FD1FFFCACBCAFF
%84A98485A8FD1DFFCACBA8FD08FF5A062F2F072FFD1DFFAF603C133C3CA9
%60AFFD28FF85AFFD2BFF30070D075AFD1DFFA8603C3C133CAFFD57FFA954
%062FA8FD1FFFAF3C3C60FD5AFFAFAFFD22FFA8FDFCFFFDFCFFFD72FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2008.w013.n001.259B.p30.259</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2020-08-10T15:23:41+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-08-10T15:23:41+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-08-10T15:23:41+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0z&#xA;KilmIVVFWY7AAdSTigmty86uPzOWLzUkTtx0OQGHnSjKa7T770r2/l7VzPGk9H9L8bPKS9oQNTX+&#xA;R5f8e/HTzehxSB16gnbcdCD0I9jmCRT1UTa/AydirsVdirsVdirsVU3mC1JFANuRIUV+k5IRYmTY&#xA;lWoDArXpXofpG2PCvEvyLJ2KuxV2KuxV2KuxVpm4itCfYYQEErBOCSApJHUAqSPmAcPCjiXq6sKq&#xA;a+OAikg23gS7FXYq7FXYq7FXYq7FXYq7FUl80xy3mnyafDMYGlA5uN/hr9k+zd8ydPHfiLr+0cZy&#xA;YzjB4beUav5K1T62oM0AAQVoXPc/5ObKExTx2XsLMTzj9v6no3kiaS30yPTppjPLZr+7kbqYq7r/&#xA;ALDtmDqce99/3vW9mxOPEIE8Rj937GV5hO0dirsVdirsVQeoagbWNvSj9eelVi5BR9LGtPuy3Hi4&#xA;uewasmXh5bljumat5qnu5ZLz07a3UlVgCA1JH7LV7V65m5MGIDbcuFjz5STewQGseW5dRYzvfSyX&#xA;O/EzUZPkAoXiPkMuxZxDYAU0ZcBnuSbSKy1fW/L156DEmMfbtZDWN1PdfD5jMmeGGYX9rjwzTwmv&#xA;selaPq1rqNnHc27ExP8ADxP2kcdUb+GaTNiMDR5u6w5RONjkmGUt7sVdirsVad1RSzGijqcIFoJp&#xA;jGva9r6ssek2oCEgG4cqzb7fY7D33+jM7Bp8fOZcDPqMnKA+LrpdRvbJLe6vZENKTG2Cxc6+NQx+&#xA;45KAjGVgfNEzKUaJ+TENT8u3+mH63Zys8afEZEqsie5p29xmfjzxntIOvyYJQ3iU/wDKfnKS6mSw&#xA;1Fx9Zb4be5O3M9kk9z2OYeq0YiOKPLuczSawyPDLn3s3R+S16HoR4HNYRTtAbbwJdirsVdirsVdi&#xA;rsVdirsVY9fXtsL9opZkSaRiI42YBmoeIoCanpmdjHpDr8uSPHRO6Sax/vWP9QfrOZOPk0z5t6DK&#xA;YtWtyOjNwI9mFMjnFwLLAamGcQ/3YH8vw/dtmrlzdnHkvwJdirsVdiqR3lfrUtf5jmdj+kODk+oo&#xA;aaaOGJ5ZDxjjBZ260A69MmBZprJoWW4pY5Y1kjYOjCqspqCMSKSDaA1zSY9SsylALhKtA/8Alfyn&#xA;2bLMWTgN9GrNi4xXVj/krVnsdXFpKStveERSKduMlaI3zDbZk6zFxQscw42iy8M+E8i9RjYsor9o&#xA;bH5jbNEQ74FdgS7FXYqhNTr9V2/mFctw/U1ZvpSjMtw2nkSNC7sFRRVmJoAMIFqTS2GaOeJZYzVH&#xA;FRUU/A4kVsgG2E+ZtJGn3izW4K281WQD9hx1UU+8f2ZsdPl4hR5h1+oxcJsciz/yprB1PSobiQ1n&#xA;BMNyfGRBUN/slzT6rDwSI6cw7fS5uOAPXkU8zFct2KuxV2KuxV2KuxV2KuxV8wfnlJ5i0fz1Jfwz&#xA;OttKRJDSpjZaKvF1+yRyU7H+OdDoBCeOi8jrMQGpmJfxUR7noPlnXJNa0KzvZKmQxKrFjU7qHFT3&#xA;IVgCe53ykw4SQ5mlymcN+cdmRaIhfVrUDs4P/A7/AMMqzH0FzcI9YZzD/dg+NT95rmqlzdpHkvwJ&#xA;dirsVdiqXanbGvrqKjo/8DmRhn0cbNDqkWs/8cm8/wCML/8AETmZi+oe9w8v0n3PMNM81anpd06p&#xA;IWh5GsEhqCK/snMrJAEvGY+1MuHIRdxvkXqOl3pvtPt7sp6ZnQPwrWle2YchRezw5OOAl3i2HeaL&#xA;c2utNJH8PqhZ1p2JNCf+CUnNhp5cUKcHUx4Z38XqGn6jbXcAnhkSWNwpdkYNxYqKq1OmaLJjMTRd&#xA;9jyCQsI3Km12KuxVZNEssTRt0YUwxNG0SFikguiLUOZzxCdT/TxrmfH1cnAn6ebzDzl56kuHaysG&#xA;4qDRnB+yR4EdW/Adt9xHLmEdo8+96vsP2dOSs2oHp/hh3+cvLy+e3MT+VGu/70aJM24rc2lT+yx/&#xA;eKPkx5fTkMMrFM/arQcM45ojaWx945fMfczTzFaC50e4FPiiX1kJ7FNz/wALUZl4JVMPF543Apd+&#xA;XmoQwS3dtNMkfq+m8IkYKGdSdhXua5PtDGSAQGvs/IASCe56Ijhq9iOqnqM05DuQW8CXYq7FXYq7&#xA;FXYq7FVDULtbOwubxl5LbRPMVHcRqWp+GGIs015Z8EDLuFvGrHX9L8xafp2m67aLqFzf3MzSOxK+&#xA;m0krN+7IFdgegNKUzaiJhyePxayOcRhkHFKUjvyqz0/Hcyq706y09ILWyhWC3jSiRr0ABOGBJ5u6&#xA;GKMBURQYfrnm65sfV+qgw3VpcRmGQGoJjcMQwoPtU6dxXJyjYoum1PaZjxCO0oSH2F7Ppd0Luygu&#xA;lXilzFHOi+AlUNTNRMU9dhnxREu8A/NF5BtdirsVdiruuxxVK9U0RLu0mhhYRNMjJvuo5ClcyMWo&#xA;MSCd3Gy6cSBA2fP2pxfVtTvLavNYZ5EqR14uRX26ZthLiF975dqhw5ZDukfveu+U6HyzphA4g28Z&#xA;A60FMxMnN7/Rf3MP6o+5V1XQrLUvilqk4Xikyk1ABJHw9DucljzShy5NuTDGfPmxOxvL/wAu6wT3&#xA;jYLPGD8MkZ3/ABG4zNyQjmg4WOcsM3rNpNHLCrxnlE6rJE3ijiq5oJii9BA2NlbIM3Yq7FWmjRiG&#xA;ZQSNgSN98NrXV49+bHk3RNIt7fU9NiNs9zN6Utuh/dfZLclX9np0G3ti9n2D2jlzE45nioXfV57p&#xA;+oT6bqFtqEG8tq4kC/zL0df9kpIyUJUbd3rtKNRhljP8Q+3ofm95tri01PTo54z6lrdxBgdxVJF+&#xA;/oczgeofI8uIxkYSG4sFi3mLy2lnF9bs6+gDSWI78K7Ag+Hbf/azsGo4jR5utz6fhFjkyLyJr0t3&#xA;bPZ3Dl57MBo3O5aGtCD/AKmYWuwCJscj97m6HOZCjzj9zMs1rs3Yq7FXYq7FXYq7FVO6gguLaaC4&#xA;AaCVGSZSSAUYUYVFKbYQaLGcRKJB5F4DpxkvPPK3Gkae8ljp7mf6raoCVhrQELtVuJUHuTm1J4Y7&#xA;l4LT3PU8WOPpibod39lMq1Xz15cmuI4oppHuATGbf0ZRJzrTjxKjeu1MMBQd1PtPDdAm+6jbGbyK&#xA;Sy8xJNrGnvHa3DLcm1ukFWhBo1V3oxQMB3BwkiUfSXQZLx6u8kajPej3fi3vFpBBBDHDbgLbxRpH&#xA;CASQEUUUAmtds1JNvoMIiIAHIBWyLN2KuxV2KuxVjfnPzHqPl6G1v4rdLnTy5jvFNQ6lt0KsNgNi&#xA;Nxl+DEJ2Orqe1ddk0ojMAShdS7/J4Zqdyl1qV3dRghJ5pJUB60dywr9+beAoAPnOoyCeSUh1kT8y&#xA;9o8qxXFx5d088VDRWtqioGqWUWsLctwP56EZrDlAkQe8vpuDT/4PikN7xx+6v0I4gg0IoR1By1DF&#xA;vN9hLcXlkLaJpbmYOnBBUkKQR0/1jmZppgA3ycLVQJIrmzvRbSW00+1t5f7yGCON6bjkBuAfbNTm&#xA;mJSJHUu3wwMYgHoAj8pbnYq7FXYq85/O7/lH7D/mL/5lvhD0nsz/AH0v6v6QwL8uLOO88wS281tD&#xA;dW8lsEnjnBIEb3VujMlP2wG2NRkogHm7L2n1OXDghPEal4sR8DdvYLTy1ZaFp6WunlzaIzFUkbkV&#xA;5sW2NBtU5fhyXs8Nrsss2Q5Zc5c/lS2aGOaF4ZN45FKP8mFDl4NbuCReyQfl9pl6LubUGiZbX0Wj&#xA;RyKc2YjZfHp1zI1+WNCPW3H7PxSsyranogFABmmdy7FXYq7FXYq7FXYqhtTjkl0+4jjkWF3jZfVf&#xA;7KgjcncU279vfDE0WM4cUTHvBDDvKvlqw0DR7me6iib13abUL25ciEryZVVEoeSKrEVanKtRUHLc&#xA;2XjPk19j9mnTR4Qf3sjZ4efkL8vvvkwSWEDz48wgQ3P6RIClBQn1qU49Mh4kqq9ntY9j6Pwhm8OP&#xA;icF8Vb/Tzvv8+b0zzp5QstU0xTBEIry2cNbMlQg5MA4ZRtxYdTTbr45PDl4D5F4LtTQnWQAv1xNx&#xA;J+6/P76TjTnntLW1t7p0kj9OKOO6Q0DNxC0YH+Y/ZI616DvUTZdjDFUAB9URuPcmOBg7FXYq7FXY&#xA;qg9Y0yDVNLudPn/urmMoTSvE/ssPdWoRkoTMSCGjVaeObHLHLlIPnO/sbiwvZ7K5XjPbu0cg91NN&#xA;vbwzeRkCLD5TmwyxzMJc4mmbeSvMOrzBYFh5w2iRoJtwvwKqRRgr8YkcRIihOvVlYA5r9VhjHe9y&#xA;+gey3a2fPWnlDixxH1jbhHn0l9/9IPTdOL3sf+kxkhVX96achIalo+SUV+AoOS/CTXuDmHGZHJ6P&#xA;VYIX+OXf3i+47phDaW8J5RoA5FC/VqeFcZTJ5uPGAHJVyLJ2KuxV2KuxV5r+cUs0uiqjopjgvlSN&#xA;lJ5UNvzJIPXd8kRyd97LzJ1GQHoP+JLE/wAp0P8AiaZgQVFso96m9tu2GLs/aw/4LH/hsHtmmIP0&#xA;XaIygD0IwVpQfYG1OKf8RHyGCR9ReI04/dxH9Efd8PuDZ06zLEmOoPVTuPuyXiyZeFFEKqqoVQAo&#xA;FABsABlbY3irsVdirsVdirsVdiqAhEs2nRoPilWRVnDEipSUeruR7E+/bFyJERmT0rb5bLNcRmit&#xA;y8Tz2aTBryKMFmMYVuJ4Lu6q/ElR19+hU6U0TRqVbe/9G17sbbSvLR84DXjqVssfH1DamRQ/1gfD&#xA;y4k196deWLtRqc/5XweCV8rr+H8fYzC0u47qATRq6ISQPVRo2IBpXi4Boe2LpMmMxNGvhug4ofX0&#xA;u7W1I9O49U2hBotHGzAqo+FnqwO9Qa1xbpS4ckeLmKv8e7ZMsXGdirsVdirsVdirznz/AOSodR8w&#xA;W17FMsZuEC3cCEGeQpsnpISASy7EsQqhak5mYdTwRr5Oh13s5LV6gZInhh/Ge6v09P1p75c8uWsV&#xA;tF6SqloEb0/T3FJNmEbkcjyX7UvV9uJVQBmLOZkbL02PFi0mPwsQ4QPnffLz8unWyykAKAAKAbAD&#xA;oBkXHdirsVdirsVdirsVSTzB5ag1SGRJES4jkId7WaoUuq8Q8cqD1In4inIVFP2cmCORRiy5sE/E&#xA;wyqXUHkfx8R5MQ8ueTbfQfMUlzHOVWVI4UtLkcbgVuoH+Fl/dSpRN2X6aZIR69HP7S7fGrwRxTjw&#xA;ZROJrod+nz6W9C01GTTrVGUqywxhlIoQQoFKUFPuyEuZdZgFY4g9wRGRbXYq7FXYq7FXYq7FXYq7&#xA;FULPaOJGuLRhHcN9sH7ElBQcwO4oPi602xbY5BVS3H3e79ShI9ykrOwngYncqPrELHYCiisg2HYL&#xA;3+eLYBEitj/sT+r71ovbtiOMwHIfCGsrgHp7uO7L+P0KfDj3f7OP6nH1JyOazXIJBCMv1eIbgjkr&#xA;0c7PvXl9npXFdo8qj9p/V93NHwet6S+sEElN1jqVX/JBNK08aCvgMXHnV7clTFi7FXYq7FXYq7FV&#xA;BrCya9W+aFDdqnpLOR8QSpPEHw3xbBlkI8F+nnSvi1uxV2KuxV2KuxV2KuxV2KrXiik4+oivwYMn&#xA;IA0YdCK98bQYg812KXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVKS7tY2ZZJUQopd+TAcVWlS3h9odc&#xA;WYxyPIIWz1eO8vJIIbef0I0DresgWB69BGxPJu+4Wnv0xbcmnMIgki/5vUe9H4uO7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FVNp0VuPU+AIr91a5IRYmSoCCARuD0yLJ2KuxV2KuxV2KuxV2Kux&#xA;V2KuxVSurlLaBpnVmVaVCDkdyBWngK1PtizxwMjQSC81q7neaBD6CxRiWQKW5emy7kFAZJKcv91A&#xA;AEf3nUYQLNOVOOPBj8SdkDyv7On+de38HVhuoebKnjYx1Ibks8yrRW68o4BWND4M3J/8rM7HpQPq&#xA;eN1/tVknccA4I9/OR/Hy8gnv5Z31xcS6qs8rSvWGUs7FmJbmpNSf8gZDVxAqk+z2aU/E4jZsH7/1&#xA;M5zDekdirsVdirsVSW81pY757Yyei8RAAYfC1QD1+nvmXjw3G6txcmapVdImHVuS1KBx/PGQw/Cv&#xA;68hLD5so5vJv9Jo7AqSEY05AqQPur0x8FfGR0b813+0OoGUEU3g2uwJdirsVdirsVdirDtc8z6tH&#xA;d0sFR7RGaOWPpISfh5ciengR075ssGmgR6ubrc+pmD6eSXf7k728s5reYCe1l5lGPFWXrXiOpFCD&#xA;t3y70xBB5FpIlIgjmGXrqEDEFCSoJXkCPgI/ZoOv9MwPCLn+KEwilEi1FK7HbcEHoQfA5jyFORE2&#xA;vwJdirsVdirsVdirsVdirsVWySJGjO5oiipOKQCTQYTr+rW0Je7Maqkcwa3joVL3EWwA3qOH2pWF&#xA;O0fZ8tw4jMr2p2kNDgu7ySFAe/r7u7/TdYsBnnlnmknlblLKxd28WY1J2zagUHy6c5TkSdySzjyH&#xA;pWr6Zqspu7Z4oLi09QSdV5K60UsKgN8TfCd8wtTOMgK73qexNLlwZJccaEo3+PNn2YT07sVdirsV&#xA;UZbnjJ6MS+rPTkUrQKK0Bc70r2233p0xbIw2s7D8cni35+a3rOjW8V/ptwbS6W+t1kK0dWRrd6oe&#xA;Qoy8qdR2zc6CIkAC6XWmpEh51ZfnnrsaBbywt7gjq6F4ifnu4/DNkdHHoXAGpLP/AMrvzbt9cvJt&#xA;N1CJbO4Y84Y1JZWUDdlr+0v7Q7j5Zh6rSGIsOTp9RZovYLS7KcUZh0/dyV+Eg70J8D2OaqcL3dlC&#xA;dbJmjhh4EdQeozGIpyQbXYEuxV2KqUtyiSCJQZJSAfTSlQpr8RqQANj1xZxgSL5BYbqRN5bd1Xar&#xA;rRwK0G4U8u/h2xZeGDyI+5i/miK1juzcRCvKKSWRR0Zo1LdvHvmx0pJFHvdTqgAbDlOhWHksavqX&#xA;SK3e6klUhZWZVL8Y6lRy2oo6ZGcpnMYx76WPhxwiUy868vfmPpXmOyv7WxMlrecQzWkrAO8KsCXj&#xA;KmjcejDqAT23zZHAYSHE4Jy8UDwvY9EvoLnTLe4iUrE8a0Xrw4jiVPyI65pc2MiRB5u4wZAYgjkm&#xA;WUN7sVdirsVdirsVdirsVdirHPMmpFCUdmt7eAepJLuCKGgYKQAzVFIgagt8X7ArKETI0G858emw&#xA;nLkO33+Xx6+W38Rrmep6g99c+oV9OFBwt4QSQkY6LU9T3J7nfNrjxiIoPmWv109VlOSfM/YE20XQ&#xA;pVs4tbnAEYlVbSJhXlsx9QjwBHw/f4HBxgy4Xadl9nkRGaX+aP0/q+bIvKut319rt5bysFt4reQr&#xA;Ev2eSui8j70ODVYYxgD1sO90uaUshHSizfNU7V2KuxV2Kpa8swhVIH43N7O6LKfi4KvIluJJ+zHH&#xA;Qdq0ri5QiLs/TGI/R+k/J5H/AM5C6Ylt5anuqG49CS1mYXDPIG5TCFv2hxNHr8NKds2mg3rfq6vW&#xA;ag2bjAiuXCPvHq+189SW9tP6P1Hm1xMxVrMKWKnbjxYD4uX3jN7EyF8XIdXS6gYeESgaJu4n+H49&#xA;QfmPPmh2vJtKukmMjWl1byjg26ukinb5EEZKUo1vyLj4wZfS+h/yv/N601iCPS9UIi1FRsNgJT3a&#xA;Ku1e7J9I75q9TpCPVF2GDU3sXqVvrtut/aWKv6r3VfSdduKgE7k/L7JzXTwkxMu5zoZgJCPeyCNi&#xA;0aMepAJ+kZhEbuaDsuwJdiqW6oyel6MMhiN2zCe4jY80SND6jKR0YcAop0JrhAtycR4blIbQHL7v&#xA;1pEfNN0I2tLWFkaFeFvPM/q+pRaIzs25LH7VT8zmfHSRFEm3UZdZKRNCj9n4+5jvnOHV7Xyvq2oW&#xA;pVLwWczOq7tG7RHmKDvueOZOExMgOluLlEhEnrTx3yv5k1PUtOiW8vJJ5rImOL1HLsIz8XQ9qsRm&#xA;ZnxCMrA5vF9qmfiAkmq28mK6vcT6L5qF9YIsEsTrc28aCich2oajixBBHShI6Zk4/Xjou17OzmUB&#xA;I8w+mrDUdR1W60i+01mmjLLJNHGQqmJgrB2FabqxGaiUYxjIS+D0AM5TiY9+70CLZOP8pK/QOn4Z&#xA;qZO1ivwMnYq7FXYq7FXYq7FVssscUbyysEjjBZ3Y0AUCpJJ7DFMYkmhzeaeftWF7by2orHLcmJkQ&#xA;ijRxQl2jL9w8hk5cf2VpXeuZukxm+J532p1cBAaaJuQNyPce78fdTE/Lllc3momyvCfSSKSX1F6s&#xA;I1rx5e5698zckq5d7y/Zen8XNwz5AE/JlWo6zdtPbWShEhPEsFUb7kAe3Ttk8eIUS9XPKbEeiJ8i&#xA;/wDKR6h/zDzf8nUyvW/3cfePubNF/ey9x+96Nmmd07FXYq7FUJeMUu7Fv2WkaNj4co2IP3rT6cW7&#xA;ELjIeV/aHkH51TanKNS0W6Aktb+3P1OVh8KKwpUgCpaN1qKEdqjNppK4bDxfamvy4NTwy3gaI93X&#xA;8W8S8iaGXuk1ydWimgDRwJupEgNHY+6Gqj3rm0zzEqdX2pqzEeFE+f6v1tfm/J5e1C3tqh080lhx&#xA;SBVMc0XRnn3HBhx2YA1zGiJE8I5OZ2LmmQSR6R16fDz7+nu6x3yxaywX2nQljJILiKnfcuNlzZRj&#xA;wwoudOfFOw+tNLHLzVpK+CSSV+Qk2/4TNPk/upfjuc/H/fR/He9Ej/u1+Q/VmnPN3A5LsCXYqlEj&#xA;iG4idgXMU9xEwBr/AHymZRuW/wAlRXx6YQN3LO8Jf1QflskekyWMnmGJTEotrlZ/RjcD7Y4NxI3G&#xA;yVpmxyiQxnvFOixGJyDuNqnmbQkiVWt+It5ZEaSCT+7Yoa8GrtRh4/Lvg02e9jzplqcNbjlb5s88&#xA;+SNT8oX36T0tn/RMr0jlG5hc/wC63rWo/lJ69D77zFlGQcJ5ul1OmBG4uLFdc8x6xrl4l3qdx60s&#xA;aiOFVVI440BqEjjjCoi1NaKOu+W4sUYCosZSv3B9HfkXrOmS+SrVi6/Wom/R10tfiBjP+jKF94Sh&#xA;G2++aXXQlxkd24dtpJREb79nrkQolOIUgkEAUHzzUSdrFdgS7FXYq7FXYq7FXYqlmvXcENvHFLQ+&#xA;pIkjhughgdZJnbY/CFFPckDvhAs0245CEZZJGowid/gaeHX2pXa3881wDLFNIzrId2ozEip8c3cY&#xA;iqfJc2aRmZHeyyvTJ10fTJLgwiS8ux6ZJbZY2FeG3yqadT8hgjj4yHq9FhGnx3/HL8UoXbFtTtGP&#xA;Uqh+9jl8PpLkT+sJ15F/5SPUP+Yeb/k6mY2t/u4+8fc5Gi/vZe4/e9GzTO6dirsVdiqB1ON3AjL8&#xA;El4iJzSkc6NzibpvyYb1PYDvi5GAgb1y5+cTsfx7+5in5i6Uuu+VTfxR8b3TSzvGd2UDaeM08Kcv&#xA;envmVpMnDKuhed9puzuPCZDcw9QPfHr+v4PANe1mHRbNBGn76cstutDxLj4nJPSvxVPc5uccOI08&#xA;NpNJLObP0jmXmccUzXEt3dym4vZzWWdv1AdgMzsWEQ971BIERGIqI6Mj8i2D33nDSYFHIC5SVx/k&#xA;Qn1G/BMOaVQKcYuQfUegW5m8yRyD/j0tGr/rSMyqPpElc0meVY675fj7nZ4I3lvuj+PvZ8Ns1Dt3&#xA;Yq7FUNe2QuIZVRvTmcL6cm5CvG3ONuPTZt/fFtxZeEi+X69j9jF9d9GRbe4iQ2lwjEyvGP7m4i33&#xA;6V2Jr/MtD4Zn6WZIIO7ga/AISFe8H7j+v9i+78wC9sBbXkHpzc15yxsrRkA7su/MfIrkoafhlYOz&#xA;TLPxRqQ3THTNK0q60mbTruOO+V09K85qGWRZF7jcAFabfTlGechLiG3c3YIRMaO/e+Vvzd/L2TyZ&#xA;5neCBGGj3vKbTJGPL4AfiiLHctGT37UOdDotSMsL/iHN0ur05xy8jyXfk55ztvLHnK2m1Cn6LuiI&#xA;LtnJ4xVP7u4p0rEzGp/lZsGvwmeM8PMJ0eURyC+T7EBBFR0zlXo3Yq7FXYq7FXYq7FXYq8y/MHWZ&#xA;reT0pw8YvJZI+TKRSG2YBFWo+y7MXJ7mnYDM3Rwsk9zoParWHHjx4Yn0yHEfM+fu/QxexggvJ0ik&#xA;cC2ILzyDekS/aIpXc9B75nb9Obyuj0/jTo/T19yc6xPbz2Ykt1KQGb92p2IADUHU5dhiYmj3PUZp&#xA;Ax25Wi7XRb6+1mzjSFxGiRmeTjsi1Jqa0HTt3yuWaMYE22RwylMbMu8v+VotMubi6EpnubgMhYDj&#xA;GqMwag6ljsM1+fUmYAqgHYYNKIEm7JZHmE5rsVdirsVWyxrJG0b14sKGhKnfwIoR9GKYyo2EreG4&#xA;Sc8OLXTpSaNzSO6jX4eWw+GQAjt3puKELlEwlGpfR/ub6eY/HfcA/M78tdP1vyUttp9oNOkQLLao&#xA;43guVqUZyC9eVSjmp2ObHSag8W53dJqNFjwjhhXANtvvfLENvdyXIs/q8gv/AFDA1mFLSiZTxaPg&#xA;NywYUzoRkBjbpTjINPcfyo/Lu60cHU9Tj46rcr6cNtsxhjJFa8a/G1Og7bdSRmBqdRxbDk5WHDXv&#xA;e4+XdJNpFJLIKT3DB5e9Ag4xx1HXgvU+OabUZeI0OQ/Bdtp8XDueZ/ACdZiuU7FXYq7FUFd2UhmF&#xA;1a8fX2Ekb/YlC9K9eLDs1PvxtuhOJHDP6enl+O5Jr3TdNvLz6xdevauHSWSAxE1aPwdQ6NXuFrmT&#xA;j1JjGnHy9nccrBBF9CP07j4hMYBEbVYILVrVZJ14I4ozohVmkI+Jlqq0+Oh6DbbKJSMjZcmGGOM7&#xA;Ecunedvj8LST81fIsXnHylcaeigalBW40yU0FJkB+An+WQfCfv7ZkaPUeFMHp1dfqsHiQrr0fHMV&#xA;hfveNZx20r3aFw9sqM0g9IFpAUAr8KqS3gAc6viAF3s85wm66vqP8gPPx8w+V/0PeyF9V0VUi5Ma&#xA;tLanaGQk7ll4mNvkCftZzXaOm8Odj6ZO/wBDqPEhR5h6nmvc12KuxV2KuxV2KuxV5F+a15+k9Rgh&#xA;gikVrASJIJV4FuZBBQHcr8PXvmz0ceEX3vC+0mbxcgiAfRfPb5JV5I02+urTVRbwtKyiJCqipBYP&#xA;TbMmWSMZCyvYGOUoZKHd+l6JpPkW3OnWyaoG9VGLywI3wk1PEFh7HehzEy648R4HqcWhHCBNlKQA&#xA;IqtTgoAWMfZAHQe+YBk54iq5Fk7FXYq7FXYq7FVk0MU0ZSRaqem5BB8VIoQR2I3xZRkYmwh5bW5a&#xA;J4WdbiFxQrKOLUJ3+Jdth0+HCDRsMpcEhuK934/Sw60/L+GDWLy5trOC3muG/wBI1AIoklFBSrAc&#xA;m2A26VzYnVR4XVDTSuujKdP8v2VkeYrJJShdv6ZiZNRKTlQ08YpmAAKDplDe7FXYq7FXYq4iopiq&#xA;GNpIopDcSRrSgT4XA2I25At38e2Lb4gPMAr4rVUkMrM0spqPUcjZSa8VAAVR06DegrXFjLJYrkPx&#xA;+PuVsWD58/OnyZrXljzXD+YflmIhPUE98Y15iG4XYyOo/wB1zLs/vXcchm80OeOTGcU/h+PJ1Gsx&#xA;Sxz8WHxSb/nH1tQ1H80L7Vra2+r2ckN092kIIgiW4cOkQrXbmq8RWvw+xy3tMCOEAndr7PJOUkcn&#xA;05nPO7dirsVdirsVdirsVQWq6LpuqwejewiQCvB+joT3VhuP865OGQxOzjanSY88eGYv9CnougaZ&#xA;o0DRWUfFpKGaVjydyooOR9vAbY5Mhkd0aTRY9PGoD395THIOU7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq4gEEEVB2IOKqVtZ2lrGY7WCOCNjyKRKqAsdq0UDfbCZE80AAclXAl&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:80e69965-981a-6249-86ab-c68c55052ced</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:80e69965-981a-6249-86ab-c68c55052ced</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:90711974-e050-c844-acbd-840a6b7df8ba</stRef:instanceID>
            <stRef:documentID>xmp.did:90711974-e050-c844-acbd-840a6b7df8ba</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7f8d0714-6209-3e4c-a720-e63ba164090a</stEvt:instanceID>
                  <stEvt:when>2020-05-27T09:36:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80e69965-981a-6249-86ab-c68c55052ced</stEvt:instanceID>
                  <stEvt:when>2020-08-10T15:23:41+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>660.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
660 400 li
660 0 li
cp
clp
660 400 mo
0 400 li
0 0 li
660 0 li
660 400 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
500.981 321.48 mo
493.312 317.052 487.095 306.329 487.095 297.528 cv
487.095 294.264 487.959 291.738 489.429 290.064 cv
485.22 290.369 482.373 293.892 482.373 299.839 cv
482.373 308.639 488.59 319.363 496.259 323.791 cv
501.078 326.573 505.309 326.19 507.795 323.348 cv
505.783 323.495 503.462 322.912 500.981 321.48 cv
.51162 .157229 0 0 cmyk
f
496.259 323.791 mo
488.59 319.363 482.373 308.639 482.373 299.839 cv
482.373 291.038 488.59 287.494 496.259 291.922 cv
503.929 296.35 510.146 307.073 510.146 315.874 cv
510.146 324.674 503.929 328.219 496.259 323.791 cv
514.478 318.576 mo
514.478 317.475 514.382 316.347 514.24 315.21 cv
519.853 314.5 li
519.282 311.674 518.418 308.817 517.31 306.002 cv
510.914 304.068 li
509.797 301.676 508.456 299.362 506.933 297.201 cv
508.465 290.747 li
506.57 288.381 504.515 286.203 502.34 284.291 cv
498.897 288.745 li
497.977 288.051 497.042 287.401 496.083 286.847 cv
495.123 286.293 494.188 285.864 493.269 285.495 cv
489.826 277.066 li
487.65 276.466 485.595 276.272 483.7 276.449 cv
485.233 284.673 li
483.71 285.075 482.368 285.84 481.252 286.943 cv
474.856 281.491 li
473.748 283.026 472.883 284.885 472.312 287.052 cv
477.925 294.243 li
477.783 295.217 477.687 296.234 477.687 297.335 cv
477.687 298.436 477.783 299.564 477.925 300.701 cv
472.312 301.412 li
472.883 304.237 473.748 307.094 474.856 309.91 cv
481.252 311.844 li
482.368 314.236 483.71 316.549 485.233 318.71 cv
483.7 325.164 li
485.595 327.531 487.65 329.709 489.826 331.62 cv
493.269 327.167 li
494.188 327.86 495.123 328.51 496.083 329.064 cv
497.042 329.618 497.977 330.048 498.897 330.416 cv
502.34 338.845 li
504.515 339.446 506.57 339.64 508.465 339.463 cv
506.933 331.238 li
508.456 330.837 509.797 330.072 510.914 328.969 cv
517.31 334.42 li
518.418 332.885 519.282 331.026 519.853 328.86 cv
514.24 321.668 li
514.382 320.695 514.478 319.677 514.478 318.576 cv
.316289 .0888075 0 0 cmyk
f
498.648 282.405 mo
495.205 273.977 li
489.826 277.066 li
493.269 285.495 li
498.648 282.405 li
.51162 .157229 0 0 cmyk
f
493.269 285.495 mo
494.188 285.864 495.123 286.293 496.083 286.847 cv
497.042 287.401 497.977 288.051 498.897 288.745 cv
502.339 284.292 li
502.338 284.293 li
502.338 284.293 501.756 283.927 501.462 283.758 cv
500.503 283.204 499.568 282.774 498.648 282.405 cv
493.269 285.495 li
.158541 .0152895 0 0 cmyk
f
495.205 273.977 mo
493.03 273.376 490.975 273.182 489.079 273.359 cv
483.7 276.449 li
485.595 276.272 487.65 276.466 489.826 277.066 cv
495.205 273.977 li
f
513.845 287.657 mo
511.949 285.291 509.894 283.113 507.719 281.202 cv
502.34 284.292 li
504.515 286.203 506.57 288.381 508.465 290.747 cv
513.845 287.657 li
f
508.465 290.747 mo
506.933 297.201 li
512.312 294.112 li
513.845 287.657 li
508.465 290.747 li
.51162 .157229 0 0 cmyk
f
506.933 297.201 mo
508.456 299.362 509.798 301.676 510.914 304.068 cv
516.293 300.978 li
515.177 298.586 513.835 296.272 512.312 294.112 cv
506.933 297.201 li
f
510.914 304.068 mo
517.31 306.002 li
522.689 302.912 li
516.293 300.978 li
510.914 304.068 li
.158541 .0152895 0 0 cmyk
f
517.31 306.002 mo
518.418 308.817 519.282 311.674 519.853 314.5 cv
525.233 311.41 li
524.662 308.584 523.797 305.727 522.689 302.912 cv
517.31 306.002 li
.51162 .157229 0 0 cmyk
f
485.233 284.673 mo
484.787 282.281 li
480.235 278.402 li
474.856 281.491 li
481.252 286.943 li
482.368 285.84 483.71 285.075 485.233 284.673 cv
f
519.853 328.86 mo
519.282 331.026 518.418 332.885 517.31 334.42 cv
522.689 331.33 li
523.797 329.795 524.662 327.936 525.233 325.77 cv
519.853 328.86 li
f
519.62 318.578 mo
519.761 317.605 519.857 316.587 519.857 315.486 cv
519.857 315.162 519.836 314.833 519.818 314.504 cv
514.24 315.21 li
514.382 316.347 514.478 317.475 514.478 318.576 cv
514.478 319.677 514.382 320.695 514.24 321.668 cv
519.62 318.578 li
f
514.24 321.668 mo
519.853 328.86 li
525.233 325.77 li
519.62 318.578 li
514.24 321.668 li
.158541 .0152895 0 0 cmyk
f
510.914 328.969 mo
509.798 330.072 508.456 330.837 506.933 331.238 cv
508.465 339.463 li
513.845 336.373 li
512.758 330.541 li
510.914 328.969 li
.51162 .157229 0 0 cmyk
f
477.723 298.236 mo
472.312 301.412 li
477.925 300.701 li
477.821 299.871 477.758 299.049 477.723 298.236 cv
.158541 .0152895 0 0 cmyk
f
493.269 327.167 mo
489.826 331.62 li
495.245 328.536 li
494.578 328.109 493.917 327.656 493.269 327.167 cv
.51162 .157229 0 0 cmyk
f
483.817 285.298 mo
484.061 285.177 484.306 285.059 484.563 284.961 cv
484.578 285.044 li
484.316 285.113 484.068 285.207 483.817 285.298 cv
0 0 0 0 cmyk
f
472.644 301.658 mo
472.625 301.568 472.601 301.477 472.582 301.386 cv
477.243 300.797 li
477.253 300.889 477.259 300.98 477.27 301.073 cv
472.644 301.658 li
f
519.82 314.525 mo
519.819 314.518 519.819 314.511 519.818 314.504 cv
519.853 314.5 li
519.853 314.5 li
520.1 314.358 li
520.108 314.397 520.116 314.436 520.124 314.474 cv
519.82 314.525 li
510.914 304.068 mo
509.797 301.676 508.456 299.362 506.933 297.201 cv
506.933 297.201 li
508.456 299.362 509.798 301.676 510.914 304.068 cv
508.465 290.747 mo
506.644 288.473 504.675 286.373 502.594 284.516 cv
504.675 286.373 506.644 288.473 508.465 290.747 cv
f
519.484 314.546 mo
519.001 312.239 518.327 309.912 517.484 307.606 cv
517.71 307.849 517.938 308.09 518.166 308.329 cv
518.87 310.384 519.439 312.45 519.853 314.5 cv
519.853 314.5 li
519.853 314.5 519.853 314.5 519.853 314.5 cv
519.818 314.504 li
519.818 314.504 519.818 314.504 519.818 314.504 cv
519.484 314.546 li
516.097 306.078 mo
510.613 304.419 li
509.496 302.027 508.154 299.713 506.631 297.552 cv
508.164 291.098 li
506.375 288.865 504.44 286.807 502.4 284.975 cv
502.548 284.476 li
502.563 284.489 502.579 284.503 502.594 284.516 cv
504.675 286.373 506.644 288.473 508.465 290.747 cv
508.465 290.747 li
506.933 297.201 li
506.933 297.201 li
506.933 297.201 li
506.933 297.201 li
506.933 297.201 li
508.456 299.362 509.797 301.676 510.914 304.068 cv
510.914 304.068 li
515.571 305.476 li
515.746 305.678 515.921 305.878 516.097 306.078 cv
f
508.465 290.747 mo
508.465 290.747 li
508.465 290.747 li
506.644 288.473 504.675 286.373 502.594 284.516 cv
502.579 284.503 502.563 284.489 502.548 284.476 cv
502.61 284.266 li
504.758 286.153 506.789 288.301 508.664 290.633 cv
508.465 290.747 li
f
506.933 297.201 mo
508.465 290.747 li
508.664 290.633 li
508.688 290.662 508.712 290.692 508.736 290.722 cv
507.239 297.025 li
506.933 297.201 li
f
510.914 304.068 mo
510.914 304.068 li
509.798 301.676 508.456 299.362 506.933 297.201 cv
506.933 297.201 li
507.239 297.025 li
507.203 297.176 li
508.705 299.306 510.03 301.585 511.136 303.94 cv
510.914 304.068 li
f
515.571 305.476 mo
510.914 304.068 li
511.136 303.94 li
511.152 303.974 511.168 304.009 511.184 304.043 cv
515.446 305.331 li
515.488 305.38 515.529 305.428 515.571 305.476 cv
f
519.853 314.5 mo
519.439 312.45 518.87 310.384 518.166 308.329 cv
518.309 308.479 518.452 308.627 518.596 308.775 cv
519.214 310.635 519.72 312.503 520.1 314.358 cv
519.853 314.5 li
f
519.491 314.579 mo
519.488 314.568 519.486 314.557 519.484 314.546 cv
519.818 314.504 li
519.818 314.504 519.818 314.504 519.818 314.504 cv
519.819 314.511 519.819 314.518 519.82 314.525 cv
519.491 314.579 li
f
502.492 325.698 mo
500.625 325.698 498.518 325.09 496.286 323.806 cv
498.509 325.085 500.607 325.69 502.465 325.69 cv
503.574 325.69 504.597 325.475 505.511 325.059 cv
505.55 325.049 505.589 325.039 505.627 325.028 cv
504.691 325.469 503.637 325.698 502.492 325.698 cv
482.373 299.803 mo
482.373 299.799 482.373 299.795 482.373 299.791 cv
482.373 299.795 482.373 299.799 482.373 299.803 cv
482.373 299.768 mo
482.373 299.763 482.373 299.757 482.373 299.752 cv
482.373 299.757 482.373 299.762 482.373 299.768 cv
482.373 299.733 mo
482.373 299.726 482.373 299.72 482.374 299.713 cv
482.373 299.72 482.373 299.726 482.373 299.733 cv
482.374 299.697 mo
482.374 299.691 482.374 299.685 482.374 299.678 cv
482.374 299.685 482.374 299.691 482.374 299.697 cv
482.374 299.662 mo
482.374 299.655 482.374 299.648 482.374 299.641 cv
482.374 299.648 482.374 299.655 482.374 299.662 cv
482.374 299.627 mo
482.374 299.62 482.374 299.612 482.375 299.604 cv
482.374 299.612 482.374 299.62 482.374 299.627 cv
482.375 299.593 mo
482.375 299.584 482.375 299.575 482.375 299.566 cv
482.375 299.575 482.375 299.584 482.375 299.593 cv
482.375 299.56 mo
482.375 299.55 482.375 299.54 482.376 299.53 cv
482.375 299.54 482.375 299.55 482.375 299.56 cv
482.376 299.526 mo
482.376 299.515 482.376 299.504 482.376 299.494 cv
482.376 299.504 482.376 299.515 482.376 299.526 cv
482.376 299.493 mo
482.419 297.2 482.894 295.278 483.712 293.777 cv
483.626 293.938 483.545 294.103 483.467 294.273 cv
482.8 295.691 482.415 297.442 482.376 299.493 cv
f
502.465 325.69 mo
500.607 325.69 498.509 325.085 496.286 323.806 cv
496.277 323.801 496.268 323.796 496.259 323.791 cv
496.259 323.791 li
496.259 323.791 li
488.74 319.449 482.616 309.056 482.38 300.357 cv
482.375 300.183 482.373 300.011 482.373 299.839 cv
482.373 299.827 482.373 299.815 482.373 299.803 cv
482.373 299.799 482.373 299.795 482.373 299.791 cv
482.373 299.783 482.373 299.775 482.373 299.768 cv
482.373 299.762 482.373 299.757 482.373 299.752 cv
482.373 299.745 482.373 299.739 482.373 299.733 cv
482.373 299.726 482.373 299.72 482.374 299.713 cv
482.374 299.708 482.374 299.703 482.374 299.697 cv
482.374 299.691 482.374 299.685 482.374 299.678 cv
482.374 299.673 482.374 299.667 482.374 299.662 cv
482.374 299.655 482.374 299.648 482.374 299.641 cv
482.374 299.637 482.374 299.632 482.374 299.627 cv
482.374 299.62 482.374 299.612 482.375 299.604 cv
482.375 299.601 482.375 299.597 482.375 299.593 cv
482.375 299.584 482.375 299.575 482.375 299.566 cv
482.375 299.564 482.375 299.562 482.375 299.56 cv
482.375 299.55 482.375 299.54 482.376 299.53 cv
482.376 299.529 482.376 299.528 482.376 299.526 cv
482.376 299.515 482.376 299.504 482.376 299.494 cv
482.376 299.493 li
482.415 297.442 482.8 295.691 483.467 294.273 cv
482.793 295.751 482.42 297.583 482.42 299.733 cv
482.42 308.533 488.637 319.257 496.307 323.685 cv
498.543 324.976 500.654 325.586 502.524 325.586 cv
503.444 325.586 504.305 325.438 505.094 325.152 cv
505.233 325.121 505.374 325.093 505.511 325.059 cv
504.597 325.475 503.574 325.69 502.465 325.69 cv
f
502.003 325.965 mo
500.131 325.965 498.017 325.354 495.779 324.061 cv
488.11 319.633 481.893 308.91 481.893 300.109 cv
481.893 295.894 483.326 292.9 485.657 291.399 cv
484.884 292.012 484.227 292.809 483.712 293.777 cv
482.894 295.278 482.419 297.2 482.376 299.493 cv
482.376 299.494 li
482.376 299.504 482.376 299.515 482.376 299.526 cv
482.376 299.528 482.376 299.529 482.376 299.53 cv
482.375 299.54 482.375 299.55 482.375 299.56 cv
482.375 299.562 482.375 299.564 482.375 299.566 cv
482.375 299.575 482.375 299.584 482.375 299.593 cv
482.375 299.597 482.375 299.601 482.375 299.604 cv
482.374 299.612 482.374 299.62 482.374 299.627 cv
482.374 299.632 482.374 299.637 482.374 299.641 cv
482.374 299.648 482.374 299.655 482.374 299.662 cv
482.374 299.667 482.374 299.673 482.374 299.678 cv
482.374 299.685 482.374 299.691 482.374 299.697 cv
482.374 299.703 482.374 299.708 482.374 299.713 cv
482.373 299.72 482.373 299.726 482.373 299.733 cv
482.373 299.739 482.373 299.745 482.373 299.752 cv
482.373 299.757 482.373 299.763 482.373 299.768 cv
482.373 299.775 482.373 299.783 482.373 299.791 cv
482.373 299.795 482.373 299.799 482.373 299.803 cv
482.373 299.815 482.373 299.827 482.373 299.839 cv
482.373 299.839 li
482.373 300.011 482.375 300.183 482.38 300.357 cv
482.616 309.056 488.74 319.449 496.259 323.791 cv
496.259 323.791 li
496.259 323.791 li
496.268 323.796 496.277 323.801 496.286 323.806 cv
498.518 325.09 500.625 325.698 502.492 325.698 cv
503.637 325.698 504.691 325.469 505.627 325.028 cv
505.641 325.024 505.655 325.02 505.669 325.015 cv
504.606 325.639 503.369 325.965 502.003 325.965 cv
f
508.564 330.636 mo
508.564 330.636 508.564 330.636 508.564 330.636 cv
509.218 330.319 509.827 329.923 510.388 329.45 cv
510.388 329.45 li
509.827 329.923 509.218 330.319 508.564 330.636 cv
f
508.564 330.636 mo
509.174 330.278 509.744 329.85 510.259 329.34 cv
510.388 329.45 li
509.827 329.923 509.218 330.319 508.564 330.636 cv
f
507.965 330.959 mo
508.169 330.859 508.369 330.751 508.564 330.636 cv
509.218 330.319 509.827 329.923 510.388 329.45 cv
510.496 329.542 li
509.736 330.155 508.888 330.627 507.965 330.959 cv
f
481.033 287.088 mo
480.954 287.088 480.939 287.06 480.964 287.015 cv
481.049 287.088 li
481.044 287.088 481.038 287.088 481.033 287.088 cv
480.964 287.015 mo
475.084 282.004 li
474.859 281.979 474.904 281.814 475.017 281.629 cv
481.133 286.841 li
481.054 286.909 480.989 286.971 480.964 287.015 cv
f
481.133 286.841 mo
475.017 281.629 li
475.049 281.575 475.088 281.52 475.126 281.466 cv
481.286 286.716 li
481.233 286.758 481.18 286.801 481.133 286.841 cv
f
508.247 339.48 mo
508.182 339.477 508.191 339.475 508.246 339.471 cv
508.247 339.48 li
508.246 339.471 mo
506.78 331.61 li
506.654 331.549 506.773 331.476 506.962 331.397 cv
508.464 339.458 li
508.371 339.464 508.292 339.468 508.246 339.471 cv
f
508.475 339.457 mo
508.714 339.32 li
508.736 339.438 li
508.646 339.446 508.555 339.452 508.475 339.457 cv
f
508.464 339.458 mo
506.962 331.397 li
507.04 331.364 507.13 331.331 507.219 331.296 cv
508.714 339.32 li
508.475 339.457 li
508.471 339.457 508.468 339.458 508.464 339.458 cv
f
517.58 334.395 mo
517.57 334.27 li
517.735 334.175 li
517.684 334.249 517.632 334.322 517.58 334.395 cv
f
517.554 334.07 mo
517.544 333.949 li
518.412 332.57 519.112 330.977 519.593 329.152 cv
513.98 321.961 li
514.122 320.987 514.218 319.97 514.218 318.869 cv
514.218 317.768 514.122 316.64 513.98 315.503 cv
514.273 315.481 li
514.397 316.526 514.478 317.563 514.478 318.576 cv
514.478 319.677 514.382 320.695 514.24 321.668 cv
514.24 321.668 li
519.853 328.86 li
519.325 330.864 518.545 332.605 517.554 334.07 cv
f
517.57 334.27 mo
517.554 334.07 li
518.545 332.605 519.325 330.864 519.853 328.86 cv
519.853 328.86 li
520.054 328.745 li
520.124 328.834 li
519.58 330.899 518.769 332.684 517.735 334.175 cv
517.57 334.27 li
f
514.24 321.668 mo
514.382 320.695 514.478 319.677 514.478 318.576 cv
514.478 318.576 li
514.478 317.563 514.397 316.526 514.273 315.481 cv
514.539 315.461 li
514.662 316.504 514.748 317.54 514.748 318.551 cv
514.748 319.598 514.662 320.571 514.531 321.501 cv
514.24 321.668 li
f
519.853 328.86 mo
519.853 328.86 li
514.24 321.668 li
514.531 321.501 li
514.525 321.549 514.518 321.596 514.511 321.643 cv
520.054 328.745 li
519.853 328.86 li
f
498.732 288.621 mo
497.865 287.974 496.985 287.368 496.083 286.847 cv
496.985 287.368 497.865 287.974 498.732 288.621 cv
498.732 288.621 li
489.826 277.066 mo
489.772 277.051 489.717 277.037 489.663 277.022 cv
489.717 277.037 489.772 277.051 489.826 277.066 cv
489.569 276.997 mo
487.999 276.585 486.494 276.386 485.067 276.386 cv
486.494 276.386 487.999 276.585 489.569 276.997 cv
485.064 276.386 mo
485.065 276.386 485.066 276.386 485.067 276.386 cv
485.067 276.386 li
485.066 276.386 485.065 276.386 485.064 276.386 cv
f
498.662 288.968 mo
497.742 288.275 496.808 287.625 495.848 287.071 cv
494.889 286.517 493.954 286.088 493.034 285.719 cv
489.591 277.29 li
488.082 276.873 486.341 276.766 484.866 276.766 cv
484.578 276.766 484.3 276.77 484.037 276.777 cv
483.971 276.426 li
484.33 276.399 484.694 276.386 485.064 276.386 cv
485.065 276.386 485.066 276.386 485.067 276.386 cv
485.067 276.386 li
486.494 276.386 487.999 276.585 489.569 276.997 cv
489.601 277.006 489.632 277.014 489.663 277.022 cv
489.717 277.037 489.772 277.051 489.826 277.066 cv
489.826 277.066 li
493.269 285.495 li
493.269 285.495 li
494.188 285.864 495.123 286.293 496.083 286.847 cv
496.083 286.847 li
496.985 287.368 497.865 287.974 498.732 288.621 cv
498.662 288.968 li
f
493.269 285.495 mo
489.826 277.066 li
489.942 276.999 li
489.994 277.013 490.045 277.027 490.096 277.041 cv
493.496 285.365 li
493.269 285.495 li
f
498.732 288.621 mo
497.865 287.974 496.985 287.368 496.083 286.847 cv
496.083 286.847 li
495.123 286.293 494.188 285.864 493.269 285.495 cv
493.269 285.495 li
493.496 285.365 li
493.539 285.47 li
494.459 285.839 495.394 286.268 496.353 286.822 cv
497.176 287.297 497.978 287.851 498.77 288.434 cv
498.732 288.621 li
f
489.826 277.066 mo
489.826 277.066 li
489.772 277.051 489.717 277.037 489.663 277.022 cv
489.632 277.014 489.601 277.006 489.569 276.997 cv
487.999 276.585 486.494 276.386 485.067 276.386 cv
485.067 276.386 li
485.067 276.386 li
485.066 276.386 485.065 276.386 485.064 276.386 cv
484.694 276.386 484.33 276.399 483.971 276.426 cv
483.971 276.423 li
484.418 276.382 484.873 276.361 485.337 276.361 cv
486.795 276.361 488.336 276.569 489.942 276.999 cv
489.826 277.066 li
f
490.096 331.595 mo
490.067 331.569 490.038 331.543 490.009 331.516 cv
490.274 331.365 li
490.096 331.595 li
f
489.949 331.461 mo
489.878 331.394 489.807 331.327 489.735 331.262 cv
492.614 327.538 li
492.692 327.597 492.771 327.653 492.85 327.708 cv
489.949 331.461 li
f
490.009 331.516 mo
489.989 331.498 489.969 331.479 489.949 331.461 cv
492.85 327.708 li
492.904 327.746 492.958 327.785 493.012 327.824 cv
490.274 331.365 li
490.009 331.516 li
f
539.486 297.438 mo
527.95 290.777 518.597 274.647 518.597 261.408 cv
518.597 256.498 519.898 252.699 522.109 250.18 cv
515.778 250.639 511.495 255.939 511.495 264.884 cv
511.495 278.122 520.847 294.253 532.384 300.913 cv
539.631 305.098 545.995 304.523 549.736 300.247 cv
546.708 300.469 543.217 299.592 539.486 297.438 cv
.51162 .157229 0 0 cmyk
f
532.384 300.914 mo
520.847 294.253 511.495 278.122 511.495 264.884 cv
511.495 251.646 520.847 246.314 532.384 252.975 cv
543.92 259.635 553.272 275.766 553.272 289.004 cv
553.272 302.242 543.92 307.574 532.384 300.914 cv
559.788 293.07 mo
559.788 291.413 559.644 289.716 559.431 288.006 cv
567.874 286.937 li
567.016 282.687 565.715 278.389 564.048 274.155 cv
554.427 271.245 li
552.748 267.647 550.73 264.167 548.439 260.917 cv
550.744 251.208 li
547.893 247.649 544.802 244.372 541.53 241.497 cv
536.35 248.196 li
534.967 247.152 533.561 246.175 532.118 245.342 cv
530.674 244.508 529.268 243.863 527.885 243.308 cv
522.706 230.629 li
519.433 229.726 516.342 229.433 513.491 229.699 cv
515.796 242.071 li
513.505 242.675 511.488 243.826 509.809 245.485 cv
500.188 237.285 li
498.52 239.594 497.219 242.39 496.361 245.649 cv
504.804 256.467 li
504.591 257.931 504.447 259.462 504.447 261.118 cv
504.447 262.774 504.591 264.471 504.804 266.181 cv
496.361 267.25 li
497.219 271.5 498.52 275.798 500.188 280.033 cv
509.808 282.942 li
511.488 286.541 513.505 290.021 515.796 293.27 cv
513.491 302.98 li
516.342 306.539 519.433 309.816 522.706 312.691 cv
527.885 305.992 li
529.268 307.035 530.674 308.012 532.118 308.846 cv
533.56 309.679 534.967 310.325 536.35 310.88 cv
541.53 323.558 li
544.802 324.462 547.893 324.755 550.744 324.487 cv
548.439 312.116 li
550.73 311.512 552.748 310.362 554.427 308.703 cv
564.048 316.902 li
565.715 314.593 567.016 311.797 567.874 308.538 cv
559.431 297.72 li
559.644 296.256 559.788 294.725 559.788 293.07 cv
.316289 .0888075 0 0 cmyk
f
535.976 238.66 mo
530.798 225.981 li
522.706 230.629 li
527.885 243.308 li
535.976 238.66 li
.51162 .157229 0 0 cmyk
f
527.885 243.308 mo
529.268 243.862 530.674 244.508 532.118 245.342 cv
533.561 246.175 534.967 247.152 536.35 248.196 cv
541.529 241.498 li
541.527 241.499 li
541.527 241.499 540.652 240.949 540.209 240.694 cv
538.766 239.861 537.36 239.215 535.976 238.66 cv
527.885 243.308 li
.158541 .0152895 0 0 cmyk
f
530.798 225.981 mo
527.525 225.078 524.434 224.785 521.583 225.052 cv
513.491 229.7 li
516.342 229.433 519.433 229.726 522.706 230.629 cv
530.798 225.981 li
f
558.836 246.56 mo
555.984 243.001 552.893 239.724 549.621 236.849 cv
541.53 241.497 li
544.802 244.372 547.893 247.649 550.744 251.208 cv
558.836 246.56 li
f
550.744 251.208 mo
548.439 260.917 li
556.53 256.269 li
558.836 246.56 li
550.744 251.208 li
.51162 .157229 0 0 cmyk
f
548.439 260.917 mo
550.73 264.167 552.748 267.647 554.427 271.246 cv
562.519 266.598 li
560.84 262.999 558.821 259.519 556.53 256.269 cv
548.439 260.917 li
f
554.427 271.246 mo
564.048 274.155 li
572.14 269.507 li
562.519 266.598 li
554.427 271.246 li
.158541 .0152895 0 0 cmyk
f
564.048 274.155 mo
565.715 278.389 567.016 282.687 567.874 286.937 cv
575.966 282.289 li
575.107 278.039 573.806 273.741 572.14 269.507 cv
564.048 274.155 li
.51162 .157229 0 0 cmyk
f
515.796 242.071 mo
515.126 238.473 li
508.279 232.637 li
500.188 237.285 li
509.809 245.485 li
511.488 243.826 513.505 242.675 515.796 242.071 cv
f
567.874 308.538 mo
567.016 311.797 565.715 314.593 564.048 316.902 cv
572.14 312.254 li
573.806 309.945 575.107 307.149 575.966 303.89 cv
567.874 308.538 li
f
567.523 293.073 mo
567.736 291.608 567.88 290.077 567.88 288.422 cv
567.88 287.934 567.848 287.438 567.822 286.944 cv
559.431 288.006 li
559.644 289.716 559.788 291.413 559.788 293.07 cv
559.788 294.725 559.644 296.256 559.431 297.72 cv
567.523 293.073 li
f
559.431 297.72 mo
567.874 308.538 li
575.966 303.89 li
567.523 293.073 li
559.431 297.72 li
.158541 .0152895 0 0 cmyk
f
554.427 308.703 mo
552.748 310.362 550.73 311.512 548.439 312.116 cv
550.744 324.487 li
558.836 319.84 li
557.201 311.067 li
554.427 308.703 li
.51162 .157229 0 0 cmyk
f
504.5 262.473 mo
496.361 267.25 li
504.804 266.181 li
504.648 264.932 504.553 263.697 504.5 262.473 cv
.158541 .0152895 0 0 cmyk
f
527.885 305.992 mo
522.706 312.69 li
530.857 308.051 li
529.854 307.408 528.861 306.728 527.885 305.992 cv
.51162 .157229 0 0 cmyk
f
513.667 243.01 mo
514.034 242.829 514.403 242.652 514.789 242.504 cv
514.812 242.629 li
514.418 242.733 514.044 242.875 513.667 243.01 cv
0 0 0 0 cmyk
f
496.861 267.62 mo
496.832 267.484 496.795 267.348 496.768 267.212 cv
503.778 266.325 li
503.794 266.464 503.802 266.601 503.819 266.74 cv
496.861 267.62 li
f
567.823 286.975 mo
567.823 286.965 567.822 286.954 567.822 286.944 cv
567.874 286.937 li
567.874 286.937 li
568.246 286.724 li
568.258 286.783 568.27 286.841 568.281 286.899 cv
567.823 286.975 li
553.105 268.571 mo
551.765 266.004 550.254 263.515 548.599 261.145 cv
550.254 263.515 551.765 266.004 553.105 268.571 cv
550.744 251.208 mo
547.984 247.763 544.999 244.582 541.843 241.774 cv
541.843 241.774 li
544.999 244.582 547.984 247.762 550.744 251.208 cv
f
567.318 287.008 mo
566.46 282.907 565.202 278.765 563.595 274.683 cv
553.974 271.773 li
552.295 268.175 550.276 264.694 547.986 261.445 cv
550.291 251.736 li
547.6 248.376 544.689 245.281 541.62 242.526 cv
541.843 241.774 li
544.999 244.582 547.984 247.763 550.744 251.208 cv
550.744 251.208 li
548.439 260.917 li
548.439 260.917 li
548.492 260.993 548.546 261.069 548.599 261.145 cv
550.254 263.515 551.765 266.004 553.105 268.571 cv
553.566 269.454 554.007 270.346 554.427 271.246 cv
554.427 271.246 li
554.427 271.245 li
554.427 271.246 li
564.048 274.155 li
564.048 274.155 li
565.715 278.389 567.016 282.687 567.874 286.937 cv
567.822 286.944 li
567.822 286.944 567.822 286.944 567.822 286.944 cv
567.318 287.008 li
f
550.744 251.208 mo
550.744 251.208 li
550.744 251.208 li
547.984 247.762 544.999 244.582 541.843 241.774 cv
541.937 241.459 li
545.167 244.298 548.222 247.529 551.043 251.036 cv
550.744 251.208 li
f
548.439 260.917 mo
550.744 251.208 li
551.043 251.036 li
551.079 251.08 551.115 251.125 551.151 251.17 cv
548.9 260.652 li
548.439 260.917 li
f
554.427 271.246 mo
554.007 270.346 553.566 269.454 553.105 268.571 cv
551.765 266.004 550.254 263.515 548.599 261.145 cv
548.546 261.069 548.492 260.993 548.439 260.917 cv
548.439 260.917 li
548.9 260.652 li
548.846 260.879 li
551.104 264.082 553.097 267.51 554.762 271.053 cv
554.427 271.246 li
f
564.048 274.155 mo
554.427 271.246 li
554.762 271.053 li
554.786 271.105 554.81 271.156 554.834 271.208 cv
564.231 274.049 li
564.048 274.155 li
f
567.874 286.937 mo
567.874 286.937 li
567.016 282.687 565.715 278.389 564.048 274.155 cv
564.048 274.155 li
564.231 274.049 li
564.455 274.117 li
566.099 278.293 567.387 282.531 568.246 286.724 cv
567.874 286.937 li
f
567.328 287.057 mo
567.325 287.04 567.322 287.024 567.318 287.008 cv
567.822 286.944 li
567.822 286.944 li
567.822 286.954 567.823 286.965 567.823 286.975 cv
567.328 287.057 li
f
541.759 303.782 mo
538.94 303.782 535.756 302.86 532.384 300.914 cv
530.626 299.899 528.919 298.664 527.288 297.254 cv
528.919 298.664 530.626 299.899 532.384 300.913 cv
535.742 302.853 538.912 303.77 541.719 303.77 cv
543.386 303.77 544.925 303.446 546.3 302.821 cv
546.359 302.806 546.417 302.79 546.475 302.774 cv
545.066 303.438 543.481 303.782 541.759 303.782 cv
511.495 264.831 mo
511.495 264.823 511.495 264.816 511.495 264.809 cv
511.495 264.816 511.495 264.824 511.495 264.831 cv
511.495 264.777 mo
511.495 264.769 511.495 264.759 511.495 264.751 cv
511.495 264.76 511.495 264.768 511.495 264.777 cv
511.496 264.724 mo
511.496 264.715 511.496 264.704 511.496 264.695 cv
511.496 264.704 511.496 264.715 511.496 264.724 cv
511.496 264.671 mo
511.496 264.661 511.496 264.65 511.496 264.639 cv
511.496 264.65 511.496 264.661 511.496 264.671 cv
511.496 264.619 mo
511.497 264.607 511.497 264.596 511.497 264.584 cv
511.497 264.595 511.497 264.608 511.496 264.619 cv
511.497 264.567 mo
511.497 264.554 511.497 264.541 511.497 264.527 cv
511.497 264.541 511.497 264.554 511.497 264.567 cv
511.498 264.516 mo
511.498 264.502 511.498 264.487 511.498 264.473 cv
511.498 264.487 511.498 264.502 511.498 264.516 cv
511.498 264.465 mo
511.499 264.45 511.499 264.434 511.499 264.419 cv
511.499 264.434 511.499 264.45 511.498 264.465 cv
511.499 264.414 mo
511.499 264.397 511.5 264.381 511.5 264.364 cv
511.5 264.381 511.499 264.397 511.499 264.414 cv
511.5 264.364 mo
511.565 260.92 512.277 258.032 513.504 255.776 cv
513.376 256.016 513.254 256.264 513.138 256.518 cv
512.136 258.65 511.558 261.282 511.5 264.364 cv
f
541.719 303.77 mo
538.912 303.77 535.742 302.853 532.384 300.913 cv
530.626 299.899 528.919 298.664 527.288 297.254 cv
518.372 289.541 511.728 276.563 511.501 265.468 cv
511.497 265.273 511.495 265.078 511.495 264.884 cv
511.495 264.866 511.495 264.848 511.495 264.831 cv
511.495 264.824 511.495 264.816 511.495 264.809 cv
511.495 264.798 511.495 264.788 511.495 264.777 cv
511.495 264.768 511.495 264.76 511.495 264.751 cv
511.496 264.742 511.496 264.733 511.496 264.724 cv
511.496 264.715 511.496 264.704 511.496 264.695 cv
511.496 264.687 511.496 264.68 511.496 264.671 cv
511.496 264.661 511.496 264.65 511.496 264.639 cv
511.496 264.632 511.496 264.626 511.496 264.619 cv
511.497 264.608 511.497 264.595 511.497 264.584 cv
511.497 264.579 511.497 264.572 511.497 264.567 cv
511.497 264.554 511.497 264.541 511.497 264.527 cv
511.497 264.523 511.498 264.52 511.498 264.516 cv
511.498 264.502 511.498 264.487 511.498 264.473 cv
511.498 264.47 511.498 264.467 511.498 264.465 cv
511.499 264.45 511.499 264.434 511.499 264.419 cv
511.499 264.418 511.499 264.415 511.499 264.414 cv
511.499 264.397 511.5 264.381 511.5 264.364 cv
511.5 264.364 li
511.558 261.282 512.136 258.65 513.138 256.518 cv
512.125 258.741 511.566 261.494 511.566 264.724 cv
511.566 277.962 520.918 294.093 532.454 300.754 cv
535.819 302.696 538.994 303.613 541.807 303.613 cv
543.19 303.613 544.486 303.391 545.672 302.961 cv
545.882 302.915 546.094 302.873 546.3 302.821 cv
544.925 303.446 543.386 303.77 541.719 303.77 cv
f
541.023 304.184 mo
538.207 304.184 535.028 303.264 531.661 301.32 cv
520.124 294.66 510.772 278.529 510.772 265.291 cv
510.772 258.95 512.929 254.446 516.436 252.189 cv
515.269 253.112 514.28 254.314 513.504 255.776 cv
512.277 258.032 511.565 260.92 511.5 264.364 cv
511.5 264.364 li
511.5 264.381 511.499 264.397 511.499 264.414 cv
511.499 264.415 511.499 264.418 511.499 264.419 cv
511.499 264.434 511.499 264.45 511.498 264.465 cv
511.498 264.467 511.498 264.47 511.498 264.473 cv
511.498 264.487 511.498 264.502 511.498 264.516 cv
511.498 264.52 511.497 264.523 511.497 264.527 cv
511.497 264.541 511.497 264.554 511.497 264.567 cv
511.497 264.572 511.497 264.579 511.497 264.584 cv
511.497 264.596 511.497 264.607 511.496 264.619 cv
511.496 264.626 511.496 264.632 511.496 264.639 cv
511.496 264.65 511.496 264.661 511.496 264.671 cv
511.496 264.68 511.496 264.687 511.496 264.695 cv
511.496 264.704 511.496 264.715 511.496 264.724 cv
511.496 264.733 511.496 264.742 511.495 264.751 cv
511.495 264.759 511.495 264.769 511.495 264.777 cv
511.495 264.788 511.495 264.798 511.495 264.809 cv
511.495 264.816 511.495 264.823 511.495 264.831 cv
511.495 264.848 511.495 264.866 511.495 264.884 cv
511.495 264.884 li
511.495 265.078 511.497 265.273 511.501 265.468 cv
511.728 276.563 518.372 289.541 527.288 297.254 cv
528.919 298.664 530.626 299.899 532.384 300.914 cv
535.756 302.86 538.94 303.782 541.759 303.782 cv
543.481 303.782 545.066 303.438 546.475 302.774 cv
546.496 302.768 546.516 302.761 546.537 302.755 cv
544.938 303.694 543.078 304.184 541.023 304.184 cv
f
550.893 311.21 mo
551.811 310.671 552.667 310.028 553.442 309.261 cv
553.636 309.426 li
552.793 310.137 551.877 310.733 550.893 311.21 cv
f
549.992 311.697 mo
550.299 311.545 550.599 311.383 550.893 311.21 cv
551.877 310.733 552.793 310.137 553.636 309.426 cv
553.799 309.565 li
552.655 310.487 551.38 311.196 549.992 311.697 cv
f
509.479 245.704 mo
509.36 245.704 509.338 245.662 509.376 245.594 cv
509.504 245.704 li
509.495 245.704 509.487 245.704 509.479 245.704 cv
509.376 245.594 mo
500.531 238.056 li
500.192 238.018 500.26 237.771 500.43 237.492 cv
509.63 245.333 li
509.511 245.435 509.414 245.527 509.376 245.594 cv
f
509.63 245.333 mo
500.43 237.492 li
500.479 237.411 500.536 237.328 500.595 237.247 cv
509.86 245.144 li
509.78 245.208 509.701 245.272 509.63 245.333 cv
f
550.416 324.514 mo
550.318 324.509 550.332 324.505 550.413 324.5 cv
550.416 324.514 li
550.413 324.5 mo
548.21 312.675 li
548.019 312.584 548.198 312.474 548.483 312.355 cv
550.743 324.48 li
550.602 324.489 550.483 324.495 550.413 324.5 cv
f
550.758 324.479 mo
551.118 324.273 li
551.151 324.45 li
551.016 324.462 550.879 324.472 550.758 324.479 cv
f
550.743 324.48 mo
548.483 312.355 li
548.6 312.306 548.735 312.255 548.869 312.203 cv
551.118 324.273 li
550.758 324.479 li
550.753 324.48 550.748 324.48 550.743 324.48 cv
f
564.455 316.864 mo
564.44 316.677 li
564.688 316.534 li
564.611 316.645 564.534 316.755 564.455 316.864 cv
559.431 297.72 mo
559.431 297.72 li
559.644 296.256 559.788 294.725 559.788 293.07 cv
559.788 291.545 559.666 289.986 559.48 288.413 cv
559.481 288.413 li
559.666 289.986 559.788 291.545 559.788 293.07 cv
559.788 294.725 559.644 296.256 559.431 297.72 cv
559.869 297.469 li
559.869 297.469 li
559.431 297.72 li
f
564.415 316.376 mo
564.401 316.194 li
565.706 314.12 566.76 311.724 567.483 308.978 cv
559.04 298.161 li
559.253 296.697 559.397 295.165 559.397 293.51 cv
559.397 291.854 559.253 290.157 559.04 288.446 cv
559.48 288.413 li
559.666 289.986 559.788 291.545 559.788 293.07 cv
559.788 294.725 559.644 296.256 559.431 297.72 cv
559.431 297.72 li
567.874 308.538 li
567.08 311.553 565.907 314.172 564.415 316.376 cv
f
564.44 316.677 mo
564.415 316.376 li
565.907 314.172 567.08 311.553 567.874 308.538 cv
567.874 308.538 li
568.176 308.365 li
568.281 308.5 li
567.463 311.605 566.243 314.29 564.688 316.534 cv
564.44 316.677 li
f
559.431 297.72 mo
559.644 296.256 559.788 294.725 559.788 293.07 cv
559.788 291.545 559.666 289.986 559.481 288.413 cv
559.88 288.383 li
560.065 289.952 560.195 291.51 560.195 293.032 cv
560.195 294.607 560.065 296.069 559.869 297.469 cv
559.431 297.72 li
f
567.874 308.538 mo
567.874 308.538 li
559.431 297.72 li
559.869 297.469 li
559.859 297.54 559.849 297.612 559.838 297.683 cv
568.176 308.365 li
567.874 308.538 li
f
532.016 245.283 mo
530.609 244.478 529.236 243.85 527.885 243.308 cv
529.236 243.849 530.609 244.478 532.016 245.283 cv
522.647 230.613 mo
521.027 230.169 519.451 229.875 517.926 229.724 cv
519.451 229.875 521.027 230.169 522.647 230.613 cv
f
535.997 248.532 mo
534.614 247.489 533.208 246.511 531.765 245.678 cv
530.322 244.845 528.915 244.199 527.532 243.644 cv
522.353 230.965 li
520.082 230.339 517.463 230.177 515.244 230.177 cv
514.812 230.177 514.394 230.184 513.997 230.194 cv
513.899 229.665 li
514.44 229.625 514.99 229.605 515.547 229.605 cv
516.325 229.605 517.118 229.645 517.926 229.724 cv
519.451 229.875 521.027 230.169 522.647 230.613 cv
522.667 230.618 522.686 230.623 522.706 230.629 cv
522.706 230.629 li
527.885 243.308 li
527.885 243.308 li
527.885 243.308 li
529.236 243.85 530.609 244.478 532.016 245.283 cv
532.05 245.303 532.084 245.322 532.118 245.342 cv
533.475 246.125 534.799 247.036 536.103 248.01 cv
535.997 248.532 li
f
527.885 243.308 mo
522.706 230.629 li
522.881 230.528 li
522.959 230.549 523.036 230.57 523.113 230.591 cv
528.227 243.111 li
527.885 243.308 li
f
536.103 248.01 mo
534.799 247.036 533.475 246.125 532.118 245.342 cv
532.084 245.322 532.05 245.303 532.016 245.283 cv
530.609 244.478 529.236 243.849 527.885 243.308 cv
527.885 243.308 li
528.227 243.111 li
528.292 243.27 li
529.675 243.825 531.082 244.471 532.525 245.304 cv
533.762 246.018 534.968 246.851 536.16 247.728 cv
536.103 248.01 li
f
522.706 230.629 mo
522.686 230.623 522.667 230.618 522.647 230.613 cv
521.027 230.169 519.451 229.875 517.926 229.724 cv
517.118 229.645 516.325 229.605 515.547 229.605 cv
514.99 229.605 514.44 229.625 513.899 229.665 cv
513.898 229.661 li
514.57 229.599 515.255 229.567 515.953 229.567 cv
518.146 229.567 520.464 229.88 522.881 230.528 cv
522.706 230.629 li
f
523.113 312.653 mo
523.107 312.647 523.102 312.642 523.096 312.637 cv
523.148 312.607 li
523.113 312.653 li
f
523.096 312.637 mo
523.057 312.603 523.019 312.569 522.981 312.534 cv
523.381 312.306 li
523.148 312.607 li
523.096 312.637 li
f
522.891 312.451 mo
522.784 312.351 522.678 312.249 522.57 312.152 cv
526.9 306.55 li
527.017 306.639 527.136 306.722 527.255 306.806 cv
522.891 312.451 li
f
522.981 312.534 mo
522.951 312.506 522.921 312.478 522.891 312.451 cv
527.255 306.806 li
527.336 306.863 527.417 306.921 527.498 306.98 cv
523.381 312.306 li
522.981 312.534 li
f
582.496 307.022 mo
581.529 306.769 li
582.313 303.795 li
573.536 292.55 li
573.55 292.357 li
573.596 291.732 573.625 291.116 573.639 290.507 cv
573.648 290.076 li
582.935 288.899 li
581.611 282.357 li
580.694 277.824 579.304 273.173 577.478 268.533 cv
576.376 265.738 li
566.464 262.741 li
566.366 262.554 li
565.298 260.492 564.123 258.465 562.875 256.528 cv
562.759 256.35 li
565.137 246.343 li
563.242 243.979 li
560.12 240.083 556.77 236.553 553.282 233.488 cv
548.322 229.129 li
542.638 236.48 li
542.263 236.273 li
541.695 235.961 541.11 235.659 540.508 235.369 cv
540.335 235.286 li
534.953 222.111 li
532.015 221.3 li
529.015 220.473 526.051 220.053 523.205 220.053 cv
523.205 219.053 li
526.141 219.053 529.194 219.484 532.28 220.335 cv
535.693 221.277 li
541.115 234.553 li
541.542 234.761 541.96 234.974 542.369 235.193 cv
548.182 227.674 li
553.942 232.736 li
557.473 235.84 560.864 239.412 564.023 243.354 cv
566.223 246.099 li
563.83 256.166 li
565.016 258.016 566.133 259.944 567.157 261.905 cv
577.13 264.922 li
578.407 268.166 li
580.256 272.861 581.663 277.569 582.592 282.159 cv
584.128 289.757 li
574.626 290.96 li
574.612 291.382 574.59 291.808 574.561 292.237 cv
583.406 303.57 li
582.496 307.022 li
cp
.158541 .0152895 0 0 cmyk
f
475.297 260.998 mo
475.049 260.998 474.833 260.813 474.802 260.56 cv
474.768 260.286 474.962 260.036 475.236 260.002 cv
475.903 259.919 476.589 259.866 477.275 259.844 cv
477.538 259.835 477.782 260.053 477.791 260.328 cv
477.8 260.604 477.583 260.835 477.307 260.844 cv
476.651 260.864 475.996 260.915 475.359 260.994 cv
475.297 260.998 li
cp
482.271 261.192 mo
482.188 261.186 li
481.538 261.077 480.883 260.993 480.241 260.935 cv
479.967 260.909 479.764 260.666 479.789 260.391 cv
479.814 260.116 480.067 259.921 480.333 259.938 cv
480.998 259.999 481.678 260.087 482.353 260.199 cv
482.625 260.244 482.809 260.502 482.764 260.774 cv
482.723 261.019 482.511 261.192 482.271 261.192 cv
cp
470.467 262.225 mo
470.269 262.225 470.08 262.105 470.002 261.91 cv
469.9 261.653 470.025 261.362 470.281 261.26 cv
470.913 261.008 471.567 260.787 472.226 260.604 cv
472.492 260.525 472.768 260.686 472.842 260.95 cv
472.916 261.217 472.761 261.492 472.495 261.566 cv
471.871 261.74 471.251 261.95 470.652 262.189 cv
470.467 262.225 li
cp
487.116 262.403 mo
486.96 262.378 li
486.323 262.168 485.693 261.979 485.07 261.812 cv
484.804 261.74 484.646 261.466 484.718 261.199 cv
484.789 260.934 485.061 260.777 485.33 260.847 cv
485.971 261.019 486.618 261.213 487.272 261.429 cv
487.535 261.515 487.678 261.798 487.591 262.06 cv
487.521 262.271 487.326 262.403 487.116 262.403 cv
cp
491.748 264.279 mo
491.533 264.23 li
490.927 263.942 490.325 263.673 489.729 263.422 cv
489.475 263.314 489.354 263.021 489.462 262.767 cv
489.568 262.513 489.86 262.393 490.117 262.5 cv
490.728 262.757 491.343 263.032 491.963 263.328 cv
492.212 263.446 492.318 263.745 492.199 263.994 cv
492.114 264.174 491.935 264.279 491.748 264.279 cv
cp
466.137 264.688 mo
465.987 264.688 465.839 264.621 465.74 264.493 cv
465.572 264.274 465.613 263.96 465.832 263.792 cv
466.379 263.372 466.949 262.981 467.526 262.633 cv
467.762 262.492 468.069 262.565 468.213 262.802 cv
468.355 263.038 468.28 263.346 468.044 263.488 cv
467.498 263.818 466.959 264.188 466.441 264.585 cv
466.351 264.654 466.243 264.688 466.137 264.688 cv
cp
495.131 266.063 mo
494.881 265.995 li
494.644 265.858 494.406 265.724 494.17 265.593 cv
493.928 265.458 493.841 265.154 493.975 264.913 cv
494.109 264.67 494.416 264.588 494.654 264.718 cv
494.896 264.853 495.138 264.989 495.381 265.13 cv
495.62 265.268 495.702 265.573 495.563 265.813 cv
495.472 265.973 495.303 266.063 495.131 266.063 cv
cp
462.62 268.222 mo
462.514 268.222 462.406 268.188 462.315 268.118 cv
462.097 267.949 462.056 267.636 462.224 267.417 cv
462.643 266.873 463.089 266.349 463.551 265.857 cv
463.74 265.656 464.057 265.647 464.258 265.836 cv
464.459 266.025 464.469 266.342 464.279 266.543 cv
463.84 267.01 463.415 267.509 463.017 268.026 cv
462.918 268.154 462.77 268.222 462.62 268.222 cv
cp
460.041 272.492 mo
459.829 272.445 li
459.579 272.327 459.471 272.03 459.588 271.78 cv
459.882 271.154 460.197 270.545 460.527 269.97 cv
460.664 269.728 460.971 269.647 461.209 269.784 cv
461.449 269.921 461.532 270.227 461.395 270.466 cv
461.079 271.019 460.775 271.604 460.494 272.204 cv
460.408 272.386 460.229 272.492 460.041 272.492 cv
cp
0 .772549 .115206 0 cmyk
f
457.08 289.565 mo
456.812 289.565 456.59 289.353 456.58 289.082 cv
456.56 288.477 456.549 287.873 456.549 287.274 cv
456.549 286.998 456.772 286.774 457.049 286.774 cv
457.325 286.774 457.549 286.998 457.549 287.274 cv
457.549 287.861 457.56 288.453 457.58 289.049 cv
457.589 289.324 457.373 289.556 457.097 289.565 cv
457.08 289.565 li
cp
457.471 294.552 mo
457.222 294.552 457.006 294.366 456.976 294.112 cv
456.894 293.44 456.823 292.771 456.766 292.104 cv
456.741 291.829 456.945 291.586 457.221 291.563 cv
457.485 291.544 457.737 291.741 457.762 292.018 cv
457.819 292.673 457.888 293.331 457.968 293.991 cv
458.001 294.266 457.807 294.515 457.532 294.548 cv
457.471 294.552 li
cp
458.268 299.489 mo
458.035 299.489 457.826 299.325 457.778 299.088 cv
457.646 298.426 457.523 297.765 457.411 297.105 cv
457.365 296.833 457.548 296.575 457.82 296.528 cv
458.087 296.485 458.351 296.665 458.397 296.938 cv
458.508 297.587 458.628 298.238 458.759 298.891 cv
458.813 299.162 458.638 299.425 458.367 299.479 cv
458.268 299.489 li
cp
459.42 304.355 mo
459.199 304.355 458.998 304.209 458.938 303.986 cv
458.761 303.336 458.593 302.687 458.434 302.037 cv
458.367 301.769 458.531 301.498 458.8 301.433 cv
459.071 301.369 459.339 301.531 459.404 301.799 cv
459.562 302.44 459.728 303.082 459.902 303.725 cv
459.975 303.991 459.817 304.266 459.551 304.338 cv
459.42 304.355 li
cp
460.889 309.136 mo
460.681 309.136 460.486 309.005 460.415 308.797 cv
460.198 308.16 459.989 307.522 459.788 306.884 cv
459.706 306.621 459.853 306.34 460.116 306.257 cv
460.381 306.175 460.66 306.321 460.743 306.585 cv
460.94 307.216 461.147 307.846 461.362 308.475 cv
461.451 308.735 461.312 309.02 461.05 309.109 cv
460.889 309.136 li
cp
462.645 313.818 mo
462.447 313.818 462.261 313.701 462.182 313.508 cv
461.928 312.885 461.681 312.261 461.442 311.635 cv
461.344 311.377 461.473 311.088 461.731 310.99 cv
461.988 310.893 462.277 311.02 462.376 311.279 cv
462.612 311.897 462.855 312.514 463.107 313.129 cv
463.212 313.385 463.089 313.677 462.834 313.781 cv
462.645 313.818 li
cp
f
533.173 333.746 mo
533.152 333.746 li
532.877 333.734 532.662 333.502 532.673 333.226 cv
532.699 332.577 532.713 331.918 532.713 331.247 cv
532.713 330.971 532.937 330.747 533.213 330.747 cv
533.489 330.747 533.713 330.971 533.713 331.247 cv
533.713 331.932 533.699 332.604 533.673 333.267 cv
533.661 333.535 533.44 333.746 533.173 333.746 cv
cp
532.688 338.718 mo
532.608 338.712 li
532.336 338.668 532.15 338.411 532.193 338.139 cv
532.296 337.5 532.383 336.849 532.455 336.183 cv
532.484 335.907 532.735 335.714 533.006 335.739 cv
533.28 335.77 533.479 336.016 533.449 336.29 cv
533.375 336.974 533.286 337.643 533.182 338.297 cv
533.142 338.543 532.93 338.718 532.688 338.718 cv
cp
531.557 343.582 mo
531.407 343.56 li
531.144 343.477 530.997 343.196 531.079 342.933 cv
531.271 342.318 531.449 341.687 531.609 341.037 cv
531.676 340.771 531.945 340.605 532.215 340.672 cv
532.482 340.738 532.646 341.009 532.58 341.277 cv
532.414 341.946 532.232 342.598 532.034 343.231 cv
531.967 343.445 531.77 343.582 531.557 343.582 cv
cp
529.641 348.189 mo
529.405 348.131 li
529.162 348.001 529.069 347.698 529.199 347.454 cv
529.504 346.883 529.79 346.289 530.05 345.69 cv
530.16 345.437 530.456 345.324 530.708 345.431 cv
530.961 345.541 531.077 345.836 530.968 346.089 cv
530.696 346.712 530.398 347.329 530.082 347.925 cv
529.992 348.094 529.819 348.189 529.641 348.189 cv
cp
526.82 352.301 mo
526.703 352.301 526.586 352.26 526.49 352.177 cv
526.283 351.994 526.263 351.679 526.444 351.471 cv
526.867 350.989 527.274 350.476 527.655 349.945 cv
527.816 349.72 528.13 349.669 528.353 349.83 cv
528.577 349.991 528.629 350.304 528.468 350.527 cv
528.068 351.085 527.641 351.624 527.196 352.131 cv
527.098 352.243 526.959 352.301 526.82 352.301 cv
cp
496.474 354.209 mo
496.237 354.149 li
495.787 353.907 495.335 353.656 494.88 353.393 cv
494.642 353.254 494.56 352.948 494.698 352.709 cv
494.837 352.47 495.144 352.39 495.382 352.527 cv
495.827 352.785 496.27 353.032 496.71 353.269 cv
496.953 353.399 497.045 353.702 496.914 353.945 cv
496.824 354.113 496.651 354.209 496.474 354.209 cv
cp
523.072 355.584 mo
522.91 355.584 522.751 355.505 522.655 355.359 cv
522.503 355.129 522.566 354.818 522.797 354.667 cv
523.334 354.313 523.858 353.923 524.355 353.509 cv
524.567 353.332 524.882 353.36 525.06 353.572 cv
525.236 353.785 525.208 354.1 524.996 354.276 cv
524.47 354.715 523.915 355.127 523.348 355.501 cv
523.263 355.558 523.167 355.584 523.072 355.584 cv
cp
500.996 356.331 mo
500.811 356.295 li
500.195 356.049 499.574 355.783 498.95 355.499 cv
498.698 355.385 498.588 355.088 498.702 354.837 cv
498.817 354.585 499.113 354.478 499.364 354.589 cv
499.975 354.867 500.58 355.127 501.182 355.367 cv
501.438 355.47 501.563 355.76 501.46 356.017 cv
501.382 356.212 501.194 356.331 500.996 356.331 cv
cp
518.58 357.732 mo
518.368 357.732 518.172 357.597 518.104 357.385 cv
518.02 357.122 518.165 356.84 518.428 356.756 cv
519.041 356.561 519.652 356.328 520.243 356.065 cv
520.495 355.954 520.791 356.066 520.903 356.319 cv
521.016 356.572 520.901 356.867 520.649 356.979 cv
520.024 357.257 519.38 357.502 518.732 357.709 cv
518.58 357.732 li
cp
505.75 357.87 mo
505.632 357.855 li
504.986 357.698 504.333 357.518 503.675 357.313 cv
503.411 357.231 503.264 356.951 503.346 356.688 cv
503.427 356.425 503.702 356.272 503.972 356.358 cv
504.61 356.557 505.242 356.731 505.868 356.885 cv
506.137 356.95 506.301 357.221 506.235 357.488 cv
506.18 357.717 505.976 357.87 505.75 357.87 cv
cp
510.684 358.642 mo
510.651 358.641 li
509.988 358.599 509.307 358.529 508.625 358.435 cv
508.352 358.396 508.161 358.144 508.199 357.87 cv
508.238 357.597 508.5 357.413 508.764 357.444 cv
509.419 357.536 510.075 357.603 510.714 357.643 cv
510.989 357.66 511.199 357.897 511.182 358.173 cv
511.165 358.438 510.945 358.642 510.684 358.642 cv
cp
513.68 358.646 mo
513.419 358.646 513.199 358.443 513.182 358.179 cv
513.164 357.903 513.373 357.665 513.648 357.647 cv
514.309 357.604 514.961 357.532 515.587 357.432 cv
515.865 357.389 516.116 357.574 516.16 357.847 cv
516.203 358.12 516.018 358.376 515.745 358.42 cv
515.088 358.524 514.404 358.601 513.713 358.646 cv
513.68 358.646 li
cp
f
510.278 348.595 mo
506.029 348.595 501.296 347.173 496.371 344.329 cv
479.494 334.586 465.764 310.902 465.764 291.535 cv
465.764 282.042 469.011 274.963 474.907 271.602 cv
475.403 272.471 li
469.832 275.646 466.764 282.417 466.764 291.535 cv
466.764 310.584 480.27 333.879 496.871 343.464 cv
506.269 348.887 514.884 348.965 520.509 343.675 cv
521.194 344.403 li
518.223 347.197 514.488 348.595 510.278 348.595 cv
cp
f
522.654 344.387 mo
522.61 345.322 521.968 345.73 521.22 345.298 cv
520.473 344.867 519.903 343.759 519.947 342.825 cv
519.992 341.89 520.634 341.482 521.381 341.914 cv
522.129 342.345 522.698 343.453 522.654 344.387 cv
cp
.0122377 .872923 .218967 0 cmyk
f
474.238 274.964 mo
473.986 274.896 li
473.748 274.757 473.667 274.45 473.807 274.212 cv
474.961 272.233 li
472.075 272.646 li
471.807 272.677 471.549 272.495 471.51 272.221 cv
471.471 271.947 471.661 271.694 471.935 271.655 cv
475.844 271.097 li
476.033 271.074 476.223 271.154 476.329 271.313 cv
476.436 271.472 476.442 271.678 476.346 271.844 cv
474.67 274.716 li
474.577 274.875 474.41 274.964 474.238 274.964 cv
cp
f
540.717 289.044 mo
531.034 280.476 li
528.472 267.896 li
535.528 263.826 li
545.211 272.393 li
547.805 285.002 li
540.717 289.044 li
cp
.618372 0 .259403 0 cmyk
f
540.717 289.044 mo
531.034 280.476 li
545.211 272.393 li
547.805 285.002 li
540.717 289.044 li
cp
.791928 .149783 .413275 .00347906 cmyk
f
581.9 359.799 mo
579.689 361.059 576.105 358.99 573.894 355.177 cv
571.683 351.364 571.683 347.251 573.894 345.99 cv
576.105 344.73 579.689 346.799 581.9 350.612 cv
584.11 354.426 584.11 358.538 581.9 359.799 cv
cp
587.618 347.265 mo
562.753 304.377 li
555.084 274.163 li
554.548 272.049 553.395 270.142 551.772 268.685 cv
541.993 259.902 li
540.851 258.876 539.18 258.696 537.846 259.457 cv
534.871 261.11 li
536.079 262.105 li
535.938 263.218 536.312 264.393 537.249 265.223 cv
544.464 271.607 li
548.232 289.916 li
537.939 295.784 li
523.878 283.343 li
521.94 273.924 li
521.45 271.54 518.775 270.33 516.661 271.535 cv
513.686 273.188 li
514.867 274.525 li
514.857 274.812 514.871 275.103 514.933 275.393 cv
517.652 288.121 li
518.108 290.255 519.188 292.205 520.755 293.724 cv
543.234 315.505 li
568.1 358.393 li
572.61 366.172 579.464 370.971 584.74 370.531 cv
584.643 371.315 li
587.618 369.662 li
587.618 369.662 li
593.008 366.589 593.008 356.561 587.618 347.265 cv
cp
1 .881834 .295842 .178653 cmyk
f
578.924 361.452 mo
576.714 362.712 573.13 360.643 570.919 356.83 cv
568.708 353.017 568.708 348.904 570.919 347.643 cv
573.13 346.383 576.714 348.452 578.924 352.265 cv
581.135 356.078 581.135 360.191 578.924 361.452 cv
cp
534.871 261.11 mo
534.871 261.11 li
532.749 262.32 532.445 265.257 534.274 266.876 cv
541.489 273.259 li
545.257 291.569 li
534.964 297.437 li
520.903 284.996 li
518.965 275.577 li
518.475 273.193 515.8 271.983 513.686 273.188 cv
512.331 273.961 511.632 275.521 511.958 277.046 cv
514.677 289.774 li
515.132 291.908 516.213 293.858 517.78 295.376 cv
540.26 317.158 li
565.124 360.046 li
570.514 369.342 579.253 374.388 584.643 371.315 cv
584.643 371.315 li
590.032 368.242 590.032 358.214 584.643 348.918 cv
559.778 306.03 li
552.109 275.816 li
551.573 273.702 550.42 271.795 548.797 270.337 cv
539.018 261.554 li
537.876 260.528 536.205 260.349 534.871 261.11 cv
cp
1 .794217 .112612 .0108034 cmyk
f
571.47 347.533 mo
571.519 347.51 li
571.311 347.57 571.109 347.645 570.919 347.753 cv
568.708 349.014 568.708 353.127 570.919 356.94 cv
573.114 360.726 576.661 362.789 578.875 361.584 cv
576.657 362.225 573.491 360.206 571.47 356.719 cv
569.259 352.906 569.259 348.793 571.47 347.533 cv
cp
.868467 .601343 0 0 cmyk
f
518.965 275.687 mo
520.903 285.106 li
534.964 297.547 li
535.45 297.27 li
521.454 284.886 li
519.516 275.466 li
519.041 273.158 516.519 271.957 514.44 272.978 cv
516.391 272.393 518.532 273.58 518.965 275.687 cv
cp
f
585.194 348.807 mo
560.329 305.919 li
552.66 275.705 li
552.124 273.591 550.971 271.685 549.348 270.227 cv
539.569 261.444 li
538.475 260.462 536.899 260.266 535.596 260.918 cv
536.773 260.558 538.075 260.817 539.018 261.665 cv
548.797 270.448 li
550.42 271.905 551.573 273.812 552.109 275.926 cv
559.778 306.14 li
584.643 349.028 li
590.033 358.324 590.033 368.352 584.643 371.425 cv
584.465 371.526 584.284 371.617 584.1 371.701 cv
584.477 371.568 584.843 371.404 585.194 371.204 cv
585.194 371.204 li
590.583 368.131 590.583 358.104 585.194 348.807 cv
cp
f
533.66 293.084 mo
523.977 284.517 li
521.383 271.908 li
528.471 267.866 li
538.154 276.434 li
540.748 289.043 li
533.66 293.084 li
cp
.728359 .00238041 .335668 0 cmyk
f
566.214 106.83 mo
563.862 105.472 561.632 104.769 559.612 104.632 cv
559.614 104.492 559.631 104.364 559.631 104.222 cv
559.631 84.2419 545.516 59.895 528.103 49.8422 cv
514.101 41.7581 502.247 45.3974 498.135 57.516 cv
497.06 56.6984 495.966 55.9363 494.844 55.288 cv
483.363 48.6598 474.056 53.9661 474.056 67.1399 cv
474.056 80.3136 483.363 96.3665 494.844 102.995 cv
500.582 106.308 559.42 140.278 566.214 144.2 cv
575.207 149.393 582.497 145.236 582.497 134.916 cv
582.497 124.597 575.207 112.022 566.214 106.83 cv
cp
.316289 .0888075 0 0 cmyk
f
485.489 105.165 mo
492.661 101.176 li
520.146 76.4659 li
518.585 74.8914 li
485.489 105.165 li
cp
.51162 .157229 0 0 cmyk
f
594.907 142.408 mo
594.091 141.83 li
596.29 138.726 597.452 134.629 597.452 129.985 cv
597.452 117.403 588.871 102.593 577.917 96.2681 cv
576.837 95.6445 575.737 95.106 574.649 94.668 cv
574.367 94.5542 li
574.338 94.252 li
572.261 72.7524 557.739 49.6338 539.809 39.2817 cv
534.141 36.0098 528.457 34.3506 522.917 34.3506 cv
517.871 34.3506 513.019 35.7773 508.885 38.4771 cv
508.338 37.6401 li
512.635 34.834 517.676 33.3506 522.917 33.3506 cv
528.635 33.3506 534.486 35.0547 540.309 38.4155 cv
558.414 48.8687 573.093 72.1436 575.304 93.8555 cv
576.343 94.2891 577.389 94.8086 578.417 95.4019 cv
589.651 101.889 598.452 117.079 598.452 129.985 cv
598.452 134.838 597.227 139.133 594.907 142.408 cv
cp
.158541 .0152895 0 0 cmyk
f
590.952 129.985 mo
590.952 119.666 583.662 107.091 574.669 101.899 cv
572.317 100.541 570.087 99.8373 568.068 99.7012 cv
568.069 99.5606 568.086 99.4332 568.086 99.291 cv
568.086 79.3108 553.971 54.9639 536.559 44.911 cv
526.782 39.2665 518.27 40.0226 512.279 44.0256 cv
502.222 49.767 li
496.539 46.8184 491.459 46.8382 487.88 49.3118 cv
474.352 57.418 li
478.017 55.8192 482.83 56.3391 488.104 59.3845 cv
489.227 60.0327 490.321 60.7948 491.396 61.6124 cv
495.508 49.4938 507.362 45.8545 521.364 53.9385 cv
538.776 63.9914 552.892 88.3383 552.892 108.319 cv
552.892 108.461 552.874 108.588 552.873 108.729 cv
554.892 108.865 557.122 109.568 559.474 110.926 cv
568.468 116.119 575.758 128.693 575.758 139.013 cv
575.758 143.379 574.449 146.637 572.262 148.555 cv
585.674 140.745 li
585.657 140.716 li
588.911 139.178 590.952 135.445 590.952 129.985 cv
cp
.51162 .157229 0 0 cmyk
f
560.664 110.398 mo
558.312 109.04 556.082 108.336 554.063 108.2 cv
554.064 108.06 554.081 107.932 554.081 107.79 cv
554.081 87.8097 539.966 63.4629 522.554 53.41 cv
514.209 48.5922 506.628 47.9401 500.993 50.7631 cv
506.485 48.5814 513.592 49.4514 521.364 53.9385 cv
538.776 63.9913 552.892 88.3383 552.892 108.319 cv
552.892 108.461 552.874 108.588 552.873 108.729 cv
554.892 108.865 557.122 109.568 559.474 110.926 cv
568.467 116.119 575.758 128.694 575.758 139.013 cv
575.758 144.233 573.89 147.873 570.882 149.527 cv
574.58 148.236 576.947 144.362 576.947 138.484 cv
576.947 128.165 569.657 115.59 560.664 110.398 cv
cp
0 0 0 0 cmyk
f
488.104 59.3844 mo
489.227 60.0327 490.321 60.7948 491.396 61.6124 cv
491.523 61.2383 491.657 60.8728 491.799 60.5149 cv
490.976 59.9177 490.145 59.3475 489.294 58.8558 cv
483.723 55.6397 478.668 55.2407 474.936 57.1796 cv
478.522 55.8771 483.107 56.4989 488.104 59.3844 cv
cp
f
559.474 110.926 mo
557.122 109.568 554.892 108.865 552.873 108.729 cv
552.874 108.588 552.892 108.461 552.892 108.319 cv
552.892 88.3383 538.776 63.9913 521.364 53.9385 cv
507.362 45.8545 495.508 49.4938 491.396 61.6124 cv
490.321 60.7948 489.227 60.0327 488.104 59.3844 cv
476.624 52.7562 467.317 58.0625 467.317 71.2363 cv
467.317 83.3326 475.166 97.8506 485.337 105.277 cv
518.585 74.8914 li
551.978 143.969 li
555.642 146.084 558.316 147.628 559.474 148.297 cv
568.467 153.489 575.758 149.332 575.758 139.013 cv
575.758 128.694 568.467 116.119 559.474 110.926 cv
cp
.158541 .0152895 0 0 cmyk
f
509.852 110.759 mo
509.852 148.965 li
528.301 159.616 li
528.301 121.41 li
541.424 128.987 li
519.077 82.7583 li
496.729 103.182 li
509.852 110.759 li
cp
509.852 165.241 mo
528.301 175.892 li
528.301 172.649 li
509.852 161.997 li
509.852 165.241 li
cp
509.852 159.095 mo
528.301 169.746 li
528.301 162.177 li
509.852 151.525 li
509.852 159.095 li
cp
.115541 .957794 .383185 0 cmyk
f
539.178 130.242 mo
541.424 128.987 li
519.077 82.7583 li
516.777 84.3283 li
539.178 130.242 li
cp
f
526.054 177.148 mo
528.301 175.892 li
528.301 172.649 li
526.054 173.904 li
526.054 177.148 li
cp
f
526.054 171.002 mo
528.301 169.746 li
528.301 162.177 li
526.054 163.432 li
526.054 171.002 li
cp
f
526.054 160.871 mo
528.301 159.616 li
528.301 121.41 li
526.054 122.665 li
526.054 160.871 li
cp
f
507.606 163.253 mo
509.852 161.997 li
528.301 172.649 li
526.054 173.904 li
507.606 163.253 li
cp
0 .772549 .115206 0 cmyk
f
507.606 152.847 mo
509.852 151.591 li
528.301 162.243 li
526.054 163.498 li
507.606 152.847 li
cp
f
537.154 147.15 mo
536.878 147.15 536.654 146.927 536.654 146.65 cv
536.654 144.65 li
536.654 144.374 536.878 144.15 537.154 144.15 cv
537.431 144.15 537.654 144.374 537.654 144.65 cv
537.654 146.65 li
537.654 146.927 537.431 147.15 537.154 147.15 cv
cp
537.154 152.15 mo
536.878 152.15 536.654 151.927 536.654 151.65 cv
536.654 149.65 li
536.654 149.374 536.878 149.15 537.154 149.15 cv
537.431 149.15 537.654 149.374 537.654 149.65 cv
537.654 151.65 li
537.654 151.927 537.431 152.15 537.154 152.15 cv
cp
537.154 157.15 mo
536.878 157.15 536.654 156.927 536.654 156.65 cv
536.654 154.65 li
536.654 154.374 536.878 154.15 537.154 154.15 cv
537.431 154.15 537.654 154.374 537.654 154.65 cv
537.654 156.65 li
537.654 156.927 537.431 157.15 537.154 157.15 cv
cp
537.154 162.15 mo
536.878 162.15 536.654 161.927 536.654 161.65 cv
536.654 159.65 li
536.654 159.374 536.878 159.15 537.154 159.15 cv
537.431 159.15 537.654 159.374 537.654 159.65 cv
537.654 161.65 li
537.654 161.927 537.431 162.15 537.154 162.15 cv
cp
537.154 167.15 mo
536.878 167.15 536.654 166.927 536.654 166.65 cv
536.654 164.65 li
536.654 164.374 536.878 164.15 537.154 164.15 cv
537.431 164.15 537.654 164.374 537.654 164.65 cv
537.654 166.65 li
537.654 166.927 537.431 167.15 537.154 167.15 cv
cp
537.154 172.15 mo
536.878 172.15 536.654 171.927 536.654 171.65 cv
536.654 169.65 li
536.654 169.374 536.878 169.15 537.154 169.15 cv
537.431 169.15 537.654 169.374 537.654 169.65 cv
537.654 171.65 li
537.654 171.927 537.431 172.15 537.154 172.15 cv
cp
537.154 177.15 mo
536.878 177.15 536.654 176.927 536.654 176.65 cv
536.654 174.65 li
536.654 174.374 536.878 174.15 537.154 174.15 cv
537.431 174.15 537.654 174.374 537.654 174.65 cv
537.654 176.65 li
537.654 176.927 537.431 177.15 537.154 177.15 cv
cp
537.154 182.073 mo
536.878 182.073 536.654 181.849 536.654 181.573 cv
536.654 179.65 li
536.654 179.374 536.878 179.15 537.154 179.15 cv
537.431 179.15 537.654 179.374 537.654 179.65 cv
537.654 181.573 li
537.654 181.849 537.431 182.073 537.154 182.073 cv
cp
.728359 .00238041 .335668 0 cmyk
f
532.104 187.626 mo
501.557 169.99 li
501.557 155.883 li
501.557 155.606 501.78 155.383 502.057 155.383 cv
502.333 155.383 502.557 155.606 502.557 155.883 cv
502.557 169.413 li
531.104 185.894 li
531.104 132.278 li
531.104 132.002 531.328 131.778 531.604 131.778 cv
531.881 131.778 532.104 132.002 532.104 132.278 cv
532.104 187.626 li
cp
f
507.606 112.014 mo
507.606 150.22 li
526.054 160.871 li
526.054 122.665 li
539.178 130.242 li
516.83 84.0136 li
494.483 104.437 li
507.606 112.014 li
cp
507.606 166.497 mo
526.054 177.148 li
526.054 173.904 li
507.606 163.253 li
507.606 166.497 li
cp
507.606 160.351 mo
526.054 171.002 li
526.054 163.432 li
507.606 152.781 li
507.606 160.351 li
cp
.0122377 .872923 .218967 0 cmyk
f
533.167 137.4 mo
532.952 137.4 532.753 137.261 532.688 137.044 cv
531.6 133.415 li
530.464 136.252 li
530.361 136.509 530.069 136.634 529.814 136.531 cv
529.558 136.429 529.434 136.138 529.536 135.881 cv
531.203 131.715 li
531.281 131.518 531.45 131.39 531.689 131.401 cv
531.901 131.41 532.085 131.553 532.146 131.757 cv
533.646 136.757 li
533.726 137.021 533.575 137.3 533.311 137.379 cv
533.167 137.4 li
cp
.728359 .00238041 .335668 0 cmyk
f
503.505 155.675 mo
503.505 156.571 502.872 156.932 502.091 156.481 cv
501.311 156.03 500.678 154.938 500.678 154.042 cv
500.678 153.146 501.311 152.786 502.091 153.236 cv
502.872 153.687 503.505 154.779 503.505 155.675 cv
cp
f
370.497 106.863 mo
368.145 105.505 365.915 104.802 363.896 104.665 cv
363.897 104.525 363.914 104.397 363.914 104.255 cv
363.914 84.275 349.799 59.928 332.387 49.8752 cv
318.385 41.7911 306.531 45.4305 302.418 57.549 cv
301.344 56.7315 300.25 55.9694 299.127 55.3211 cv
287.646 48.6929 278.34 53.9992 278.34 67.1729 cv
278.34 80.3466 287.646 96.3995 299.127 103.028 cv
304.866 106.341 363.703 140.311 370.497 144.233 cv
379.49 149.426 386.781 145.269 386.781 134.949 cv
386.781 124.63 379.49 112.055 370.497 106.863 cv
cp
.316289 .0888075 0 0 cmyk
f
306.059 115.142 mo
312.537 110.988 li
312.537 72.153 li
306.059 76.3085 li
306.059 115.142 li
cp
.51162 .157229 0 0 cmyk
f
398.992 142.408 mo
398.176 141.83 li
400.375 138.726 401.537 134.629 401.537 129.985 cv
401.537 117.403 392.957 102.593 382.004 96.269 cv
380.917 95.6421 379.816 95.1035 378.735 94.6689 cv
378.453 94.5557 li
378.424 94.2529 li
376.347 72.7529 361.825 49.6343 343.894 39.2817 cv
338.226 36.0098 332.542 34.3506 327.002 34.3506 cv
321.956 34.3506 317.104 35.7773 312.971 38.4771 cv
312.424 37.6401 li
316.72 34.834 321.761 33.3506 327.002 33.3506 cv
332.72 33.3506 338.571 35.0547 344.394 38.4155 cv
362.5 48.8691 377.179 72.1445 379.39 93.8564 cv
380.424 94.2871 381.47 94.8066 382.504 95.4028 cv
393.737 101.889 402.537 117.079 402.537 129.985 cv
402.537 134.838 401.312 139.133 398.992 142.408 cv
cp
.158541 .0152895 0 0 cmyk
f
395.038 129.985 mo
395.038 119.666 387.747 107.091 378.754 101.899 cv
376.402 100.541 374.172 99.8373 372.153 99.7012 cv
372.154 99.5606 372.171 99.4332 372.171 99.291 cv
372.171 79.3108 358.056 54.9639 340.644 44.911 cv
330.867 39.2665 322.356 40.0226 316.364 44.0256 cv
306.308 49.767 li
300.624 46.8184 295.544 46.8382 291.965 49.3118 cv
278.437 57.418 li
282.102 55.8192 286.915 56.3391 292.19 59.3845 cv
293.312 60.0327 294.406 60.7948 295.481 61.6124 cv
299.594 49.4938 311.447 45.8545 325.449 53.9385 cv
342.862 63.9914 356.977 88.3383 356.977 108.319 cv
356.977 108.461 356.96 108.588 356.958 108.729 cv
358.978 108.865 361.208 109.568 363.56 110.926 cv
372.553 116.119 379.843 128.693 379.843 139.013 cv
379.843 143.379 378.534 146.637 376.347 148.555 cv
389.759 140.745 li
389.742 140.716 li
392.996 139.178 395.038 135.445 395.038 129.985 cv
cp
.51162 .157229 0 0 cmyk
f
364.749 110.398 mo
362.397 109.04 360.167 108.336 358.148 108.2 cv
358.149 108.06 358.166 107.932 358.166 107.79 cv
358.166 87.8097 344.051 63.4629 326.639 53.41 cv
318.294 48.5922 310.714 47.9401 305.079 50.7631 cv
310.571 48.5814 317.678 49.4514 325.45 53.9385 cv
342.862 63.9913 356.977 88.3383 356.977 108.319 cv
356.977 108.461 356.96 108.588 356.959 108.729 cv
358.978 108.865 361.208 109.568 363.56 110.926 cv
372.553 116.119 379.843 128.694 379.843 139.013 cv
379.843 144.233 377.975 147.873 374.967 149.527 cv
378.665 148.236 381.032 144.362 381.032 138.484 cv
381.032 128.165 373.742 115.59 364.749 110.398 cv
cp
0 0 0 0 cmyk
f
292.19 59.3844 mo
293.312 60.0327 294.406 60.7948 295.481 61.6124 cv
295.608 61.2383 295.742 60.8728 295.884 60.5149 cv
295.061 59.9177 294.231 59.3475 293.379 58.8558 cv
287.808 55.6397 282.754 55.2407 279.021 57.1796 cv
282.607 55.8771 287.192 56.4989 292.19 59.3844 cv
cp
f
363.56 110.926 mo
361.208 109.568 358.978 108.865 356.959 108.729 cv
356.96 108.588 356.977 108.461 356.977 108.319 cv
356.977 88.3383 342.862 63.9913 325.45 53.9385 cv
311.447 45.8545 299.593 49.4938 295.481 61.6124 cv
294.406 60.7948 293.312 60.0327 292.19 59.3844 cv
280.709 52.7562 271.402 58.0625 271.402 71.2363 cv
271.402 84.41 280.709 100.463 292.19 107.091 cv
293.722 107.976 299.043 111.048 306.146 115.149 cv
306.146 76.0297 li
335.694 93.0906 li
335.694 132.208 li
348.938 139.855 360.738 146.668 363.56 148.297 cv
372.553 153.489 379.843 149.332 379.843 139.013 cv
379.843 128.694 372.553 116.119 363.56 110.926 cv
cp
.158541 .0152895 0 0 cmyk
f
332.39 149.522 mo
332.39 111.316 li
313.942 100.665 li
313.942 138.87 li
300.819 131.294 li
323.166 177.522 li
345.514 157.098 li
332.39 149.522 li
cp
332.39 95.0392 mo
313.942 84.388 li
313.942 87.6317 li
332.39 98.2829 li
332.39 95.0392 li
cp
332.39 101.185 mo
313.942 90.5339 li
313.942 98.1037 li
332.39 108.755 li
332.39 101.185 li
cp
.728359 .00238041 .335668 0 cmyk
f
345.514 157.098 mo
343.267 158.354 li
330.144 150.777 li
332.39 149.522 li
345.514 157.098 li
cp
.618372 0 .259403 0 cmyk
f
343.267 158.354 mo
320.92 178.777 li
323.166 177.522 li
345.514 157.098 li
343.267 158.354 li
cp
.791928 .149783 .413275 .00347906 cmyk
f
330.144 112.571 mo
330.144 150.777 li
332.39 149.522 li
332.39 111.316 li
330.144 112.571 li
cp
f
330.144 110.01 mo
332.39 108.755 li
332.39 101.185 li
330.144 102.44 li
330.144 110.01 li
cp
f
330.144 99.5382 mo
332.39 98.2829 li
332.39 95.0392 li
330.144 96.2945 li
330.144 99.5382 li
cp
f
300.819 131.294 mo
298.572 132.549 li
311.696 140.126 li
313.942 138.87 li
300.819 131.294 li
cp
.618372 0 .259403 0 cmyk
f
311.696 101.92 mo
313.942 100.665 li
332.39 111.316 li
330.144 112.571 li
311.696 101.92 li
cp
f
311.696 91.9102 mo
313.942 90.6549 li
332.39 101.306 li
330.144 102.561 li
311.696 91.9102 li
cp
f
311.696 85.6666 mo
313.942 84.4112 li
332.39 95.0624 li
330.144 96.3178 li
311.696 85.6666 li
cp
f
342.977 145.869 mo
342.727 145.802 li
340.994 144.802 li
340.755 144.664 340.673 144.358 340.812 144.119 cv
340.949 143.879 341.257 143.799 341.494 143.936 cv
343.227 144.936 li
343.466 145.074 343.548 145.379 343.409 145.619 cv
343.317 145.779 343.148 145.869 342.977 145.869 cv
cp
347.307 148.369 mo
347.057 148.302 li
345.324 147.302 li
345.085 147.164 345.003 146.858 345.142 146.619 cv
345.279 146.38 345.586 146.299 345.824 146.436 cv
347.557 147.436 li
347.796 147.574 347.878 147.879 347.739 148.119 cv
347.647 148.279 347.479 148.369 347.307 148.369 cv
cp
351.637 150.869 mo
351.387 150.802 li
349.654 149.802 li
349.415 149.664 349.333 149.358 349.472 149.119 cv
349.609 148.88 349.917 148.8 350.154 148.936 cv
351.887 149.936 li
352.126 150.074 352.208 150.379 352.069 150.619 cv
351.978 150.779 351.809 150.869 351.637 150.869 cv
cp
355.967 153.369 mo
355.717 153.302 li
353.984 152.302 li
353.745 152.164 353.663 151.858 353.802 151.619 cv
353.939 151.379 354.246 151.298 354.484 151.436 cv
356.217 152.436 li
356.456 152.574 356.538 152.879 356.399 153.119 cv
356.308 153.279 356.139 153.369 355.967 153.369 cv
cp
360.297 155.869 mo
360.047 155.802 li
358.314 154.802 li
358.075 154.664 357.993 154.358 358.132 154.119 cv
358.27 153.879 358.576 153.799 358.814 153.936 cv
360.547 154.936 li
360.786 155.074 360.868 155.379 360.729 155.619 cv
360.638 155.779 360.469 155.869 360.297 155.869 cv
cp
359.661 158.909 mo
359.525 158.909 359.391 158.854 359.292 158.747 cv
359.105 158.542 359.12 158.227 359.324 158.04 cv
360.801 156.69 li
361.005 156.505 361.321 156.519 361.507 156.722 cv
361.693 156.926 361.679 157.242 361.475 157.429 cv
359.998 158.778 li
359.902 158.866 359.781 158.909 359.661 158.909 cv
cp
355.971 162.282 mo
355.835 162.282 355.7 162.228 355.602 162.12 cv
355.415 161.916 355.43 161.6 355.634 161.413 cv
357.11 160.063 li
357.314 159.878 357.631 159.892 357.816 160.095 cv
358.003 160.299 357.988 160.615 357.784 160.802 cv
356.308 162.151 li
356.212 162.239 356.091 162.282 355.971 162.282 cv
cp
352.279 165.655 mo
352.144 165.655 352.009 165.601 351.91 165.493 cv
351.724 165.289 351.738 164.973 351.942 164.786 cv
353.419 163.437 li
353.623 163.251 353.939 163.266 354.125 163.469 cv
354.312 163.673 354.297 163.989 354.093 164.175 cv
352.616 165.524 li
352.521 165.612 352.399 165.655 352.279 165.655 cv
cp
348.589 169.028 mo
348.453 169.028 348.318 168.974 348.22 168.866 cv
348.033 168.662 348.048 168.346 348.252 168.159 cv
349.729 166.81 li
349.933 166.625 350.249 166.639 350.435 166.842 cv
350.621 167.046 350.606 167.362 350.402 167.548 cv
348.926 168.897 li
348.83 168.985 348.709 169.028 348.589 169.028 cv
cp
344.898 172.401 mo
344.763 172.401 344.628 172.347 344.529 172.239 cv
344.343 172.035 344.357 171.719 344.562 171.532 cv
346.037 170.183 li
346.242 169.998 346.558 170.013 346.743 170.215 cv
346.93 170.418 346.915 170.735 346.711 170.921 cv
345.235 172.271 li
345.14 172.358 345.02 172.401 344.898 172.401 cv
cp
341.207 175.774 mo
341.071 175.774 340.937 175.72 340.838 175.612 cv
340.651 175.408 340.666 175.092 340.87 174.905 cv
342.347 173.556 li
342.551 173.371 342.867 173.385 343.053 173.588 cv
343.239 173.792 343.225 174.108 343.021 174.294 cv
341.544 175.644 li
341.448 175.731 341.327 175.774 341.207 175.774 cv
cp
337.517 179.147 mo
337.381 179.147 337.246 179.093 337.147 178.985 cv
336.961 178.781 336.976 178.465 337.18 178.278 cv
338.656 176.929 li
338.86 176.744 339.178 176.758 339.362 176.961 cv
339.549 177.165 339.534 177.481 339.33 177.667 cv
337.854 179.017 li
337.758 179.104 337.637 179.147 337.517 179.147 cv
cp
333.825 182.521 mo
333.689 182.521 333.555 182.466 333.456 182.358 cv
333.27 182.154 333.284 181.838 333.488 181.651 cv
334.965 180.302 li
335.169 180.117 335.485 180.131 335.671 180.334 cv
335.857 180.538 335.843 180.854 335.639 181.041 cv
334.162 182.39 li
334.066 182.477 333.945 182.521 333.825 182.521 cv
cp
330.135 185.894 mo
330 185.894 329.864 185.839 329.766 185.731 cv
329.58 185.527 329.594 185.211 329.797 185.025 cv
331.274 183.675 li
331.479 183.49 331.795 183.504 331.98 183.707 cv
332.167 183.911 332.152 184.227 331.948 184.414 cv
330.472 185.763 li
330.376 185.851 330.255 185.894 330.135 185.894 cv
cp
.0122377 .872923 .218967 0 cmyk
f
319.503 188.269 mo
318.828 187.531 li
351.765 157.429 li
335.193 147.862 li
335.193 134.873 li
336.193 134.873 li
336.193 147.285 li
353.448 157.246 li
319.503 188.269 li
cp
f
330.144 150.777 mo
330.144 112.571 li
311.696 101.92 li
311.696 140.126 li
298.572 132.549 li
320.92 178.777 li
343.267 158.354 li
330.144 150.777 li
cp
330.144 96.2945 mo
311.696 85.6433 li
311.696 88.887 li
330.144 99.5382 li
330.144 96.2945 li
cp
330.144 102.44 mo
311.696 91.7893 li
311.696 99.3591 li
330.144 110.01 li
330.144 102.44 li
cp
.728359 .00238041 .335668 0 cmyk
f
318.333 188.9 mo
318.189 188.9 318.051 188.838 317.955 188.727 cv
317.845 188.6 317.807 188.425 317.853 188.263 cv
319.186 183.596 li
319.262 183.33 319.541 183.179 319.804 183.252 cv
320.069 183.329 320.223 183.605 320.147 183.871 cv
319.024 187.804 li
323.268 187.238 li
323.544 187.201 323.792 187.394 323.829 187.667 cv
323.866 187.941 323.673 188.192 323.399 188.229 cv
318.399 188.896 li
318.333 188.9 li
cp
.0122377 .872923 .218967 0 cmyk
f
337.039 136.175 mo
337.039 137.071 336.406 137.432 335.625 136.981 cv
334.844 136.53 334.211 135.438 334.211 134.542 cv
334.211 133.646 334.844 133.286 335.625 133.736 cv
336.406 134.187 337.039 135.279 337.039 136.175 cv
cp
f
167.497 266.336 mo
177.281 271.992 li
167.496 277.644 li
157.711 271.988 li
167.497 266.336 li
cp
.158541 .0152895 0 0 cmyk
f
177.289 335.905 mo
167.499 341.558 li
167.499 277.641 li
177.289 271.988 li
177.289 335.905 li
cp
.51162 .157229 0 0 cmyk
f
167.501 341.558 mo
157.711 335.905 li
157.711 271.988 li
167.501 277.641 li
167.501 341.558 li
cp
.316289 .0888075 0 0 cmyk
f
151.435 287.055 mo
161.219 292.711 li
151.434 298.363 li
141.65 292.707 li
151.435 287.055 li
cp
.158541 .0152895 0 0 cmyk
f
161.227 344.78 mo
151.437 350.433 li
151.437 298.359 li
161.227 292.707 li
161.227 344.78 li
cp
.51162 .157229 0 0 cmyk
f
151.439 350.433 mo
141.649 344.78 li
141.649 292.707 li
151.439 298.359 li
151.439 350.433 li
cp
.316289 .0888075 0 0 cmyk
f
135.647 310.817 mo
145.431 316.473 li
135.646 322.124 li
125.862 316.469 li
135.647 310.817 li
cp
.158541 .0152895 0 0 cmyk
f
145.439 353.821 mo
135.649 359.473 li
135.649 322.121 li
145.439 316.469 li
145.439 353.821 li
cp
.51162 .157229 0 0 cmyk
f
135.651 359.473 mo
125.861 353.821 li
125.861 316.469 li
135.651 322.121 li
135.651 359.473 li
cp
.316289 .0888075 0 0 cmyk
f
119.509 336.044 mo
129.293 341.7 li
119.508 347.352 li
109.723 341.696 li
119.509 336.044 li
cp
.158541 .0152895 0 0 cmyk
f
144.684 362.918 mo
144.191 362.047 li
183.789 339.656 li
183.789 259.864 li
184.789 259.864 li
184.789 340.24 li
144.684 362.918 li
cp
f
129.301 362.861 mo
119.511 368.513 li
119.511 347.348 li
129.301 341.696 li
129.301 362.861 li
cp
.51162 .157229 0 0 cmyk
f
119.513 368.513 mo
109.723 362.861 li
109.723 341.696 li
119.513 347.348 li
119.513 368.513 li
cp
.316289 .0888075 0 0 cmyk
f
123.337 299.602 mo
137.591 307.909 li
137.591 299.255 li
137.589 299.254 li
168.921 260.064 li
176.267 264.882 li
177.558 265.05 li
173.164 227.911 li
171.787 227.776 li
144.877 246.182 li
154.029 251.466 li
122.733 290.596 li
123.461 291.021 li
122.733 290.596 li
122.733 299.25 li
122.762 299.267 li
110.031 315.266 li
110.759 315.69 li
110.031 315.266 li
110.031 323.837 li
110.023 323.833 li
97.2922 343.843 li
98.0238 344.27 li
97.2916 343.844 li
93.5041 362.765 li
84.9899 366.636 li
85.4577 367.228 li
104.103 378.13 li
112.149 373.668 li
112.149 352.503 li
112.147 352.501 li
124.84 332.55 li
124.889 332.579 li
124.889 323.925 li
124.887 323.924 li
137.614 307.929 li
123.337 299.602 li
cp
.791928 .149783 .413275 .00347906 cmyk
f
104.985 321.405 mo
123.586 332.311 li
110.855 352.322 li
92.2541 341.415 li
104.985 321.405 li
cp
.618372 0 .259403 0 cmyk
f
110.861 373.484 mo
92.2537 362.581 li
92.2537 341.416 li
110.861 352.319 li
110.861 373.484 li
cp
.728359 .00238041 .335668 0 cmyk
f
117.724 296.839 mo
136.325 307.745 li
123.594 323.744 li
104.993 312.838 li
117.724 296.839 li
cp
.618372 0 .259403 0 cmyk
f
123.6 332.395 mo
104.993 321.492 li
104.993 312.838 li
123.6 323.741 li
123.6 332.395 li
cp
.728359 .00238041 .335668 0 cmyk
f
149.97 247.496 mo
168.572 258.402 li
136.297 299.075 li
117.695 288.168 li
149.97 247.496 li
cp
.618372 0 .259403 0 cmyk
f
136.302 307.725 mo
117.695 296.822 li
117.695 288.168 li
136.302 299.071 li
136.302 307.725 li
cp
.728359 .00238041 .335668 0 cmyk
f
110.861 373.484 mo
92.2537 362.581 li
84.9436 366.629 li
103.551 377.532 li
110.861 373.484 li
cp
.618372 0 .259403 0 cmyk
f
166.674 259.326 mo
176.269 264.866 li
171.876 227.726 li
139.839 243.754 li
149.435 249.294 li
166.674 259.326 li
cp
f
155.145 225.43 mo
154.961 225.43 154.785 225.328 154.697 225.153 cv
154.573 224.906 154.673 224.606 154.92 224.482 cv
156.41 223.737 li
156.657 223.612 156.957 223.715 157.081 223.961 cv
157.205 224.208 157.104 224.508 156.857 224.632 cv
155.368 225.377 li
155.145 225.43 li
cp
150.673 227.667 mo
150.489 227.667 150.313 227.565 150.225 227.391 cv
150.102 227.144 150.202 226.844 150.449 226.72 cv
152.238 225.825 li
152.484 225.701 152.785 225.803 152.909 226.049 cv
153.032 226.296 152.932 226.596 152.685 226.72 cv
150.896 227.614 li
150.673 227.667 li
cp
146.202 229.904 mo
146.018 229.904 145.842 229.803 145.754 229.628 cv
145.63 229.381 145.73 229.081 145.978 228.957 cv
147.766 228.063 li
148.013 227.938 148.313 228.04 148.437 228.286 cv
148.561 228.533 148.46 228.833 148.213 228.957 cv
146.425 229.852 li
146.202 229.904 li
cp
141.73 232.142 mo
141.546 232.142 141.37 232.04 141.282 231.865 cv
141.159 231.618 141.259 231.318 141.506 231.194 cv
143.294 230.3 li
143.541 230.176 143.841 230.277 143.965 230.523 cv
144.089 230.771 143.989 231.07 143.742 231.194 cv
141.953 232.089 li
141.73 232.142 li
cp
137.258 234.379 mo
137.075 234.379 136.898 234.278 136.811 234.103 cv
136.687 233.855 136.787 233.556 137.034 233.432 cv
138.823 232.536 li
139.069 232.411 139.37 232.513 139.494 232.76 cv
139.617 233.007 139.517 233.307 139.27 233.431 cv
137.481 234.326 li
137.258 234.379 li
cp
132.787 236.616 mo
132.603 236.616 132.427 236.515 132.339 236.34 cv
132.215 236.093 132.315 235.793 132.563 235.669 cv
134.352 234.773 li
134.599 234.649 134.898 234.751 135.022 234.997 cv
135.146 235.244 135.046 235.544 134.799 235.668 cv
133.01 236.563 li
132.787 236.616 li
cp
128.315 238.854 mo
128.132 238.854 127.956 238.753 127.868 238.577 cv
127.744 238.33 127.844 238.03 128.091 237.906 cv
129.88 237.011 li
130.127 236.886 130.427 236.986 130.551 237.234 cv
130.674 237.481 130.574 237.781 130.327 237.905 cv
128.539 238.801 li
128.315 238.854 li
cp
123.844 241.091 mo
123.66 241.091 123.484 240.99 123.396 240.814 cv
123.272 240.567 123.373 240.268 123.62 240.144 cv
125.408 239.248 li
125.656 239.124 125.955 239.225 126.079 239.472 cv
126.203 239.719 126.103 240.019 125.855 240.143 cv
124.067 241.038 li
123.844 241.091 li
cp
119.372 243.328 mo
119.188 243.328 119.012 243.228 118.924 243.052 cv
118.801 242.805 118.901 242.505 119.148 242.381 cv
120.937 241.485 li
121.184 241.361 121.483 241.461 121.607 241.709 cv
121.731 241.956 121.631 242.256 121.384 242.38 cv
119.595 243.275 li
119.372 243.328 li
cp
122.528 245.793 mo
122.278 245.726 li
120.546 244.726 li
120.307 244.588 120.225 244.282 120.363 244.043 cv
120.5 243.804 120.807 243.721 121.046 243.86 cv
122.778 244.86 li
123.018 244.998 123.1 245.304 122.961 245.543 cv
122.869 245.703 122.701 245.793 122.528 245.793 cv
cp
126.858 248.292 mo
126.608 248.225 li
124.876 247.225 li
124.637 247.087 124.555 246.781 124.693 246.542 cv
124.831 246.303 125.138 246.219 125.376 246.359 cv
127.108 247.359 li
127.348 247.497 127.43 247.803 127.292 248.042 cv
127.199 248.202 127.031 248.292 126.858 248.292 cv
cp
131.188 250.792 mo
130.938 250.725 li
129.207 249.725 li
128.967 249.587 128.885 249.281 129.023 249.042 cv
129.161 248.803 129.467 248.72 129.707 248.859 cv
131.438 249.859 li
131.678 249.997 131.76 250.303 131.622 250.542 cv
131.529 250.702 131.361 250.792 131.188 250.792 cv
cp
132.571 253.854 mo
132.462 253.854 132.353 253.818 132.261 253.745 cv
132.044 253.573 132.008 253.259 132.18 253.043 cv
133.351 251.568 li
133.364 251.543 li
133.504 251.307 133.802 251.219 134.04 251.361 cv
134.536 251.652 li
134.195 252.112 li
132.963 253.664 li
132.865 253.789 132.719 253.854 132.571 253.854 cv
cp
129.463 257.771 mo
129.354 257.771 129.245 257.735 129.153 257.662 cv
128.937 257.49 128.9 257.176 129.072 256.96 cv
130.315 255.393 li
130.487 255.175 130.802 255.139 131.018 255.312 cv
131.234 255.483 131.271 255.798 131.099 256.014 cv
129.855 257.581 li
129.757 257.706 129.611 257.771 129.463 257.771 cv
cp
126.355 261.687 mo
126.247 261.687 126.137 261.651 126.045 261.578 cv
125.829 261.406 125.792 261.092 125.964 260.876 cv
127.208 259.31 li
127.378 259.093 127.693 259.057 127.91 259.229 cv
128.126 259.4 128.163 259.715 127.991 259.931 cv
126.748 261.497 li
126.649 261.622 126.503 261.687 126.355 261.687 cv
cp
123.247 265.604 mo
123.138 265.604 123.029 265.568 122.937 265.495 cv
122.72 265.323 122.684 265.009 122.856 264.793 cv
124.1 263.227 li
124.271 263.009 124.585 262.973 124.802 263.146 cv
125.019 263.317 125.055 263.632 124.883 263.848 cv
123.639 265.414 li
123.541 265.539 123.395 265.604 123.247 265.604 cv
cp
120.139 269.52 mo
120.03 269.52 119.921 269.484 119.829 269.411 cv
119.612 269.239 119.576 268.925 119.748 268.709 cv
120.991 267.143 li
121.163 266.926 121.477 266.89 121.694 267.062 cv
121.91 267.233 121.946 267.548 121.774 267.764 cv
120.531 269.33 li
120.433 269.455 120.287 269.52 120.139 269.52 cv
cp
117.031 273.437 mo
116.922 273.437 116.813 273.401 116.721 273.328 cv
116.504 273.156 116.468 272.842 116.64 272.626 cv
117.883 271.06 li
118.055 270.842 118.368 270.806 118.586 270.979 cv
118.802 271.15 118.838 271.465 118.667 271.681 cv
117.423 273.247 li
117.325 273.372 117.179 273.437 117.031 273.437 cv
cp
113.923 277.354 mo
113.814 277.354 113.705 277.318 113.613 277.245 cv
113.397 277.073 113.36 276.759 113.532 276.543 cv
114.775 274.976 li
114.946 274.759 115.261 274.723 115.478 274.895 cv
115.694 275.066 115.73 275.381 115.559 275.597 cv
114.315 277.164 li
114.217 277.289 114.071 277.354 113.923 277.354 cv
cp
110.815 281.27 mo
110.706 281.27 110.597 281.234 110.504 281.161 cv
110.288 280.989 110.252 280.675 110.424 280.459 cv
111.667 278.893 li
111.838 278.675 112.153 278.639 112.37 278.812 cv
112.586 278.983 112.622 279.298 112.45 279.514 cv
111.207 281.08 li
111.108 281.205 110.962 281.27 110.815 281.27 cv
cp
107.707 285.187 mo
107.598 285.187 107.489 285.151 107.396 285.078 cv
107.18 284.906 107.144 284.592 107.316 284.376 cv
108.559 282.81 li
108.73 282.593 109.044 282.557 109.262 282.729 cv
109.478 282.9 109.514 283.215 109.342 283.431 cv
108.099 284.997 li
108 285.122 107.854 285.187 107.707 285.187 cv
cp
.0122377 .872923 .218967 0 cmyk
f
87.7607 346.055 mo
86.7607 346.055 li
86.7607 339.816 li
99.499 319.794 li
99.4995 310.919 li
112.201 294.956 li
112.201 286.253 li
140.562 250.515 li
128.252 243.409 li
175.775 219.632 li
176.223 220.526 li
130.362 243.472 li
142.065 250.228 li
113.201 286.601 li
113.201 295.306 li
100.5 311.269 li
100.499 320.085 li
87.7607 340.107 li
87.7607 346.055 li
cp
f
173.803 224.305 mo
173.698 224.305 173.592 224.271 173.501 224.203 cv
173.281 224.036 173.239 223.722 173.406 223.502 cv
175.917 220.197 li
170.998 220.47 li
170.704 220.5 170.486 220.274 170.471 219.998 cv
170.456 219.723 170.667 219.486 170.942 219.472 cv
176.942 219.139 li
177.132 219.11 177.32 219.23 177.412 219.403 cv
177.503 219.575 177.486 219.785 177.368 219.94 cv
174.202 224.107 li
174.104 224.236 173.954 224.305 173.803 224.305 cv
cp
f
88.5926 347.329 mo
88.5926 348.225 87.9596 348.586 87.1788 348.135 cv
86.398 347.684 85.765 346.592 85.765 345.696 cv
85.765 344.8 86.398 344.44 87.1788 344.89 cv
87.9596 345.341 88.5926 346.433 88.5926 347.329 cv
cp
f
357.337 359.949 mo
356.886 359.058 li
376.239 349.301 389.024 342.855 391.649 305.811 cv
392.528 276.521 li
390.325 275.275 li
375.549 266.916 361.295 252.827 349.104 234.533 cv
348.703 233.933 li
346.688 232.764 li
345.349 233.228 li
341.75 234.473 337.875 235.104 333.831 235.104 cv
333.831 234.104 li
337.764 234.104 341.528 233.491 345.022 232.282 cv
346.794 231.67 li
349.406 233.185 li
349.936 233.979 li
362.04 252.144 376.177 266.122 390.817 274.404 cv
393.546 275.946 li
392.654 305.787 li
389.981 343.493 376.995 350.04 357.337 359.949 cv
cp
.158541 .0152895 0 0 cmyk
f
378.295 285.44 mo
363.301 276.956 348.641 262.486 336.355 244.048 cv
336.188 243.952 li
323.902 248.202 309.242 245.745 294.248 236.915 cv
293.675 236.577 li
294.484 264.594 li
297.329 308.022 312.141 326.924 335.981 367.3 cv
336.561 367.635 li
360.401 354.787 375.214 352.988 378.059 312.846 cv
378.868 285.764 li
378.295 285.44 li
cp
.316289 .0888075 0 0 cmyk
f
386.753 278.996 mo
371.758 270.513 357.099 256.042 344.812 237.604 cv
344.645 237.508 li
332.359 241.758 317.699 239.302 302.705 230.471 cv
302.132 230.133 li
293.835 236.672 li
294.248 236.915 li
309.242 245.745 323.902 248.202 336.188 243.952 cv
336.354 244.048 li
348.641 262.486 363.301 276.956 378.296 285.44 cv
378.869 285.764 li
378.059 312.846 li
376.202 339.046 369.244 348.91 358.009 356.175 cv
372.047 347.885 384.429 335.851 386.517 306.402 cv
387.326 279.32 li
386.753 278.996 li
cp
.158541 .0152895 0 0 cmyk
f
387.326 279.32 mo
386.753 278.996 li
371.758 270.513 357.099 256.042 344.812 237.604 cv
344.645 237.508 li
336.188 243.952 li
336.354 244.048 li
348.641 262.486 363.301 276.956 378.296 285.44 cv
378.869 285.764 li
387.326 279.32 li
cp
f
378.869 285.764 mo
378.059 312.846 li
376.202 339.046 369.244 348.91 358.009 356.175 cv
372.047 347.885 384.429 335.851 386.517 306.402 cv
387.326 279.32 li
378.869 285.764 li
cp
.51162 .157229 0 0 cmyk
f
333.307 348.92 mo
314.801 318.222 305.492 302.779 303.247 269.087 cv
302.736 251.4 li
314.618 256.773 326.009 258.485 336.272 256.443 cv
346.532 270.334 357.923 281.775 369.806 290.123 cv
369.294 307.219 li
367.049 338.322 357.74 343.017 339.231 352.347 cv
338.263 352.837 337.278 353.333 336.272 353.844 cv
335.264 352.17 334.276 350.528 333.307 348.92 cv
cp
1 .794217 .112612 .0108034 cmyk
f
340.747 351.009 mo
339.779 351.499 338.794 351.995 337.788 352.506 cv
336.78 350.833 335.792 349.19 334.823 347.582 cv
316.317 316.885 307.008 301.441 304.763 267.749 cv
304.31 252.084 li
303.786 251.86 303.262 251.638 302.736 251.4 cv
303.247 269.087 li
305.492 302.779 314.801 318.222 333.307 348.92 cv
334.276 350.528 335.264 352.17 336.272 353.844 cv
337.278 353.333 338.263 352.837 339.231 352.347 cv
346.783 348.54 352.802 345.504 357.436 341.132 cv
353.028 344.812 347.503 347.604 340.747 351.009 cv
cp
1 .909422 .371221 .489662 cmyk
f
317.381 289.563 mo
332.012 321.427 li
357.809 294.348 li
345.873 283.48 li
332.012 306.847 li
325.467 291.139 li
317.381 289.563 li
cp
f
295.049 293.613 mo
312.995 332.696 li
344.637 299.482 li
329.997 286.152 li
312.995 314.813 li
304.967 295.546 li
295.049 293.613 li
cp
.791928 .149783 .413275 .00347906 cmyk
f
292.374 295.575 mo
310.32 334.658 li
341.962 301.444 li
327.322 288.114 li
310.32 316.775 li
302.292 297.508 li
292.374 295.575 li
cp
.728359 .00238041 .335668 0 cmyk
f
344.637 299.482 mo
341.962 301.444 li
310.32 334.658 li
312.995 332.696 li
344.637 299.482 li
cp
.791928 .149783 .413275 .00347906 cmyk
f
295.049 293.613 mo
292.374 295.575 li
302.292 297.508 li
304.967 295.546 li
295.049 293.613 li
cp
.618372 0 .259403 0 cmyk
f
341.962 301.444 mo
327.322 288.114 li
329.997 286.152 li
344.637 299.482 li
341.962 301.444 li
cp
f
302.319 297.075 mo
292.374 295.575 li
302.292 297.508 li
304.967 295.546 li
302.319 297.075 li
cp
0 0 0 0 cmyk
f
341.962 301.444 mo
327.322 288.114 li
342 300.909 li
344.637 299.482 li
341.962 301.444 li
cp
f
378.83 284.905 mo
363.836 276.421 349.176 261.951 336.89 243.513 cv
336.723 243.417 li
324.437 247.667 309.777 245.21 294.783 236.38 cv
294.236 236.959 li
309.203 245.752 323.834 248.195 336.099 243.952 cv
336.265 244.048 li
348.552 262.486 363.212 276.956 378.206 285.44 cv
378.779 285.764 li
377.97 312.846 li
376.429 334.588 371.375 345.08 363.28 352.173 cv
371.74 345.072 377.013 334.607 378.594 312.311 cv
379.403 285.229 li
378.83 284.905 li
cp
f
287.646 259.985 mo
287.421 259.985 287.216 259.832 287.161 259.604 cv
287.095 259.336 287.26 259.065 287.528 259 cv
288.184 258.84 288.859 258.709 289.536 258.61 cv
289.811 258.573 290.063 258.761 290.103 259.034 cv
290.142 259.307 289.953 259.561 289.68 259.601 cv
289.034 259.693 288.39 259.818 287.765 259.971 cv
287.646 259.985 li
cp
282.994 261.766 mo
282.816 261.766 282.644 261.671 282.554 261.503 cv
282.422 261.26 282.513 260.957 282.756 260.825 cv
283.353 260.504 283.976 260.208 284.607 259.948 cv
284.863 259.842 285.155 259.964 285.26 260.22 cv
285.365 260.475 285.244 260.768 284.988 260.872 cv
284.388 261.12 283.797 261.4 283.231 261.706 cv
282.994 261.766 li
cp
278.96 264.688 mo
278.828 264.688 278.695 264.635 278.597 264.53 cv
278.407 264.329 278.417 264.013 278.618 263.823 cv
279.114 263.355 279.639 262.909 280.177 262.496 cv
280.397 262.329 280.711 262.37 280.878 262.588 cv
281.046 262.808 281.005 263.121 280.786 263.289 cv
280.274 263.682 279.776 264.106 279.303 264.552 cv
279.207 264.643 279.083 264.688 278.96 264.688 cv
cp
275.771 268.521 mo
275.677 268.521 275.582 268.494 275.498 268.438 cv
275.267 268.288 275.202 267.978 275.353 267.747 cv
275.732 267.168 276.134 266.61 276.548 266.088 cv
276.719 265.87 277.034 265.834 277.25 266.007 cv
277.466 266.178 277.503 266.492 277.332 266.709 cv
276.936 267.208 276.552 267.741 276.19 268.294 cv
276.094 268.441 275.934 268.521 275.771 268.521 cv
cp
273.473 272.949 mo
273.285 272.913 li
273.029 272.809 272.906 272.518 273.009 272.262 cv
273.266 271.627 273.546 271.002 273.84 270.404 cv
273.963 270.157 274.263 270.055 274.51 270.177 cv
274.758 270.299 274.86 270.599 274.738 270.846 cv
274.454 271.423 274.184 272.025 273.936 272.637 cv
273.857 272.831 273.67 272.949 273.473 272.949 cv
cp
271.98 277.713 mo
271.867 277.7 li
271.598 277.638 271.43 277.369 271.492 277.1 cv
271.648 276.429 271.82 275.775 272.008 275.138 cv
272.085 274.874 272.364 274.724 272.628 274.8 cv
272.894 274.878 273.045 275.155 272.967 275.421 cv
272.785 276.039 272.618 276.675 272.467 277.326 cv
272.413 277.557 272.208 277.713 271.98 277.713 cv
cp
271.168 282.642 mo
271.117 282.639 li
270.842 282.61 270.643 282.365 270.67 282.091 cv
270.741 281.407 270.825 280.738 270.924 280.084 cv
270.965 279.811 271.221 279.622 271.493 279.664 cv
271.766 279.705 271.954 279.96 271.913 280.232 cv
271.816 280.873 271.734 281.526 271.666 282.192 cv
271.639 282.45 271.422 282.642 271.168 282.642 cv
cp
270.92 287.632 mo
270.644 287.632 270.42 287.408 270.42 287.132 cv
270.42 286.448 270.433 285.776 270.459 285.113 cv
270.469 284.837 270.703 284.631 270.978 284.633 cv
271.254 284.644 271.469 284.876 271.458 285.152 cv
271.433 285.802 271.42 286.462 271.42 287.132 cv
271.42 287.408 271.197 287.632 270.92 287.632 cv
cp
0 .772549 .115206 0 cmyk
f
277.818 317.373 mo
277.626 317.373 277.443 317.262 277.36 317.075 cv
277.088 316.459 276.824 315.843 276.566 315.224 cv
276.46 314.969 276.581 314.676 276.836 314.569 cv
277.09 314.467 277.384 314.585 277.489 314.839 cv
277.745 315.452 278.006 316.063 278.275 316.671 cv
278.387 316.924 278.272 317.219 278.02 317.33 cv
277.818 317.373 li
cp
279.96 321.895 mo
279.777 321.895 279.602 321.794 279.514 321.62 cv
279.21 321.021 278.914 320.42 278.624 319.814 cv
278.504 319.566 278.609 319.268 278.858 319.147 cv
279.106 319.028 279.405 319.133 279.525 319.383 cv
279.812 319.98 280.105 320.576 280.405 321.169 cv
280.53 321.415 280.432 321.716 280.186 321.841 cv
279.96 321.895 li
cp
282.332 326.299 mo
282.158 326.299 281.989 326.208 281.897 326.047 cv
281.564 325.465 281.237 324.88 280.917 324.291 cv
280.784 324.049 280.874 323.745 281.116 323.612 cv
281.359 323.481 281.662 323.571 281.794 323.813 cv
282.112 324.396 282.436 324.975 282.765 325.551 cv
282.902 325.79 282.819 326.096 282.579 326.232 cv
282.332 326.299 li
cp
284.923 330.574 mo
284.759 330.574 284.598 330.493 284.502 330.345 cv
284.14 329.781 283.784 329.213 283.434 328.641 cv
283.289 328.405 283.363 328.098 283.599 327.953 cv
283.835 327.809 284.143 327.883 284.286 328.119 cv
284.633 328.686 284.986 329.246 285.344 329.804 cv
285.493 330.036 285.425 330.346 285.193 330.495 cv
285.109 330.549 285.016 330.574 284.923 330.574 cv
cp
287.73 334.71 mo
287.574 334.71 287.421 334.638 287.323 334.501 cv
286.934 333.957 286.549 333.409 286.169 332.856 cv
286.013 332.629 286.071 332.317 286.298 332.161 cv
286.527 332.005 286.838 332.063 286.994 332.29 cv
287.369 332.837 287.75 333.381 288.136 333.919 cv
288.297 334.144 288.245 334.455 288.021 334.616 cv
287.933 334.68 287.831 334.71 287.73 334.71 cv
cp
290.748 338.69 mo
290.602 338.69 290.456 338.626 290.357 338.503 cv
289.939 337.981 289.527 337.455 289.119 336.923 cv
288.95 336.703 288.992 336.39 289.211 336.222 cv
289.43 336.055 289.745 336.096 289.912 336.313 cv
290.316 336.84 290.725 337.362 291.138 337.878 cv
291.311 338.093 291.276 338.408 291.06 338.581 cv
290.968 338.654 290.857 338.69 290.748 338.69 cv
cp
293.979 342.5 mo
293.842 342.5 293.705 342.444 293.606 342.334 cv
293.161 341.837 292.719 341.334 292.282 340.824 cv
292.103 340.615 292.126 340.299 292.336 340.119 cv
292.547 339.942 292.862 339.965 293.041 340.174 cv
293.473 340.678 293.91 341.175 294.351 341.666 cv
294.535 341.872 294.518 342.188 294.313 342.372 cv
294.217 342.458 294.098 342.5 293.979 342.5 cv
cp
297.429 346.118 mo
297.302 346.118 297.175 346.07 297.077 345.974 cv
296.602 345.504 296.13 345.027 295.663 344.543 cv
295.471 344.344 295.477 344.027 295.675 343.836 cv
295.874 343.645 296.191 343.65 296.382 343.848 cv
296.844 344.326 297.31 344.799 297.78 345.263 cv
297.977 345.456 297.979 345.773 297.785 345.97 cv
297.687 346.068 297.558 346.118 297.429 346.118 cv
cp
301.098 349.515 mo
300.981 349.515 300.865 349.475 300.771 349.393 cv
300.265 348.955 299.764 348.509 299.266 348.054 cv
299.062 347.867 299.048 347.551 299.234 347.348 cv
299.42 347.143 299.736 347.129 299.94 347.315 cv
300.432 347.765 300.926 348.205 301.425 348.637 cv
301.634 348.817 301.656 349.133 301.476 349.342 cv
301.377 349.456 301.237 349.515 301.098 349.515 cv
cp
304.99 352.651 mo
304.886 352.651 304.782 352.619 304.692 352.552 cv
304.156 352.152 303.624 351.742 303.095 351.322 cv
302.879 351.15 302.843 350.836 303.015 350.619 cv
303.187 350.403 303.5 350.367 303.717 350.539 cv
304.238 350.953 304.762 351.357 305.29 351.751 cv
305.511 351.916 305.557 352.229 305.392 352.45 cv
305.293 352.582 305.143 352.651 304.99 352.651 cv
cp
309.112 355.479 mo
309.021 355.479 308.929 355.455 308.847 355.403 cv
308.28 355.048 307.717 354.681 307.156 354.303 cv
306.927 354.147 306.867 353.837 307.021 353.608 cv
307.176 353.38 307.487 353.319 307.715 353.473 cv
308.267 353.845 308.821 354.206 309.378 354.556 cv
309.612 354.703 309.683 355.012 309.536 355.245 cv
309.441 355.396 309.278 355.479 309.112 355.479 cv
cp
313.463 357.94 mo
313.239 357.887 li
312.646 357.589 312.051 357.274 311.453 356.942 cv
311.211 356.808 311.125 356.504 311.259 356.262 cv
311.393 356.021 311.698 355.937 311.938 356.067 cv
312.525 356.394 313.108 356.702 313.688 356.994 cv
313.935 357.118 314.034 357.419 313.91 357.665 cv
313.822 357.84 313.646 357.94 313.463 357.94 cv
cp
318.042 359.942 mo
317.869 359.911 li
317.247 359.683 316.62 359.434 315.988 359.165 cv
315.734 359.058 315.615 358.764 315.723 358.51 cv
315.832 358.255 316.125 358.137 316.379 358.245 cv
316.995 358.506 317.607 358.749 318.215 358.974 cv
318.474 359.068 318.606 359.356 318.511 359.615 cv
318.437 359.817 318.246 359.942 318.042 359.942 cv
cp
322.834 361.354 mo
322.727 361.342 li
322.077 361.2 321.421 361.037 320.758 360.851 cv
320.492 360.775 320.337 360.5 320.412 360.233 cv
320.487 359.969 320.763 359.815 321.028 359.888 cv
321.672 360.068 322.31 360.228 322.94 360.365 cv
323.21 360.424 323.381 360.69 323.322 360.96 cv
323.271 361.194 323.064 361.354 322.834 361.354 cv
cp
327.785 362.004 mo
327.765 362.004 li
327.101 361.977 326.417 361.924 325.734 361.846 cv
325.46 361.814 325.263 361.566 325.294 361.292 cv
325.325 361.018 325.576 360.821 325.848 360.852 cv
326.507 360.928 327.165 360.979 327.805 361.004 cv
328.081 361.016 328.295 361.248 328.284 361.524 cv
328.273 361.793 328.052 362.004 327.785 362.004 cv
cp
f
310.574 344.771 mo
293.978 335.189 280.476 311.899 280.476 292.854 cv
280.476 283.561 283.646 276.612 289.402 273.289 cv
295.208 269.937 302.905 270.688 311.074 275.404 cv
313.806 276.981 316.514 278.964 319.124 281.297 cv
318.457 282.043 li
315.899 279.755 313.247 277.813 310.574 276.27 cv
302.729 271.74 295.387 270.988 289.902 274.155 cv
284.468 277.292 281.476 283.933 281.476 292.854 cv
281.476 311.581 294.754 334.482 311.074 343.905 cv
310.574 344.771 li
cp
f
312.837 345.384 mo
312.791 346.361 312.12 346.787 311.339 346.336 cv
310.558 345.885 309.963 344.728 310.009 343.752 cv
310.056 342.776 310.727 342.35 311.507 342.8 cv
312.288 343.251 312.883 344.408 312.837 345.384 cv
cp
.0122377 .872923 .218967 0 cmyk
f
320.221 282.783 mo
315.802 281.679 li
315.534 281.611 315.371 281.34 315.438 281.072 cv
315.505 280.804 315.777 280.643 316.044 280.708 cv
318.625 281.354 li
317.705 278.867 li
317.608 278.608 317.741 278.32 318 278.225 cv
318.261 278.127 318.546 278.261 318.642 278.52 cv
320.221 282.783 li
cp
0 .772549 .115206 0 cmyk
f
98.9883 154.126 mo
98.8154 154.126 98.6475 154.036 98.5547 153.876 cv
98.4165 153.637 98.4985 153.331 98.7378 153.193 cv
99.0283 153.025 99.3213 152.86 99.6177 152.697 cv
99.8579 152.565 100.164 152.651 100.296 152.895 cv
100.43 153.136 100.341 153.44 100.099 153.573 cv
99.8096 153.733 99.5225 153.895 99.2378 154.059 cv
98.9883 154.126 li
cp
.0122377 .872923 .218967 0 cmyk
f
131.194 145.751 mo
130.927 145.751 130.705 145.539 130.695 145.269 cv
130.685 144.993 130.901 144.762 131.177 144.752 cv
131.838 144.728 132.501 144.712 133.164 144.704 cv
133.17 144.704 li
133.443 144.704 133.666 144.923 133.67 145.197 cv
133.673 145.474 133.452 145.7 133.176 145.704 cv
132.521 145.712 131.867 145.728 131.212 145.751 cv
131.194 145.751 li
138.11 145.779 mo
138.087 145.779 li
137.434 145.75 136.779 145.729 136.124 145.715 cv
135.848 145.709 135.628 145.481 135.634 145.205 cv
135.64 144.929 135.867 144.732 136.144 144.715 cv
136.807 144.729 137.47 144.751 138.131 144.78 cv
138.407 144.792 138.621 145.025 138.609 145.301 cv
138.597 145.57 138.376 145.779 138.11 145.779 cv
126.266 146.068 mo
126.01 146.068 125.793 145.874 125.768 145.614 cv
125.743 145.339 125.945 145.096 126.22 145.07 cv
126.878 145.009 127.539 144.955 128.201 144.908 cv
128.469 144.892 128.715 145.097 128.734 145.373 cv
128.753 145.648 128.545 145.887 128.27 145.906 cv
127.616 145.952 126.963 146.005 126.313 146.066 cv
126.266 146.068 li
143.039 146.135 mo
142.988 146.133 li
142.337 146.067 141.684 146.008 141.03 145.957 cv
140.755 145.936 140.549 145.695 140.571 145.42 cv
140.592 145.145 140.826 144.939 141.108 144.961 cv
141.77 145.012 142.43 145.071 143.088 145.138 cv
143.363 145.166 143.564 145.411 143.536 145.686 cv
143.509 145.943 143.292 146.135 143.039 146.135 cv
121.364 146.671 mo
121.121 146.671 120.908 146.495 120.87 146.247 cv
120.828 145.974 121.016 145.719 121.289 145.677 cv
121.942 145.577 122.598 145.484 123.257 145.399 cv
123.532 145.372 123.781 145.558 123.817 145.831 cv
123.852 146.105 123.659 146.355 123.385 146.391 cv
122.734 146.475 122.085 146.566 121.44 146.665 cv
121.364 146.671 li
147.939 146.778 mo
147.859 146.772 li
147.213 146.667 146.566 146.571 145.915 146.481 cv
145.641 146.444 145.45 146.192 145.488 145.918 cv
145.525 145.645 145.778 145.449 146.051 145.491 cv
146.709 145.582 147.365 145.679 148.018 145.785 cv
148.291 145.829 148.476 146.085 148.432 146.358 cv
148.393 146.604 148.18 146.778 147.939 146.778 cv
116.509 147.573 mo
116.279 147.573 116.072 147.414 116.021 147.18 cv
115.962 146.911 116.132 146.644 116.402 146.585 cv
117.047 146.443 117.697 146.31 118.351 146.184 cv
118.622 146.134 118.884 146.31 118.936 146.581 cv
118.988 146.852 118.81 147.114 118.539 147.166 cv
117.895 147.29 117.253 147.422 116.616 147.561 cv
116.509 147.573 li
152.79 147.719 mo
152.679 147.707 li
152.043 147.562 151.402 147.425 150.758 147.296 cv
150.487 147.242 150.312 146.979 150.366 146.708 cv
150.42 146.436 150.686 146.259 150.955 146.316 cv
151.607 146.447 152.256 146.585 152.901 146.731 cv
153.17 146.793 153.339 147.061 153.278 147.33 cv
153.225 147.562 153.018 147.719 152.79 147.719 cv
111.725 148.792 mo
111.508 148.792 111.308 148.65 111.245 148.432 cv
111.167 148.167 111.319 147.889 111.584 147.812 cv
112.218 147.627 112.858 147.45 113.503 147.281 cv
113.768 147.214 114.043 147.372 114.113 147.639 cv
114.183 147.906 114.022 148.179 113.755 148.249 cv
113.12 148.415 112.49 148.59 111.865 148.772 cv
111.725 148.792 li
157.571 148.976 mo
157.427 148.955 li
156.803 148.767 156.174 148.588 155.539 148.417 cv
155.272 148.345 155.115 148.07 155.187 147.804 cv
155.258 147.537 155.532 147.378 155.8 147.451 cv
156.443 147.625 157.083 147.807 157.715 147.997 cv
157.98 148.077 158.129 148.356 158.05 148.62 cv
157.985 148.836 157.787 148.976 157.571 148.976 cv
107.041 150.352 mo
106.838 150.352 106.648 150.228 106.573 150.028 cv
106.475 149.77 106.606 149.481 106.864 149.384 cv
107.482 149.151 108.107 148.927 108.739 148.712 cv
109 148.62 109.285 148.763 109.374 149.024 cv
109.463 149.285 109.323 149.569 109.061 149.658 cv
108.44 149.87 107.825 150.09 107.217 150.319 cv
107.041 150.352 li
162.246 150.571 mo
162.066 150.538 li
161.459 150.304 160.845 150.079 160.225 149.863 cv
159.964 149.772 159.827 149.486 159.918 149.226 cv
160.01 148.965 160.293 148.829 160.555 148.918 cv
161.185 149.139 161.809 149.367 162.425 149.604 cv
162.683 149.703 162.811 149.993 162.712 150.25 cv
162.636 150.449 162.446 150.571 162.246 150.571 cv
102.496 152.283 mo
102.309 152.283 102.13 152.178 102.044 151.998 cv
101.925 151.749 102.03 151.451 102.28 151.332 cv
102.875 151.047 103.481 150.771 104.094 150.505 cv
104.347 150.394 104.641 150.511 104.751 150.764 cv
104.862 151.017 104.746 151.312 104.492 151.422 cv
103.891 151.684 103.296 151.954 102.71 152.234 cv
102.496 152.283 li
166.777 152.535 mo
166.559 152.484 li
165.975 152.201 165.382 151.926 164.782 151.66 cv
164.53 151.548 164.416 151.253 164.528 151 cv
164.64 150.748 164.936 150.633 165.187 150.746 cv
165.798 151.017 166.401 151.296 166.996 151.585 cv
167.244 151.706 167.348 152.004 167.227 152.253 cv
167.141 152.431 166.962 152.535 166.777 152.535 cv
171.111 154.903 mo
170.851 154.829 li
170.498 154.613 170.139 154.399 169.772 154.187 cv
169.163 153.842 li
168.922 153.707 168.835 153.403 168.97 153.162 cv
169.104 152.92 169.409 152.834 169.65 152.969 cv
170.272 153.321 li
170.646 153.538 171.014 153.756 171.373 153.977 cv
171.608 154.121 171.683 154.429 171.538 154.664 cv
171.444 154.818 171.279 154.903 171.111 154.903 cv
175.165 157.721 mo
175.057 157.721 174.947 157.686 174.855 157.613 cv
174.355 157.217 173.835 156.827 173.295 156.443 cv
173.07 156.283 173.018 155.971 173.178 155.746 cv
173.336 155.52 173.649 155.468 173.875 155.628 cv
174.429 156.022 174.962 156.422 175.476 156.829 cv
175.692 157 175.729 157.314 175.558 157.531 cv
175.459 157.656 175.313 157.721 175.165 157.721 cv
178.806 161.052 mo
178.673 161.052 178.54 160.998 178.441 160.893 cv
178.007 160.429 177.549 159.971 177.068 159.518 cv
176.867 159.329 176.857 159.013 177.046 158.812 cv
177.236 158.609 177.553 158.601 177.753 158.79 cv
178.251 159.257 178.723 159.731 179.171 160.21 cv
179.36 160.412 179.349 160.729 179.148 160.917 cv
179.051 161.007 178.929 161.052 178.806 161.052 cv
181.83 164.948 mo
181.663 164.948 181.5 164.865 181.405 164.714 cv
181.07 164.179 180.702 163.643 180.31 163.121 cv
180.144 162.899 180.189 162.586 180.411 162.42 cv
180.632 162.255 180.945 162.301 181.111 162.521 cv
181.518 163.065 181.903 163.625 182.253 164.183 cv
182.399 164.416 182.329 164.725 182.095 164.872 cv
182.012 164.924 181.92 164.948 181.83 164.948 cv
183.946 169.396 mo
183.736 169.396 183.541 169.264 183.472 169.054 cv
183.273 168.453 183.038 167.85 182.773 167.262 cv
182.66 167.01 182.772 166.714 183.024 166.601 cv
183.276 166.487 183.572 166.6 183.686 166.852 cv
183.964 167.471 184.211 168.106 184.421 168.739 cv
184.508 169.001 184.366 169.284 184.103 169.371 cv
183.946 169.396 li
184.833 174.238 mo
184.566 174.238 184.344 174.026 184.334 173.757 cv
184.31 173.121 184.248 172.479 184.15 171.849 cv
184.107 171.576 184.294 171.321 184.567 171.278 cv
184.842 171.239 185.096 171.423 185.138 171.696 cv
185.242 172.364 185.308 173.044 185.333 173.719 cv
185.344 173.995 185.128 174.227 184.853 174.237 cv
184.833 174.238 li
f
184.517 178.201 mo
184.418 178.191 li
184.148 178.137 183.972 177.874 184.026 177.603 cv
184.09 177.286 184.144 176.967 184.188 176.648 cv
184.226 176.375 184.477 176.184 184.752 176.223 cv
185.026 176.261 185.216 176.514 185.178 176.787 cv
185.131 177.125 185.074 177.462 185.007 177.799 cv
184.959 178.037 184.75 178.201 184.517 178.201 cv
cp
f
169.375 195.757 mo
169.198 195.757 169.027 195.664 168.936 195.498 cv
168.803 195.256 168.891 194.952 169.133 194.819 cv
169.423 194.66 169.71 194.498 169.995 194.333 cv
170.232 194.195 170.54 194.277 170.678 194.517 cv
170.816 194.756 170.734 195.062 170.495 195.2 cv
170.205 195.367 169.911 195.533 169.615 195.695 cv
169.375 195.757 li
cp
f
84.3887 174.249 mo
84.3809 174.249 li
84.1045 174.244 83.8843 174.017 83.8887 173.741 cv
83.8999 173.044 83.9536 172.341 84.0483 171.653 cv
84.0859 171.38 84.3315 171.184 84.6118 171.226 cv
84.8853 171.264 85.0767 171.516 85.0386 171.79 cv
84.9497 172.438 84.8989 173.1 84.8887 173.756 cv
84.8843 174.03 84.6611 174.249 84.3887 174.249 cv
cp
85.0625 179.271 mo
84.8452 179.271 84.645 179.128 84.582 178.909 cv
84.3906 178.238 84.2354 177.552 84.1221 176.869 cv
84.0767 176.596 84.2607 176.339 84.5332 176.293 cv
84.8042 176.244 85.063 176.432 85.1084 176.705 cv
85.2158 177.35 85.3623 178 85.5439 178.634 cv
85.6196 178.899 85.4658 179.176 85.2002 179.252 cv
85.0625 179.271 li
cp
87.0864 183.923 mo
86.9155 183.923 86.7485 183.835 86.6553 183.677 cv
86.2988 183.073 85.9712 182.454 85.6826 181.837 cv
85.5654 181.587 85.6733 181.289 85.9233 181.172 cv
86.1729 181.055 86.4712 181.163 86.5879 181.413 cv
86.8633 182.001 87.1758 182.592 87.5166 183.168 cv
87.6567 183.406 87.5781 183.713 87.3403 183.854 cv
87.0864 183.923 li
cp
90.1128 187.999 mo
89.9766 187.999 89.8408 187.943 89.7422 187.834 cv
89.2764 187.32 88.8281 186.787 88.4097 186.25 cv
88.2402 186.032 88.2793 185.718 88.4971 185.548 cv
88.7148 185.378 89.0278 185.417 89.1987 185.635 cv
89.6021 186.153 90.0342 186.667 90.4834 187.164 cv
90.6689 187.368 90.6528 187.685 90.4482 187.87 cv
90.3525 187.957 90.2324 187.999 90.1128 187.999 cv
cp
93.8193 191.474 mo
93.7095 191.474 93.5986 191.438 93.5063 191.364 cv
92.9595 190.924 92.4365 190.477 91.937 190.024 cv
91.7319 189.839 91.7163 189.523 91.9019 189.318 cv
92.0879 189.112 92.4033 189.098 92.6079 189.283 cv
93.0938 189.723 93.6021 190.157 94.1333 190.584 cv
94.3481 190.758 94.3823 191.072 94.2095 191.288 cv
94.1108 191.41 93.9658 191.474 93.8193 191.474 cv
cp
97.9756 194.4 mo
97.7129 194.326 li
97.1191 193.958 96.5444 193.584 95.9883 193.204 cv
95.7603 193.048 95.7021 192.737 95.8579 192.509 cv
96.0132 192.281 96.3242 192.222 96.5527 192.378 cv
97.0962 192.75 97.6582 193.116 98.2393 193.475 cv
98.4741 193.621 98.5464 193.929 98.4014 194.164 cv
98.3066 194.316 98.1431 194.4 97.9756 194.4 cv
cp
102.433 196.848 mo
102.215 196.797 li
101.595 196.496 100.985 196.185 100.385 195.863 cv
100.142 195.733 100.05 195.43 100.18 195.186 cv
100.311 194.943 100.614 194.852 100.857 194.981 cv
101.446 195.297 102.044 195.602 102.652 195.898 cv
102.901 196.019 103.004 196.318 102.883 196.566 cv
102.796 196.744 102.619 196.848 102.433 196.848 cv
cp
164.805 197.987 mo
164.611 197.987 164.427 197.875 164.346 197.686 cv
164.236 197.432 164.353 197.138 164.606 197.028 cv
165.228 196.76 165.84 196.483 166.443 196.196 cv
166.693 196.078 166.991 196.183 167.11 196.433 cv
167.229 196.682 167.122 196.98 166.873 197.099 cv
166.259 197.391 165.635 197.673 165.003 197.946 cv
164.805 197.987 li
cp
107.102 198.865 mo
106.923 198.832 li
106.28 198.586 105.646 198.332 105.019 198.067 cv
104.764 197.96 104.645 197.667 104.752 197.412 cv
104.859 197.158 105.152 197.039 105.407 197.146 cv
106.024 197.406 106.648 197.657 107.28 197.898 cv
107.538 197.997 107.667 198.286 107.568 198.544 cv
107.492 198.743 107.303 198.865 107.102 198.865 cv
cp
160.054 199.802 mo
159.845 199.802 159.65 199.67 159.58 199.461 cv
159.492 199.199 159.633 198.916 159.895 198.828 cv
160.536 198.613 161.17 198.388 161.798 198.155 cv
162.057 198.057 162.344 198.19 162.441 198.449 cv
162.537 198.708 162.405 198.996 162.146 199.092 cv
161.509 199.33 160.864 199.557 160.213 199.776 cv
160.054 199.802 li
cp
111.92 200.494 mo
111.778 200.474 li
111.12 200.279 110.468 200.075 109.822 199.862 cv
109.559 199.776 109.417 199.493 109.503 199.231 cv
109.589 198.968 109.872 198.824 110.134 198.912 cv
110.771 199.122 111.414 199.323 112.063 199.515 cv
112.327 199.593 112.478 199.871 112.4 200.136 cv
112.335 200.354 112.136 200.494 111.92 200.494 cv
cp
155.177 201.238 mo
154.954 201.238 154.751 201.088 154.693 200.862 cv
154.625 200.594 154.787 200.322 155.054 200.254 cv
155.709 200.086 156.359 199.911 157.004 199.726 cv
157.271 199.653 157.547 199.805 157.623 200.07 cv
157.698 200.335 157.544 200.612 157.279 200.688 cv
156.625 200.875 155.966 201.053 155.301 201.223 cv
155.177 201.238 li
cp
116.85 201.765 mo
116.741 201.753 li
116.071 201.604 115.406 201.447 114.746 201.282 cv
114.478 201.216 114.315 200.944 114.382 200.676 cv
114.449 200.408 114.719 200.245 114.988 200.313 cv
115.641 200.475 116.297 200.63 116.958 200.776 cv
117.227 200.836 117.397 201.104 117.337 201.373 cv
117.286 201.606 117.079 201.765 116.85 201.765 cv
cp
150.209 202.326 mo
149.973 202.326 149.763 202.157 149.718 201.917 cv
149.668 201.645 149.848 201.385 150.12 201.334 cv
150.785 201.212 151.446 201.081 152.103 200.942 cv
152.375 200.886 152.638 201.058 152.695 201.328 cv
152.752 201.599 152.58 201.864 152.31 201.921 cv
151.644 202.062 150.974 202.194 150.3 202.318 cv
150.209 202.326 li
cp
121.852 202.703 mo
121.775 202.697 li
121.099 202.592 120.425 202.479 119.755 202.358 cv
119.483 202.31 119.303 202.049 119.352 201.777 cv
119.401 201.506 119.656 201.329 119.933 201.374 cv
120.595 201.493 121.26 201.605 121.928 201.709 cv
122.201 201.752 122.388 202.007 122.346 202.28 cv
122.307 202.526 122.094 202.703 121.852 202.703 cv
cp
145.182 203.09 mo
144.932 203.09 144.716 202.903 144.686 202.649 cv
144.653 202.375 144.848 202.126 145.123 202.094 cv
145.793 202.013 146.462 201.925 147.127 201.827 cv
147.402 201.793 147.654 201.977 147.694 202.25 cv
147.734 202.523 147.545 202.777 147.272 202.817 cv
146.598 202.915 145.921 203.005 145.242 203.086 cv
145.182 203.09 li
cp
126.903 203.327 mo
126.856 203.325 li
126.175 203.262 125.497 203.19 124.819 203.111 cv
124.545 203.078 124.349 202.83 124.381 202.556 cv
124.413 202.282 124.66 202.078 124.937 202.118 cv
125.605 202.196 126.276 202.268 126.948 202.329 cv
127.223 202.354 127.426 202.599 127.4 202.873 cv
127.376 203.133 127.158 203.327 126.903 203.327 cv
cp
140.116 203.544 mo
139.854 203.544 139.633 203.339 139.618 203.073 cv
139.601 202.798 139.812 202.562 140.087 202.545 cv
140.761 202.505 141.434 202.456 142.104 202.4 cv
142.378 202.389 142.622 202.581 142.644 202.856 cv
142.667 203.132 142.463 203.374 142.188 203.396 cv
141.509 203.454 140.828 203.503 140.146 203.543 cv
140.116 203.544 li
cp
131.981 203.647 mo
131.964 203.647 li
131.282 203.625 130.6 203.593 129.919 203.555 cv
129.644 203.539 129.433 203.304 129.449 203.027 cv
129.464 202.752 129.689 202.529 129.976 202.557 cv
130.649 202.595 131.323 202.625 131.997 202.647 cv
132.273 202.657 132.489 202.888 132.48 203.164 cv
132.471 203.435 132.249 203.647 131.981 203.647 cv
cp
135.033 203.697 mo
134.757 203.697 134.533 203.474 134.533 203.198 cv
134.532 202.922 134.756 202.697 135.032 202.697 cv
135.707 202.696 136.381 202.688 137.055 202.671 cv
137.347 202.695 137.561 202.883 137.567 203.158 cv
137.574 203.435 137.355 203.664 137.08 203.671 cv
136.398 203.688 135.716 203.696 135.033 203.697 cv
135.033 203.697 li
cp
f
85.2261 169.224 mo
85.0737 169.2 li
84.811 169.116 84.6655 168.835 84.75 168.572 cv
84.853 168.249 84.9663 167.926 85.0889 167.604 cv
85.187 167.345 85.4761 167.216 85.7339 167.314 cv
85.9917 167.412 86.1216 167.701 86.0234 167.959 cv
85.9077 168.264 85.8003 168.57 85.7021 168.876 cv
85.6343 169.089 85.438 169.224 85.2261 169.224 cv
cp
f
119.948 155.505 mo
119.724 155.505 119.521 155.354 119.463 155.127 cv
119.396 154.86 119.558 154.588 119.826 154.521 cv
120.351 154.388 120.88 154.264 121.412 154.147 cv
121.685 154.088 121.949 154.259 122.007 154.529 cv
122.066 154.799 121.896 155.065 121.626 155.124 cv
121.104 155.238 120.585 155.361 120.07 155.49 cv
119.948 155.505 li
cp
115.169 156.966 mo
114.965 156.966 114.773 156.84 114.699 156.637 cv
114.604 156.378 114.738 156.091 114.998 155.997 cv
115.626 155.768 116.265 155.551 116.911 155.347 cv
117.176 155.264 117.456 155.41 117.539 155.672 cv
117.622 155.936 117.476 156.217 117.213 156.3 cv
116.58 156.5 115.956 156.712 115.34 156.936 cv
115.169 156.966 li
cp
110.584 158.949 mo
110.402 158.949 110.227 158.85 110.138 158.676 cv
110.013 158.43 110.111 158.129 110.357 158.003 cv
110.954 157.7 111.563 157.41 112.186 157.132 cv
112.439 157.022 112.734 157.134 112.846 157.386 cv
112.958 157.638 112.845 157.934 112.592 158.046 cv
111.986 158.316 111.392 158.599 110.811 158.895 cv
110.584 158.949 li
cp
106.308 161.529 mo
106.152 161.529 105.999 161.457 105.901 161.321 cv
105.74 161.096 105.792 160.784 106.016 160.623 cv
106.555 160.237 107.124 159.857 107.707 159.495 cv
107.942 159.349 108.25 159.422 108.396 159.656 cv
108.541 159.891 108.469 160.199 108.234 160.345 cv
107.663 160.7 107.118 161.063 106.599 161.436 cv
106.511 161.499 106.409 161.529 106.308 161.529 cv
cp
102.554 164.818 mo
102.433 164.818 102.312 164.774 102.216 164.686 cv
102.013 164.5 101.999 164.183 102.186 163.979 cv
102.635 163.491 103.123 163.006 103.636 162.54 cv
103.842 162.355 104.157 162.37 104.343 162.573 cv
104.528 162.778 104.513 163.094 104.309 163.28 cv
103.818 163.726 103.352 164.189 102.922 164.656 cv
102.824 164.763 102.689 164.818 102.554 164.818 cv
cp
99.7197 168.914 mo
99.502 168.864 li
99.2534 168.743 99.1499 168.444 99.2705 168.196 cv
99.5645 167.59 99.9072 166.987 100.29 166.403 cv
100.441 166.172 100.751 166.108 100.982 166.259 cv
101.213 166.41 101.277 166.72 101.126 166.951 cv
100.767 167.5 100.445 168.065 100.17 168.632 cv
100.083 168.811 99.9053 168.914 99.7197 168.914 cv
cp
98.4082 173.705 mo
98.3721 173.704 li
98.0967 173.684 97.8896 173.445 97.9092 173.169 cv
97.9575 172.485 98.063 171.794 98.2227 171.116 cv
98.2856 170.848 98.5562 170.683 98.8242 170.744 cv
99.0928 170.808 99.2593 171.077 99.1963 171.346 cv
99.0488 171.972 98.9512 172.609 98.9063 173.241 cv
98.8877 173.504 98.6685 173.705 98.4082 173.705 cv
cp
99.063 178.628 mo
98.855 178.628 98.6606 178.497 98.5898 178.289 cv
98.3647 177.628 98.1904 176.953 98.0723 176.28 cv
98.0239 176.008 98.2056 175.749 98.4775 175.701 cv
98.7485 175.652 99.0088 175.834 99.0566 176.106 cv
99.1665 176.729 99.3276 177.354 99.5361 177.967 cv
99.6255 178.228 99.4854 178.512 99.2241 178.601 cv
99.063 178.628 li
cp
f
161.861 160.999 mo
161.767 160.999 161.671 160.972 161.586 160.916 cv
161.052 160.563 160.494 160.218 159.911 159.881 cv
159.671 159.743 159.589 159.438 159.728 159.198 cv
159.866 158.958 160.172 158.876 160.411 159.015 cv
161.011 159.362 161.586 159.718 162.137 160.081 cv
162.368 160.233 162.431 160.543 162.279 160.774 cv
162.183 160.919 162.024 160.999 161.861 160.999 cv
cp
165.767 164.109 mo
165.641 164.109 165.516 164.062 165.418 163.968 cv
164.965 163.526 164.474 163.087 163.958 162.663 cv
163.745 162.487 163.715 162.172 163.891 161.959 cv
164.066 161.746 164.381 161.715 164.594 161.891 cv
165.131 162.333 165.643 162.791 166.116 163.251 cv
166.314 163.444 166.318 163.76 166.125 163.958 cv
166.027 164.059 165.897 164.109 165.767 164.109 cv
cp
168.884 167.999 mo
168.714 167.999 168.548 167.912 168.454 167.754 cv
168.131 167.211 167.765 166.671 167.365 166.148 cv
167.197 165.928 167.239 165.615 167.458 165.447 cv
167.679 165.281 167.992 165.322 168.16 165.541 cv
168.583 166.094 168.971 166.667 169.313 167.243 cv
169.455 167.48 169.377 167.787 169.14 167.928 cv
168.884 167.999 li
cp
170.658 172.643 mo
170.42 172.643 170.21 172.473 170.166 172.231 cv
170.054 171.611 169.89 170.986 169.679 170.374 cv
169.588 170.113 169.727 169.829 169.988 169.738 cv
170.248 169.647 170.533 169.787 170.624 170.048 cv
170.852 170.708 171.029 171.383 171.15 172.054 cv
171.199 172.326 171.019 172.585 170.747 172.635 cv
170.658 172.643 li
cp
170.537 177.604 mo
170.424 177.592 li
170.155 177.53 169.987 177.261 170.049 176.992 cv
170.194 176.365 170.288 175.727 170.33 175.096 cv
170.348 174.82 170.591 174.618 170.861 174.63 cv
171.137 174.648 171.346 174.886 171.328 175.162 cv
171.283 175.846 171.18 176.538 171.023 177.217 cv
170.97 177.448 170.764 177.604 170.537 177.604 cv
cp
168.556 182.166 mo
168.462 182.166 168.368 182.14 168.284 182.085 cv
168.052 181.934 167.986 181.625 168.137 181.393 cv
168.495 180.842 168.815 180.275 169.087 179.709 cv
169.206 179.46 169.503 179.354 169.754 179.475 cv
170.003 179.594 170.108 179.893 169.988 180.142 cv
169.698 180.747 169.357 181.351 168.976 181.938 cv
168.879 182.085 168.719 182.166 168.556 182.166 cv
cp
165.304 185.944 mo
165.168 185.944 165.033 185.889 164.935 185.781 cv
164.748 185.577 164.763 185.261 164.967 185.075 cv
165.457 184.626 165.922 184.162 166.349 183.695 cv
166.536 183.489 166.851 183.476 167.055 183.663 cv
167.259 183.849 167.274 184.165 167.087 184.369 cv
166.641 184.859 166.154 185.345 165.641 185.813 cv
165.545 185.9 165.424 185.944 165.304 185.944 cv
cp
161.312 188.942 mo
161.145 188.942 160.982 188.858 160.887 188.707 cv
160.741 188.473 160.813 188.164 161.047 188.018 cv
161.617 187.662 162.162 187.296 162.681 186.923 cv
162.906 186.763 163.217 186.813 163.378 187.037 cv
163.54 187.261 163.489 187.574 163.265 187.735 cv
162.729 188.121 162.166 188.498 161.576 188.866 cv
161.494 188.917 161.402 188.942 161.312 188.942 cv
cp
110.32 190.133 mo
110.088 190.075 li
109.659 189.85 109.236 189.617 108.822 189.377 cv
108.583 189.239 108.501 188.933 108.64 188.694 cv
108.776 188.455 109.082 188.373 109.323 188.512 cv
109.726 188.745 110.136 188.971 110.554 189.19 cv
110.798 189.319 110.892 189.621 110.763 189.866 cv
110.674 190.036 110.5 190.133 110.32 190.133 cv
cp
156.896 191.28 mo
156.705 191.28 156.523 191.17 156.439 190.985 cv
156.327 190.732 156.439 190.437 156.691 190.324 cv
157.297 190.053 157.892 189.769 158.473 189.472 cv
158.72 189.347 159.021 189.445 159.146 189.689 cv
159.271 189.936 159.173 190.237 158.928 190.362 cv
158.331 190.667 157.722 190.958 157.101 191.237 cv
156.896 191.28 li
cp
114.88 192.177 mo
114.703 192.145 li
114.068 191.904 113.442 191.65 112.829 191.385 cv
112.575 191.275 112.459 190.98 112.568 190.727 cv
112.678 190.475 112.971 190.358 113.226 190.467 cv
113.826 190.727 114.437 190.974 115.058 191.21 cv
115.316 191.308 115.446 191.597 115.348 191.854 cv
115.272 192.054 115.082 192.177 114.88 192.177 cv
cp
152.224 193.053 mo
152.012 193.053 151.815 192.917 151.748 192.704 cv
151.664 192.441 151.81 192.16 152.073 192.076 cv
152.706 191.875 153.33 191.662 153.945 191.437 cv
154.203 191.343 154.491 191.476 154.586 191.735 cv
154.681 191.994 154.548 192.281 154.289 192.376 cv
153.66 192.606 153.022 192.824 152.375 193.029 cv
152.224 193.053 li
cp
119.641 193.7 mo
119.512 193.684 li
118.858 193.51 118.21 193.325 117.57 193.127 cv
117.307 193.046 117.159 192.766 117.24 192.502 cv
117.321 192.238 117.598 192.088 117.865 192.171 cv
118.493 192.365 119.127 192.547 119.769 192.717 cv
120.036 192.788 120.195 193.062 120.124 193.329 cv
120.064 193.552 119.862 193.7 119.641 193.7 cv
cp
147.393 194.326 mo
147.162 194.326 146.954 194.165 146.904 193.93 cv
146.847 193.66 147.019 193.395 147.289 193.337 cv
147.938 193.199 148.581 193.049 149.217 192.888 cv
149.482 192.822 149.756 192.982 149.825 193.25 cv
149.892 193.518 149.73 193.79 149.462 193.858 cv
148.814 194.022 148.158 194.175 147.497 194.315 cv
147.393 194.326 li
cp
124.529 194.759 mo
124.444 194.752 li
123.778 194.639 123.117 194.514 122.46 194.378 cv
122.19 194.322 122.017 194.058 122.072 193.787 cv
122.128 193.517 122.394 193.345 122.664 193.399 cv
123.308 193.533 123.958 193.655 124.612 193.767 cv
124.884 193.813 125.067 194.071 125.021 194.343 cv
124.98 194.587 124.768 194.759 124.529 194.759 cv
cp
142.463 195.153 mo
142.214 195.153 141.999 194.968 141.968 194.715 cv
141.934 194.44 142.128 194.191 142.402 194.157 cv
143.061 194.076 143.715 193.983 144.366 193.88 cv
144.64 193.836 144.894 194.023 144.938 194.296 cv
144.981 194.568 144.795 194.825 144.522 194.868 cv
143.86 194.973 143.194 195.067 142.525 195.149 cv
142.463 195.153 li
cp
129.489 195.391 mo
129.445 195.389 li
128.774 195.332 128.105 195.263 127.439 195.185 cv
127.165 195.152 126.969 194.903 127.001 194.629 cv
127.034 194.355 127.282 194.161 127.557 194.191 cv
128.212 194.269 128.87 194.336 129.531 194.393 cv
129.806 194.417 130.01 194.659 129.986 194.934 cv
129.964 195.194 129.746 195.391 129.489 195.391 cv
cp
137.482 195.564 mo
137.216 195.564 136.995 195.354 136.983 195.085 cv
136.972 194.809 137.186 194.576 137.462 194.564 cv
138.123 194.537 138.784 194.499 139.442 194.45 cv
139.72 194.427 139.957 194.636 139.978 194.911 cv
139.998 195.187 139.792 195.426 139.516 195.447 cv
138.847 195.497 138.176 195.536 137.504 195.563 cv
137.482 195.564 li
cp
134.483 195.618 mo
134.48 195.618 li
133.808 195.614 133.136 195.6 132.465 195.575 cv
132.189 195.564 131.974 195.333 131.984 195.057 cv
131.994 194.781 132.234 194.551 132.502 194.576 cv
133.163 194.6 133.825 194.614 134.486 194.618 cv
134.763 194.62 134.985 194.845 134.983 195.121 cv
134.982 195.396 134.758 195.618 134.483 195.618 cv
cp
f
134.731 185.205 mo
129.955 185.205 125.169 184.151 121.522 182.045 cv
117.893 179.95 115.895 177.139 115.895 174.13 cv
115.895 171.217 117.773 168.498 121.191 166.448 cv
121.191 162.187 li
122.191 162.187 li
122.191 167.023 li
121.941 167.167 li
118.687 169.046 116.895 171.519 116.895 174.13 cv
116.895 176.767 118.715 179.27 122.022 181.179 cv
129.011 185.214 140.347 185.236 147.292 181.226 cv
147.792 182.092 li
144.196 184.167 139.468 185.205 134.731 185.205 cv
cp
f
142.719 155.096 mo
142.719 167.894 134.226 177.938 134.226 177.938 cv
134.226 177.938 125.733 167.894 125.733 155.096 cv
125.733 149.18 129.535 144.385 134.226 144.385 cv
138.916 144.385 142.719 149.18 142.719 155.096 cv
cp
0 .772549 .115206 0 cmyk
f
151.3 120.494 mo
166.546 128.616 li
166.546 118.335 li
166.546 116.893 166.273 115.627 165.745 114.623 cv
159.16 102.096 li
157.743 99.3995 154.675 98.9208 151.3 100.869 cv
151.3 120.494 li
.791928 .149783 .413275 .00347906 cmyk
f
116.822 120.494 mo
101.576 128.616 li
101.576 118.335 li
101.576 116.893 101.849 115.627 102.376 114.623 cv
108.962 102.096 li
110.379 99.3995 113.447 98.9208 116.822 100.869 cv
116.822 120.494 li
f
141.32 141.348 mo
126.802 141.348 li
126.802 143.397 li
126.804 143.397 li
126.802 143.455 li
126.802 145.79 130.052 147.682 134.061 147.682 cv
138.07 147.682 141.32 145.79 141.32 143.455 cv
141.318 143.397 li
141.32 143.397 li
141.32 141.348 li
cp
f
151.4 123.19 mo
116.722 123.19 li
116.722 133.493 li
116.728 133.493 li
116.722 133.632 li
116.722 139.209 124.485 143.729 134.061 143.729 cv
143.637 143.729 151.4 139.209 151.4 133.632 cv
151.394 133.493 li
151.4 133.493 li
151.4 123.19 li
cp
f
173.858 139.964 mo
172.858 139.964 li
172.858 118.335 li
172.858 115.848 172.345 113.611 171.333 111.686 cv
166.211 101.945 li
167.438 91.6846 li
169.413 75.1753 165.462 58.7817 156.315 45.5244 cv
155.931 44.9663 155.539 44.4141 155.138 43.8652 cv
141.352 24.98 li
142.159 24.3901 li
155.945 43.2754 li
156.352 43.8311 156.75 44.3911 157.139 44.9565 cv
166.424 58.4146 170.434 75.0518 168.431 91.8037 cv
167.241 101.754 li
172.218 111.221 li
173.306 113.291 173.858 115.685 173.858 118.335 cv
173.858 139.964 li
cp
.158541 .0152895 0 0 cmyk
f
161.17 90.9354 mo
162.928 76.2395 159.524 61.2897 151.119 49.1074 cv
150.766 48.5959 150.406 48.0888 150.04 47.5864 cv
134.061 25.6981 li
118.082 47.5864 li
117.716 48.0888 117.356 48.5959 117.003 49.1074 cv
108.598 61.2897 105.194 76.2395 106.951 90.9354 cv
111.032 125.064 li
111.04 125.064 li
111.032 125.249 li
111.032 132.655 121.342 138.66 134.061 138.66 cv
146.78 138.66 157.09 132.655 157.09 125.249 cv
157.082 125.064 li
157.09 125.064 li
161.17 90.9354 li
.316289 .0888075 0 0 cmyk
f
130.591 84.8214 mo
129.778 64.5288 130.913 43.9523 133.943 25.8597 cv
118.082 47.5862 li
117.715 48.089 117.356 48.5959 117.003 49.1074 cv
108.598 61.2897 105.194 76.2395 106.951 90.9354 cv
111.032 125.064 li
111.04 125.064 li
111.032 125.249 li
111.032 132.399 120.64 138.24 132.747 138.636 cv
130.591 84.8214 li
.158541 .0152895 0 0 cmyk
f
130.573 100.002 mo
130.573 103.185 129.474 105.44 127.688 106.531 cv
125.918 107.649 li
124.06 108.688 125.248 106.331 122.426 104.702 cv
116.747 101.423 112.144 93.4821 112.144 86.9655 cv
112.144 83.7432 109.164 83.7171 110.989 82.6411 cv
113.112 81.4723 li
114.965 80.4688 117.497 80.6536 120.29 82.2659 cv
125.969 85.5446 130.573 93.4854 130.573 100.002 cv
.791928 .149783 .413275 .00347906 cmyk
f
128.543 101.203 mo
128.543 107.719 123.94 110.344 118.261 107.065 cv
112.582 103.787 107.978 95.8457 107.978 89.3291 cv
107.978 82.8125 112.582 80.1875 118.261 83.4664 cv
123.94 86.7451 128.543 94.686 128.543 101.203 cv
.728359 .00238041 .335668 0 cmyk
f
126.611 100.087 mo
126.611 105.378 122.872 107.51 118.261 104.847 cv
113.649 102.185 109.911 95.7367 109.911 90.445 cv
109.911 85.1532 113.649 83.0218 118.261 85.6842 cv
122.872 88.3468 126.611 94.795 126.611 100.087 cv
cp
1 .794217 .112612 .0108034 cmyk
f
119.903 104.159 mo
115.291 101.496 111.553 95.048 111.553 89.7562 cv
111.553 87.3169 112.349 85.5512 113.657 84.615 cv
111.4 85.0271 109.911 87.106 109.911 90.445 cv
109.911 95.7367 113.649 102.185 118.261 104.847 cv
120.746 106.283 122.977 106.323 124.507 105.228 cv
123.187 105.469 121.605 105.141 119.903 104.159 cv
cp
.791928 .149783 .413275 .00347906 cmyk
f
gsave
126.866 106.695 mo
127.926 105.451 128.543 103.587 128.543 101.203 cv
128.543 94.686 123.94 86.7451 118.261 83.4664 cv
116.601 82.508 115.033 82.0542 113.645 82.0542 cv
113.084 82.0542 112.552 82.1283 112.056 82.2735 cv
111.941 82.2978 111.828 82.3253 111.719 82.3559 cv
112.254 82.1026 113.045 81.9355 113.98 81.9355 cv
115.321 81.9355 116.958 82.2795 118.563 83.2057 cv
124.242 86.4844 128.845 94.4252 128.845 100.942 cv
128.845 103.515 128.029 105.456 126.866 106.695 cv
clp
111.719 81.9355 mo
128.845 81.9355 li
128.845 106.695 li
111.719 106.695 li
cp
.458442 0 .211704 0 cmyk
f
grestore
124.901 108.028 mo
126.899 107.029 128.445 104.626 128.445 101.233 cv
128.445 94.7165 123.841 86.7757 118.162 83.497 cv
116.54 82.5604 114.859 82.1394 113.407 82.1394 cv
112.928 82.1394 112.474 82.1852 112.056 82.2735 cv
112.552 82.1283 113.084 82.0542 113.645 82.0542 cv
115.033 82.0542 116.601 82.508 118.261 83.4664 cv
123.94 86.7451 128.543 94.686 128.543 101.203 cv
128.543 103.587 127.926 105.451 126.866 106.695 cv
126.279 107.321 125.604 107.768 124.901 108.028 cv
.425116 0 .174685 0 cmyk
f
116.991 134.589 mo
104.856 157.827 li
102.401 156.378 li
102.401 146.539 li
102.401 145.16 102.662 143.646 103.167 142.102 cv
109.469 122.837 li
110.826 118.691 113.761 114.843 116.991 112.979 cv
119.349 114.404 li
116.991 134.589 li
.728359 .00238041 .335668 0 cmyk
f
119.445 136.037 mo
104.856 157.827 li
104.856 147.988 li
104.856 146.608 105.117 145.094 105.622 143.551 cv
111.924 124.286 li
113.28 120.14 116.216 116.292 119.445 114.427 cv
119.445 136.037 li
.791928 .149783 .413275 .00347906 cmyk
f
104.641 157.773 mo
104.641 157.7 li
104.676 157.721 li
104.641 157.773 li
0 0 0 0 cmyk
f
104.676 157.721 mo
104.641 157.7 li
104.641 147.934 li
104.641 146.554 104.903 145.041 105.407 143.497 cv
111.709 124.232 li
113.066 120.086 116.001 116.238 119.231 114.374 cv
119.231 114.554 li
116.086 116.463 113.25 120.231 111.924 124.286 cv
105.622 143.551 li
105.117 145.094 104.856 146.608 104.856 147.988 cv
104.856 157.453 li
104.676 157.721 li
.425116 0 .174685 0 cmyk
f
104.856 157.453 mo
104.856 147.988 li
104.856 146.608 105.117 145.094 105.622 143.551 cv
111.924 124.286 li
113.25 120.231 116.086 116.463 119.231 114.554 cv
119.231 114.961 li
116.173 116.908 113.434 120.592 112.138 124.554 cv
105.836 143.819 li
105.332 145.363 105.07 146.876 105.07 148.256 cv
105.07 157.132 li
104.856 157.453 li
.458442 0 .211704 0 cmyk
f
151.131 134.589 mo
163.266 157.827 li
165.721 156.378 li
165.721 146.539 li
165.721 145.16 165.46 143.646 164.955 142.102 cv
158.653 122.837 li
157.296 118.691 154.361 114.843 151.131 112.979 cv
148.773 114.404 li
151.131 134.589 li
.791928 .149783 .413275 .00347906 cmyk
f
148.677 136.037 mo
163.266 157.827 li
163.266 147.988 li
163.266 146.608 163.005 145.094 162.5 143.551 cv
156.198 124.286 li
154.842 120.14 151.906 116.292 148.677 114.427 cv
148.677 136.037 li
.728359 .00238041 .335668 0 cmyk
f
163.588 157.827 mo
163.497 157.691 li
163.588 157.637 li
163.588 157.827 li
0 0 0 0 cmyk
f
163.497 157.691 mo
163.266 157.346 li
163.266 147.988 li
163.266 146.608 163.005 145.094 162.5 143.551 cv
156.198 124.286 li
155.042 120.751 152.737 117.433 150.082 115.376 cv
149.727 115.078 149.365 114.803 148.998 114.552 cv
148.998 114.427 li
152.228 116.292 155.164 120.14 156.52 124.286 cv
162.822 143.551 li
163.326 145.094 163.588 146.608 163.588 147.988 cv
163.588 157.637 li
163.497 157.691 li
.458442 0 .211704 0 cmyk
f
163.266 157.346 mo
162.824 156.686 li
162.824 147.626 li
162.824 146.246 162.563 144.733 162.058 143.189 cv
155.756 123.924 li
154.664 120.587 152.549 117.447 150.082 115.376 cv
152.737 117.433 155.042 120.751 156.198 124.286 cv
162.5 143.551 li
163.005 145.094 163.266 146.608 163.266 147.988 cv
163.266 157.346 li
.425116 0 .174685 0 cmyk
f
150.04 47.5863 mo
134.061 25.6981 li
118.082 47.5863 li
117.993 47.709 117.908 47.8345 117.82 47.9575 cv
120.585 51.5806 126.814 54.1085 134.061 54.1085 cv
141.308 54.1085 147.537 51.5806 150.302 47.9575 cv
150.214 47.8345 150.129 47.709 150.04 47.5863 cv
cp
.728359 .00238041 .335668 0 cmyk
f
118.078 47.5918 mo
117.991 47.7127 117.907 47.8363 117.82 47.9574 cv
120.167 51.0339 125.017 53.3142 130.862 53.9342 cv
131.431 44.197 132.457 34.7291 133.943 25.8599 cv
118.082 47.5862 li
118.078 47.5918 li
cp
.618372 0 .259403 0 cmyk
f
120.072 165.533 mo
119.835 165.473 li
119.592 165.342 119.501 165.038 119.633 164.795 cv
121.239 161.827 li
121.326 161.666 121.513 161.531 121.679 161.565 cv
121.86 161.565 122.027 161.663 122.115 161.821 cv
123.745 164.741 li
123.88 164.982 123.793 165.286 123.552 165.421 cv
123.312 165.555 123.006 165.469 122.872 165.228 cv
121.686 163.103 li
120.513 165.271 li
120.422 165.438 120.25 165.533 120.072 165.533 cv
cp
.0122377 .872923 .218967 0 cmyk
f
148.582 182.167 mo
147.419 182.165 146.474 181.619 146.47 180.948 cv
146.466 180.276 147.406 179.734 148.569 179.736 cv
149.731 179.738 150.677 180.284 150.68 180.955 cv
150.684 181.626 149.745 182.169 148.582 182.167 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.0
%%For: (Natalya) ()
%%Title: (2008.w013.n001.262B.p30.262_01.eps)
%%CreationDate: 8/10/2020 3:23 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26BpGi)`ra".S*SMM:6LP;TOqgh*";I2"Cm#8rZC+/%qo/TA5A-t\,n"E,SL!!!7S'OT<Lm'$5?6P<i'FNrDcUVtMd5T:
%%7O:J9N>)/>?02Qr83,3cYH$:pKEA>X5%Urc/)m,<=ZUrI&l,hF>oH^:VWmqq\O4j=5F2THL$?LX8D!/k`ai1c:YKj:hk+kIS[4)
%.Q&,WeG2fTHGKUV=g[WUbOp<13/%8sA[_]l]6)"PUG'YRY6X:-X;YQ4hgbY]NXap:E@b,Ai32Nm[VO4p<S)Bgi2N/^.SCkEJr<gA
%fC=3q<qFcqNg&;,)5H5bmILLK#pt6'QJeK8#c`?ghIBNM#RWchQ5(BK76,$k9:'tXY]q)bVi(NLS*#G7o"R$ks,XsM5N-6\0bfi7
%3BSkN*'+0%F%crol_9"i1]`]@/.n&Pn=<UliHMH96i=p(-UFM5pNlr2h_<Q=V6&o2reZ,e^qa%R>k;?CD&CN=1:F:b#Oj6l&YP9M
%"Q+"2Nt(2ri)bMjOH=:VG?k"u8-5Le.#I)]IQco-C"@T\.hC\qQhFXKT["`(\sM^]"]5sc!W<cF-[t5&k^e,jl@!3kL>mro]]qHL
%r1?9Q.gP^l%ba5?V"L#b?*b6i<:l.6!*=%4U7-gI,CIu4(jG)'fH5I`E?/TF+c,SQVfkpQDWiDUle+V/G<3-(,hJ'Z\GV6jaLJL)
%T)9u*"KHg^TICK)oX"IE1_ObBs&dKbEnPB$2uOYtRdL7MMMjIU5SKRi^ZWLdQlrc^K>3],cQ;>@$9u=Jp]7P5O6>KjHsX6"#6$Ig
%]P8:.eM-c5WC5RQRr'C;D<!S07PNRd0\\4FjIi*"0V4%R*rJiYcU0D46SSFk^C`#h8$I@^]B8^0-(d\p;@0Om8gJKQ!<Ge=m_hXP
%b)?qYa]GaJ]P\S5*WI6!dY5FJ%-`r)nhh["Ij5@7KtiIf\K'BBl,)?Q%>hsZ3#""]%uj!9Dk\7:?o-5bZgsP?"pfsZiGXAuQ*<u'
%M3-nck-a9H_Va.6WFl8LIE%<1-fcSS,RFDm(t+5TE@>EE;pNttj7!/&+cVZ6]JSC]BuJp(%1-Q*^u#3=Cr5'8L,@n.AgWED0.pab
%F%TRXjJ=+nehN&pp'AZr-eF*PB*&?a7ZD'CYpJ-A7/e;;&h%<*$)Hu_3F>5onMc')X<W_;0&.=o,7G1jh5-?/:#b9p3EX_+3(os-
%E_"3WaKSK3-'>k%eS"f)m<N;M4@3@07af?@,FG!nLZ\^53r]KH=]&>-RJ4?Z4@G$T=Hk&tk<@6uC2]n\Ej6fO?qH\G&4n'gO/,?^
%I`-*6ee'hP-b5bs4^&JTY!cF<bQDof9iL9]rsD](M'$$d9@7,G0hqWgrT,-bDHYa/rT,-AiU>0$rc)6Cm^hBDY5$+Nq,6jOIr[RK
%*rY1Bk[#ZV;tQE+MFILcrT,+Yr"4)nH&05'^\hAdj1e-[DWXZo<%-_*MVhR=<,t\PJ?n[hal-SOY@Y$]HpaLgi>]!CI2FdAF=HPG
%M"hcJkusg`TGN/Z.X&b5D@TiLiid..QE@_6!GUQ*-GC;$Zg=K!2$8Wbi)eKP1"^Kj/0O4]<n>Dr=^/5<E#I'r?l63qY$jCuk5fRI
%*"_L_*bU*X*]I<V/9L!'r*9^K?:VZd3rDLSbL'bZHqAMS!%SS`AR4Nb+L6s&*#eiSpM^=?,0_TomR^60,6E+(?"0=+kn4&UJ%.I]
%a91rc)h%Gt?Pd9XbSOS,pa\X=F`_M^&LV84'rEu#fl?XK8H?O>/0R4f]G.Mr-q^p9TCHC)Hb;mh19q!mA9iSsAfO&[^(d<$kn%hP
%Ap$^4%OBk$E%#iPh$N-S,Y8P'=MS]GqhV']ZR!+9%]D4[M4UB2JA"ce@f/Z'G-)V=iJM.ij%:4+V]!k3jgsKf+jY/Q?-Q1dc*11`
%?P4:jJ5FN8\d]V+*)n"\@ngS:@bO2Cn8`CIAe.s1F?mEo#dj[43JK,R/bgC4*b-+X,?/;I=K&fC8O/,tGD`ptcH\GAR2t3HYIBWq
%D:MJk@$:`6=j/+U8PkC98]sSXK9m-+T2f'Yn2.aUoQ$Ok.sRq(3lPVGWD'lp"PIMj6e\V<Dh1$0ka(4-Hh\,e64!WYEeLaF8t8+I
%JF5[D62hgfG2g#gZ:94<EBpB@"\>'i=,N#RC$$Po/89)[L%FK681`$rIq[)4amXoU6b6.7?*_O3WTiagOREsD-7ld2,-Nk/qRDhq
%iA-R<j:,@-A2K$j\NsPcPV\b=,#HFu/X_P8&d.-(@11PU_o3df4X2*P&Kt]PnX>cM,::HA*p6rj,qYTejLJ^%*:_orWjSpMP0b64
%G&p>5R>DL[9A74p.B%uN8@4ai#R@o@E376fd#`ik,g\fJ]96QlSS/cC./qO#/UBgkS^m:6%i6s`GpsZ*ZR@Og\@/51"->V`b[\lP
%*7)o0S,)EDaX0ou,h6&Rc':U4kp!g&C(7QiB1<14?=[IJaE6&K%M<kp!K^tdHe.c+liU:Z#A6'kE_O7.A4=G#Y]Wi+GhmAZ/>rbF
%SE<s"(W^T&FdSD+Q^#Z1.\`H\baZ[d&#(u`&p)p*11;##dL7Xa"6E5_;JdHf.47l'8[JpRelMCq]ZG_K<jG6"77.5J*^cD9_o`W^
%b;9@-Qulk[:9K[;7&1;^,VS1+1``/Ef[+NuF*SY3&M&RGaI<kik-7RNcj'uXSO38pR$&Y%8]-.cAsip6*2Fq>fr,i7%sA2Bb`393
%cuDKpN$2R0V@#"hg8QM?rY;l&dAFa*i.=?7V2t/#mMMR9B-&(EBljTo(K<3%.Yj%=V59)'#bjr21Pp95_@T`['LtT]Q^*L;=.2rC
%7>O_=!@Dtr">K'.o%Agu'O!X<4152:5n4@J6Gcj18>FSR\h*G*8#UZ0[3YDNS/<Rp>nQ(KaFi_1EPO$>BpJdKci=7I"GmHjC+c];
%DQlLp?brG'L9G4nO8(@:jH?'XC]U+8s,*&^-&off9S<#pYQ\8AraRnGA-Gu;3%g$i$]^%:aV%,H!GtLO/L2p=#k]A`&)iR'9*GgO
%A7Xej;WCnIYe*R"K"$Jn(o3+TOc?[d2dW?U58H#@bQSr"R=7OH,]>%0F*"4=3#Yo6aKlnM_+C#)84d;DM[0M#2%/rs`m?'C0M1Dh
%DH3,NMCkAC8(4bjBT$o$rlG./V?8/l:Qdq&G1LgR?*Z=3E(!THhulP66p!IXJTNMb`6uZ!0guLn.CQ,@T[$CM.>'4D0jE(!.QSDS
%*dhu:2=bgb0Fa+a8[L9,AZ1GM(376Mi^hK'(u3AmeT[)p%`h9_?qX.Ie>Y@ON#:J;Eg44Y:*eQ175D&T`[h*OS9fr/Qm:KT_PG;`
%5;HRk[%:i:7l_C`BB+A:?q+U19U`%b*llPDfgFS4%`*sX%]]i$)[+usj9CB/-DQuOSYDN"9Z3sk?R`utR1'm2[e)RolblmR%cf^e
%>TsJ8+\3ZG;@ugT/?]0N&65NW+ol'Z99CeT;>L;Un/R3b,[)(RkCp_YF=dbB0PU["`l,YM;2?ng5``pCMsW8c6<bgNBBeR9;'6h_
%i&N\/Y(^!A.%B]FX$aBb2N%fo_B.lT`%&^%KTa.@-:nI#M,L"_-gWJ:=4Cq8G/t7B]Im&F3?[oEn%)#gQ4:AL@R@JCJPd8aWqiS<
%X1:nj.B]HV"cQYfJFufR]F);<m'[cf)3fHP7D_qKKUX5Di7MEcRo2LO'hcQnKM+TZCd'5:?DP)uZ(]_LS+&B$]uZsG-90T-:h:&n
%D(Hs@_!@pK6FuS_:.I*]1]uB<nPMYk)/?**;J]m2-;B9>eB%n0G^0mj=:,I-Og/q$[,i;,L'<SL_S^Y[mLnD32T@@q;;)kXUl0&9
%Oh8]Y9tDau0*li(:@9N1LTs.)8,Frt%:l!RBQZ9kb&K6G6:c)Y@R@/*lXR7iVq!6%_#uu=Tq$d6#L6/qkJRu>PJPh0EJZc:=Q'G>
%A%4Xp)&2<`XbrQ[>_kX8Y)H1Z[3Q3"AEV(dP-m$oaET^6M+KlM-6nn=ZGrSJ6qTiD'D`Em5nRNE_Jg&MXK]-8U0-N;%5[;c%P4Of
%Z/]0CSQ%nJ"gchkk:)?%>'tK6iVHYSI)n`K.jhgQ&qHXLC8jXr,QDaC+W*]R.-q._TZ8ic<CqkM.)MX-RM;<s'OZU)N1_t^nda(f
%G?UY5*)FYE%>BIAbh@"a_U6!"k1!7?Fm(6-Pl[DNJIt)+(WN]>K#>HXV%0C?"UgG(-]mMVA-Iqt_dM"^TqPq^a>S^p2Sr'80*g5O
%2P#Fg'EX3/,,8"#jc5W'A=>$^RhQEj=fE,(8g.H%9kDNt:kU4K6O!K&B+kkq#R=Fo,g6'n=doJ0&Ojb`SQ.^S5$_,fni=!uU]qmc
%*>8g`SsJC-$UZ4,2p"$0/G)OkF&?8]3Y!Y!YeoD$SD+.^FFq<G=bT-KUNJ.)T2F7OW-U*P=u)A>&ka(e6/4%alc7Ngf!R3?/'/((
%<!l!%Ym4,3NC-!S9,sId=:\t\_%)?S#hgh1ZXTgue.D[tBqd/HqRUJgYoCP^<&(jU1)E!jE1D*W"I'7Z#Wl1;nToT3M8Cl5rB[\k
%_4qP#A%pL/""JQdJWE5>G$=RiKt&%LTkh\7YM]<i+82@^ZWAaB:i#(<MuW_4/&(/;*S1+,EMq:N[s+=lepm[;.9gMW#KkeoghV%I
%rs^I#_>.1-ZE,V)q'P4!j-O0_p`@:_r*"Gm_LSJoh[("2$@V0>r0sR5+fMh1NG&<0/N1?Koi=.40Z0_)nZ_F?rJj2\_?'CGhr0G'
%lP'ebJ3iX0W\K-$[ggMIUCbYbpt#Ma/u=tNYLX[3K%g,tmmjF"Kab!bIWW"Mc(N*Y6*GYr336fl-NbIe]h9YQ&"8c$\/,!">%_)e
%DG)cphQPOH(EL8==Xu#5:;;.TS?uJmE:aao_jTN9kS!S_8ObAs1_6$Kcg\";?uWu!VoO3tGdaj.W0uT'4O#&dVHBgKM&N.Hf>8O-
%n3Q42C?MRLnb?bW]N).X)r^#NQ:'#h>.G[os6TH2<4;&$9ZW2sUZA7jSOE(/<p<E+Jo%L=RM?\&\6nP*O`%TGD*5k>*+/R0J6#3-
%*_/S$BAhD$IVWe;U.<[3^3KR!#7OQB%re\,T9Tl\p25BK<N?bZk<c;0LFrJMcO#prQ)257od3pKK*CJgcMP9T%,!*1Aih#_&>jhX
%X&h>JP9=sYI2C[1GS,GuINmHaECj*Z#Kt9d0audK8-456l[8eV):U8kHXl!&IY5H:!suIue)^G*<I0u\W"F!t+sspKQE@VLrA/:G
%8[V.tH4Xan`2)A8cP/56S/qtgMF:ru!)08g8r?D7Zr>>;J=^=ANMAU2bhqB78U/OL:$hO7kC!U=bJE8)i*I'5,92(\"R2-7B_EAM
%jduK880b$Pi2MQI7^XS,FmaI+;CD7j#B$ED/d(Ul,-KT[maWHZRnR4Vi:'4"1lP'm:Q%23YK;H?Jo8>p-KL8=.?2S3S@.[%So!SB
%P=\4gL@b'g58C&'GWgo)<]fO?OK50b8d%1,.6DG?469k*PO'"Rdl@1;nPaM[[AMLpBBtb'kYp(Lb/(ZRQ).<D5D03Z>E]Y$0*G9d
%F-4Vi+?B%Zb*e/eDNW)d&u0>g.Tc$4OJpZ9[;+OPP0Bc,+ENpoV'p=8Ek+Uk\&dYH\_JBq>NBh65*n'D="]hsSGC:gEl%LCIXLB]
%>!HoDk1lDS$Z`h#7,73XLHQrK)K(+u9TeU^H^-qe]gg<d9,0;(_5B`RH+cGf;pB=3]]8auh4!6FNMg[&j5q'8<_6d'.oS9VBkU%I
%!\8cH\pDT5okIL-h4StO2U&G/*tW:1WTA72L%.!,R3%1[j)TP(P417llY1*d!cD0sQf:P(\)41]jl!Z8V^!Sj^+]lnL^ZCRJ']:8
%2uh5G9II/>+`K\g^[?=:X_,'*2q(S\ggt6mWTa^?rnVHLK,YC>Fd^^3@u[)>2gLD^Rpo7o42ouP91R"'Vnc=_.Xl:Gr24"__cEnm
%gIkW,>5`MU*",d&'61op#!KG59-CViSb\Z2L*`=Ylj:loBBCf/\_/UUXBC&fDW,>8nK?*c"IbWiV4h=&5an?3S*>J!b"+mP1#"O\
%Yu=_&1fJk$f"5`$]eg\NF6+9XgLg6j4T3M$`d4aW2tntqj$-`F=nAaSWV#%8hknNBrLe3Di(D:+[$+hDDC7[J-l._>5)W?',K\>N
%f.!>>X&[JgK&FBmp4m8[LefL'S+6@;s2JmpCK:d;h<o>X=sh3OlQ*`<l_i^A"Ip5p.lD]ci2t3ZDp)"a'K"%YSno<ogq[2i2<o%$
%g6_SF_%_oD#1JZf)4Pn-FrQCl+1_Vk<bY\RYCA!2\-;&(;r)(Dlft$M^L_ldq`!Cc1JJ%Fj&<1knAb6&Ou;R:T&Kb=*8]MD+pqZ3
%h*671pReA*?KT8tU`a8U*7(->TO?RNQFOB!]fffHpEeT!T9Dl'B)chhGm^gF+)@-nR$liQb,3g1b$Y"iAl(]%lL[,u2#C'9?)C'J
%;2T4ZS's=OA]il,;!YRUIQ>3q^[1jb\TBh@+,3Fn>rWXgNiL2#PbF.Aio=R$l!p0<<!(@P7@\X)S"cc<5<e?k5Kn/:2D1%L"7KT0
%,\GfFV;fIqCIah_8a#Yi+"=3No:tt-M##k15AStR9mJ4i>-$9(SN<ds[+85=X[X3i#]+6QdC:SO?=aNt;HZ9d2_@r*q@EU=$?Eot
%o__HVX20nH+t85rkdAi,hQ?%ictkR<.(rt?pDa'HN_773M$$P3XA2%F>me_(Po@@Y1(@M4kd79\&LkXiPEWa*+std*KV'$Boia0@
%;quLnp?Ui=<goK_@\?XU'e(\@--\6c(i$(=L#8sh;H\V%5D?p*GVIm@]/YX&'+%k<2P!6-6d33-0,>p4AuRt`9!W&7f@)kXC(?<!
%/D_:)T4_$D\*5G9)IhjJp!!57PSBhQS=E$Y'j`8QB$C6WPk&ZPMirg^`EAGE=d4ERgFUXEbZM#(i;h$f4H#BF,0mj%]hN-:dL\2f
%&bWf/77kIV=kA\gH5<?)S'Ib(+_G&frcdeYbi>+[<4okpeX.[:kPO4`WD7[i3&,mnVjJPqr)##BM8?<?IUREoX?b*b3W%&9U3ZB<
%Be"Ri-iHa;JRs>l_:V[DX>bLKbegO=`3.c$]9Zn4(3XP'f+rOH0'lcH""fFMm<42!!A\e+eJ;3QJ(ptTK!eetX=^O-_Q*Q1>IF6d
%d+K-,[qBPL;CoXKh3+>0%D[Z9h->r0Kc6diJqY*pe0lIrQE"%9%e)4#8#af'`F,SYNIc(/XSj0h&*s5@Zep-hi)C!YfADWGO7oaj
%1g4C]@5)U1DlGTE6+,8`s5M;AZ*&9.pBmnfS<(K]MmUIp>cp;:2r3Z-/=qPN8'aMijHo'05q(PI4pkjVH#rX$'J5:N]\/KFVF--5
%D<e-q=n#Wqi85l/L;03s62<=GKhO-%\]GLlAh>jN?17F_(D>QgSBjq&U@GcS`1N'[s2ALG;p$M+fq(i/q3lGAG2o^"ftU+meS)G'
%OLcM*a4[GAB[<Pi#kF.i\[2DeMLARdp1*++5bP(k&5pk/Y3M@H6(;?IS:ZK88!suH(pcq()ImnI79ektC;%e[cq@kpkK5mCbQuOO
%QV<sdba"7e6P!P:'i&cj2^3.\gUT<Q[(+S'Z2Zn8qnKoAOaN)chcVhKMuDPPrpO=rGHq00`],OCJ*1hOpK#!6j0n=S;Y5c,^q.+F
%16Po/q9EZmAB*q"M`ot:T'p.7pSR<P):[uS+-RR?Y?bE,!+;pfO/PagSA>\6o;$)Ck;_S0h@n6l9N@oiXnK@m^=@maTp`nW%/#uk
%e<%P3pH)B2f$cB+#sRCXDq7(ROHWo0PYtG%g[>\X<6,giZ:0I`;'GfYWfX'7C_pZgfdr?crYNRL0alaKkQF1m';EEQ'7<mKU:'g1
%euAtgbt_*gCj#[<fR<-UrG3C5gdtAf%-m=6A\BMs4#M_4;paV*\(9d;`k?1B@J_>2Pfkn;)J-:&B^2LA2Pn3G`h)Z[F"-fjN,E^M
%BMj/El/G(>*L%]Wmej=O#H"lcQU9s?jYs.%%<n4S[1_+-s)(1*FX$s_/rRTiU@>H:]IXCCMo*Z3n?OIT/.+$D4Va8c\F:]B0N<O)
%'OGB2"'lUIDGk_ISoMM.kBpm=J93=TT"2!Hh7<hcgo)VUo-K^WFslZ!0,[L51+aP*JQ#A9@2!>rE\QeiRn1GP=b#'l)B'A%S!^3O
%q'3)XR.1iBZgT"%[GITa)d@5f36)mpBX@+H(JeM/%Hk6G'%77Na7KR\k5F9K1Z>n7NJf/<h6&+Zh12\eV_9Wn^,.Drc0h/D?i$&=
%O2Xb,r`:.=FM$t`:[r8'`Ei9q',&OfmHc9.'Nn#tVG[JaQ>!+g@@ZFQd.$e2X2iFgY?&'b%=4r^SY2.o,gVt**tXG3M`JSVE;+N&
%"1-"8g\S5B7>?!O1,R6P+&&!Ib95W_Tb)0H*`"T@ORo5J8TbG9^eK`S.!rZ;O8*#0X;%a-'AZD<\Gb#P!&Mj!1dV&sM`SjOA-2J!
%N\O$ac.po*gfmUq841:hN\Rl.m_%f^U5lLWA'>j((3PR)*Fhk0(mliJr)@=0Aj0."lnbPAUh[q'p\alg<\;QNB'qTt@D_!$6;mV<
%TB;Qp8&7%ZN<<SFpJeU@a+:-WPaY26r0MK>)jED"[sl[TVb(b1i29"JZZY'(ouc=[Tns*W_O]3AWVDd0Ssi9JW1;/X;jPiCZZs?.
%kR\O@)Off@L=02JC8]TQ_^#;Q(+$HZ3C@O.`S5!NXY^&WCRU9!n[,+&H!4+7i+VYbU_/hcs'\L6s&hqB/,n>bYsEl>n8m%HSG2?B
%#P2(4]QI"78JP:PHJ8<&+*o]e;XM_Hnlc`"-OYg/hQ?rfWQ:L""(.133#d';p,nVGdkGESjD+s[I&19$m6:$iRhV15gNGo@""\Lq
%LfYCXppmKEUO(b1;`fnBDROSrFAfQgk,+n*Mem9nc2FhXF"+tl75hWrjqcY*ics)mP#=DE@1Mn>'N?[4\OAQg8EUcQg`i:nUiX"-
%S[3383gY_oq+9aE>HQ%:a%p2WB0MYddh^WlS7H^*=EV7I\_HfZL(n@JidhNe^Z?[$%J4`4)S!>-Y/K>qR#C-"bi*UhVF]M00j_WX
%!?'?87b8f'i:fWXSCd`1eY^2XXgVT>omUeS.YDnk5O3$`e,jMkEgQ?>fQ3fX.I!6:2(G<Xc(u33]'<m2ah!ILF:R/uF/u'g/j3;n
%J%KOOI(q?'a(;7i_<^+2fk]3-O#UVR4%r<.;SRkL\Ep+#F:uqV9U0kUB"lfk\$2dPm07o2Mn0V#QFd#ieLq/AR?dt_,d@<)N7>%N
%SK#>.rl)7Rr';]RMWZAkFnh9.4<0!ER]/,AQkTM7[73C2IUEFA/UGLC:>qU'Ik#gqeB$D2V;#9^rKE&!&_IbJb9ECE_.[]u)9d25
%E2+6&c:rDB,1r37h]UVomP6Zr;E0)]D=R(<Wu9]K^o5F#-s?aBIkW9S`'h?\O^k*&EubtN\e=uOh\SN;6,Od,V`ak3RC@MXk.B9:
%_NA2bgCoW("+b&D)SI$oPFt42*XuiY0^_4p#o\cUVBLr$\sf@mniO89AKsb=!e\&SOLOW8DYaG-m/+hLX`s!\`hnh*k;^?`D:Y7f
%)B*5D3MpfcZgJg^d'.JL1N.eVhCm_>'41IRq=fm?=@$9+CiEF-Sj-]mkD(./'T9MdLg0W_TA0$>nQYgl\&B"m.@cmB7hSODGg@AM
%CifS`U4s2rV0Fu;>hF!i;8n$[5(tSPWMPYie4TkgK4`B@e(TB0h.r%Hc*<P,gNiLre$[je'=TJQ\uh%gq"&^J9iHi0rYZSh.Dj])
%In7T5D0S[mT;s_AKq*dFl$h9!CB#8<AE)12Xh-llFt7]J%Q6mt.fkJf\WoqmT'o#L2ri0,CQOkEL#R.k:WF?<iblVYe"XA`W,IkA
%6<SY:%6C=hB8ZAC=lXJI5>T2Q\Yr9g8r?=\,5?$/nm_`Ib1<B<DjHIHdYus.+j2j&Wn_bPgKB?c[)G_NrPgBIe\`PpinuE)-QTtT
%XepB-_@4TbXXehT/52Q/W:S%'JBUI@K;k;W,eYUSN8b<fH-=e)M[\cMj`PR]o$8;\r'M=Vn0LU9ZFcQO<btgRQQ]4qKhZ3`>0TDO
%Kq:$+-JEOW7BIHBnt5r/eY[+7?TY@`iV*AdNWg!:<a+[;P3_bPQcd&"oIkfVEmUccNfu(FHo:BEla7+D(]s?*eZ,gjmsb(Q`9$Z'
%,pNs&,*M0f!Rf!GLD5]bE1)^rBfc3rWq7t<hs\VCj(m=CmhhZ&h?A=TfkgV#dPk.JV/2@<Up!$M86q9lNHRGjYH,eHr5q!fY%s>t
%Aj!u>F<*PYR\:Vg=4J;>KiBa9C6n8@n3NB_/DW'EjdhI-aMUmDIc@gQnEDI1rI>VZp6C]2<2K.-\9Prbmj`hn*<\l(NS`DI!d-qU
%XNB[qWaV<OOeZ-P79I0^m3+q:>Ou[]704I\1]Yj\UI(1<k7P0N+s*=,_uK]i5)/1=n]?A]qB"V%:=2>A=c$IT[ZnO[OVJ'L$1ieJ
%XUCNHdG9h0Iei9kh9sN5o=MDN@]E2h._*3V:1*8k*<Ef6i0%MC>.p](g]I(H@9*u5=;p9j/5_f]`!6H*Z4n6.1sdp:Zg6!,oL@8o
%Ws?nlKXJ=]"r\XVJt@^M)!]K[j"\<?N-q[/l.:7A84[q'9d5/$r[03$TK07Ib0lbs;#D@k%k?QBDE)UBTO`4NgGNiTNOGi)VSQ`)
%;-i"^cub^+=r]@YVPi^oXPXU[654=N.,>r5TMP+HT\N%JdMQ\:@AF]/H=<V!T97\]b;(g=o.7rP0M40,6ZXibeZRlq)TK(OA"/KJ
%@4lr7(<1Z/X="s&>?r*3Ks=r$lec?V<DD'S9\*K>pN2%f%BbI@2B$P94F#N@QknCjl^oKo$X5d?1u6Y^CC=@[Ygj+crS).rniLTQ
%$PPYK1u6XalO+B=0Yn,1r#8@L`c5Z*Nli?QC3,n]]=.-(TgL\"gs!*DkK@+4l%PBt@ASs;Q!RSWKpDWh<r/H0`5:*N+&+]%[H>?W
%/o9plf)Dh.QqhjNVQMon&aQm&dpXpF!b)"7BSJlCAIg"q$B-E#?3J7U@m/LI>74rS0\-VArVLd8*)H0Jh!NQacZ/3jS7^sp*T0p,
%dm4ADRV9(uN1Df^[Vf4DYFdm_f^*m\l)$An?J+Uuc!K&h`NJ+*"m'*g#u[8G0uD5Q#VV/+_?g1]^fbjjMkX^HO38DqA_Sj%]kY*\
%NlRY1h(u&0iUFCgKsdLTCHY#coAV+5Krn\6lJH9UD9XpXSP6A-H)>?G7p4D^q0j"PJ<f=e.=,F!YI2e#U##1hH_5cKhXVnS8'g/C
%6+1:fr5!>(._7WpB2Mb3U8_ALU<+YS)W0kQ]od8Kb1KqJl.H6ZAgR03K#s'=3:uN&Y88m4LZ]?X=fSV:0qM)S7,(R]H@UREC:5QF
%?2AdKrO]`Q4U1W/19Ja3s5J>O0Dt#5%a1WuDX$d++-\!&s0FTT8N+E`M;\qc&a^`q2gau1*fuHpNo:.ROC*CZKVn=Zj.D>&<ZQtl
%s5Hfk)/($LK0[#p.ealJZWHXCYS7Vnen"s+/q-MW0*`D)&(;D9H2OFO!'#?cc+c-[Djk7m1LqPs?2G&'#A6[?S)(F>I]'e<nGtlT
%N#*g):bTbaS,>>A96FQV<e0PYDfGh\=OQ6&pPRNI`H&r6=(d+eM!cWT'+3[_Xn#Ig8O]EXrLH:FcPPTpa"0A59?6?:5!^rhAu+DR
%e<tf-UTj8O]idVQfar2"ZeY$C>)aCRIt(Ec2nD2mI-<r6d%m#XIm\.7-bisKho=i&WH,KE@g;"@%P2n7?7XnS1N'4S]H.6*r>LPH
%KA+:U.eO08B>ScFp12m+e1/.OYI.)f-6QrQZF)N*S+s-E6K%$cO>NAsM6CdVfk5sZ9pYCjdW=:15u=g&<-nk@g;W,#V\1c&SRs3t
%+N)82Mp5Znos`VqgQEMi3%XK^>+LC4cB]fCZWaC7f0Uhg,7ZmN$D<EhS05'!G:nIg"B&@Il0]<bOZD4]<g=3`Q09TTHiU'kr8uj8
%$Ps&?(&=5)+IfM3S'dVi0Ip*tE,4Y0IOEkMK:,K\j5;^Z+[1s3Ju4%`qt4,G>s&b:c3/-NKf!J5#F4+mrijj<':as"Tg!NaCV/',
%kQK^Zm<^lT'C[eDj5d/?eaCs+[K!*T=2pnG-4ZL^B)K7UPGH6j$'YSEBRaos&F3AHbQJuHT]]DShRJosh?4_b+!Yj1,51S*Bk.W5
%l%!jJ+K/]-oJSW&O9IC+DcUT(19sFpR`_aY-Q89[$$[u"i.`iHCAX8g`!ck:[TgG]c4.O8'qq5T<O2R090)RT]q>I.79m-?;g/BP
%fj.DD42(6Ohl/#8%!31h3KFHo@rOSY2cJH9?Bfph(S+_uksg;[3+R4j9p(@2>W#aIX&ct?n?%.d(tMX>IQQc/8<&']H3*;`1Y]2D
%CHRcKdKtoo7*lc6'5<M^SHoS:-ksiZjO^spTIKpM!nt[6d&>o3dukE;>I+dj#_D)4Fl%%cpUeHXLU72ALYt^UcM'Ra$3'?A`Cd8q
%T@[P7;PY67*q"N1II"A-;B5l"-8:J"kp`lS`)&f4nbo,-)%%MV=#gUq;>N"J-TW7>HYj=\a^#%[_mo+0c&9;c&L`F:FsqBsS7AJR
%3qqr16+^LmN^/0&q?W">EOAPJ5&%Fb(F*O,qUmT:-05O3Xiab@0]9L&KDKZ(#?8Jm6"d[RV9>XIHjI@9.f4?no`T@ViWSujE,)od
%DFhcUd-7t@3]OYPH@/0b(]WnlB'pRF[!;u1\Ep7g2&$Krqg,@^-p<Zr&YO:Ue8P%q$CF"ag:elXbc$s)>PG;+];9ti/t)YRYX3Qg
%)mZ,HYisL97QJ1#;_B6;36Q*_(6lMjHVbfX2i_q6DmqG*<TpfLEpu6U[.+FD84gp#F_sC,7UfN'f@lnQ\6nqgfUrTpXZJ*"nK&_!
%OL=Pm)6aAhdseVc9%DsMg/@0>'(,++O5nZfP"0Uh>"ViJS[">?fFTJ6%eKU/Inu1=O`F>Z`L?PmGYMO>cC=1)e(Ont_t0+##0t-)
%`k5oDj0i;!aT1SheNcETQ>j@SD?F^o^>D*l/iAWYJ51\B.UspsH/8U,enXnFN:[f$To-m,Sp&pfm5E/\IKe=1Q"*p<`aVtb[!P%/
%6+u,LcXSU_lnR(*nap9U?9ehSjf%+#.Y"Ft2A2PerT$;52k8+ieW,CNkh`P=ri7hYdbC\c#<[pWq;u5WE=CB]_KY?r8(0C4;0ShW
%:?j]S;'pCkI]](kFi:mh2p(Wt]b2<hD`$!(Z(01c)%&.IoMXd]lA`Ah6aARu,t=nVU#-&g`.0f3Op`mNPVBB`F>U,n:F51jY:r1S
%8jBX]6PC<_Tc':M,Il\'C9(YAIhmr'#KD2@%0iLrHQ6HRQ$<+\j7HoU8%9+Z:YGKcUZ[[?S^s6perMPW2@fMZ=o3Q-"gRC$7"?=F
%cr(6H7Fd18hA)>)Isa@<=or<kMN%&q&J#V6J&,"Y]b++;fHK6N[Q?#@K:F$RK6n[9i>0":3tC+82Ari`'ZY_.L_&J(BuW#g>l;4i
%lLZcTMQcGor6YGYM@LZlNtusNJijp'Kpu"E4FM+UU0p`q2(=7oDbO_BqR@VHCAgUQL\d7^.ns*N]9<l==O<(."cV$=(p,/`g(9'0
%U_#:7,2/e[6otNu+Cb!'7#\:/"$;>P$HJ$8?O4Q+j8)siMfXMZE<>iA0FFDa=IN,M4MJXH+nVSli\@W>Y=[.dNUV6n,@:E(3mX$p
%om/q27m_>@fBIC0<[Y28g)/3)<NUZZ.sa&RNY^0Kf8#T9#S>n)$2OF:q/-aA<^>ZkPGX[p&unX5%oei2Xn1@\[ACf>jL@$$=0<2a
%Fbket"B6<[ECf:?EAql%c)B_i2?u',dN8t$9t+3M<-Tt2+QW:\E=lHk`G2.!^pYbQ<[F\'dppcH[eGEIHr`.W*$rUdOped8k!^CI
%Y:O^=<lWKt`]aYI5G7,,>/hKhGr^u6NeX9q-;tGT.3X&?Ft,Tl\e@HiH>FIj&,o,3#8.5]>>`[q.YSAngmp0oLAdV@E2bK6Ne<6K
%*bt8_nR/J6[2Veo],ZJCOoYWZ3q`]O=:)RHMe5*MeupkfkMh$?[:9h[I#%E!5ehYPlS\V67*CtYa"YX.:8SU<,KGA">>8LP%sJbk
%UB<g"GiP=^&A&.V;ouC-22I[u&[g@Za=90bb?!f@;8m]((e$A.._!;/?Y$=+5QN/!%+*M/@,8+q&&Q^@!e-b,Bt)m#Q[`=OWYh\i
%ls;3c!7ZX[+H.bh;[El5qs>*@+TS\jTRG4taokEi/miCW&Zcr.<'!d)$&hT&9JN]$"c;]uHBAPGFDI\G6WgSdk`,mad:cM*Z!KKu
%W8)*p-c'1];hMSh&mQf-;s2)E0lK)H45K3>(m+i2E3c*-5kj8[9`g?e)LF#[_s^iQ#;A^M*FY*430)*/4fUDeR7_mZojaY<VqN%A
%CCJ(&qraYJ)Pagm"`b8\#GXQ0CDcDDa7O8H)-lsMkb-*9.*VDK7*P<ZKRi!,RM//kCLntP8-2<93<8DPqN*62f<#fT"[1XeBEEY1
%HAih^!6c<lqu:PHP+*H=f(oAKV_bhgW**Uq08;a4!"/JQ)\24)"7g?Y"Aj&^f?]?/@X^(P*!=l/Q`m_T"OXoCr<-!^?PDc+6s"2R
%rP6+M:f/TNbl_HL#Zi.dl_\VS"BOnKbL]<$",U8GPciE$&Zjl+L5.7]!LoHkPT0.SCT2ZfP>cX_H!BlVHVMh"itAm,KRWFkE>0>l
%#ZJ$BbAdplEj)\%pj$_8(.#BTQglQiaO$/]dSX1(a_N.7NYJob!C,"o-ALu5K0lV4]<7pXrN,?':\]^g0U#.,<`BAfXSj0h%tdV7
%Ldna\`u2D2[+"Oq(^)@<ZQ]lI%'Es]eB2*ELdebi^$(Qt:p8qbN;nkbj)-;X]CD;Iab>`1HG**/:ogAh8s*VZfHG^!L!j+GPXF`p
%aX%5(icbG-,[D"i!2V1Ri]f&JVUFQm]&-Hu\Rj?!JKej+icjp%[aI2AC($m-XA=R#g-(n!bP`%Us(q@n2Y\r%ePs=hiY=e4#JInX
%"P&sr:Pl3sWWEih"#PQSV:WS8b(3HcMQa55II?hC%pJdGhLiXc1YmNU&eWu;(+>f7#32,jI'A3q5"_jo+]RbWrT4hYf-N5-+Xj7u
%bV4(J;eo0JTopiN^Y:gZcJR3)+4mH7JqY>9f@:fdm"giB@ps'n+I@n^8&5gd-QQ=:TQ31"-EVs*5H0?X08b_/N(Y!-pHU1&6Q"De
%G1*?Ip<eJhJ3=$`h+].E'@8nQ5"S;\k2Oth3\6;CM`AT*EB#V'>qf4/L4Bnc^X[.c00?9?G_R;7^);@OL0h>U_D0'[Z,iB'pY1(#
%Xqk7][,1/nc<(D26ZI?5XP"8Br6Yim[Qr<FX!=E$$?b1C@PZX_`?Z\QN0/i`bPnd_md,qVfEXk?1gV-6h?<B>i'Z45P;t.Q(9ip[
%A:gV6VG?i225q]NqhSlDrHra9fGfYee_>'E7N=r;k],tr3r>@K+@u9qO&F"8GHTuj%Sl*ZJs4B,j1OX.l=m>YfIAt>SK1I6FMX6j
%8t<ic>Il\K-3+S9-XNu6&''dT#JC`q`^e+u1^a:^N0NR(V1?)+)VhqHK@Y^nPLn8Z)E4l#C"-b9WlWlc0a;KZIa`Ifp:M-k.n0a<
%TrY%GI0hG\R.;=N&G=DVUbTpCEi4'Jp\+NW60Q/0<.85^b[4.[P3G>e:,IR-3F=0%7D%4c*W;uqgoUR'CXq.HS%Io\UQ-t'N*`S/
%B0/t>7l0?5"bm&a"4qgR5/&gfN<rt?SQ7\Q>l^+shkh/<j$U(l=Eh?=Nuf#X`Eg<fKFSiLl]TK.<DIbVJ!(uS9mW'1<&^'g!+Lf,
%LC*,D6:esYqV1_560t[mGT=g)*pc7O=b?n#%\,u_PqsGB#h?Q#9K@:*Y,lX02QmgB\m`7]YnSL`9G267Zm\l=%NYXsd5k>=peq#D
%MrQ&nfYkTqh-)RYYJ>-6gq[1@eKhEQj8A>JCDDBX$9]F%JbeZjiQ%4cdjL27rHG:qN/%XR\a@[;j)X1SH07W\cK`iQI*KuZn(VcP
%([ZPggM_8,m[MN\pATBF^YS.@SPi>BG9:LqGu%GPKs-2g<V?@bk3'tKmB+o^GJ!`M?\`@(2tu`^,h.`Ymc+'.^$RC-36p-I4=q@)
%R7A&\F6uua_h:dYoO,T4YgY+MrKK*&XK?(RXh??k\9GLSe@sNf(!QQQ\ZbZrV_Ci=WkLG73SJo%X#b0+J,CgDP0^c]5AM6Vj4!_Q
%<U&!+7Q8du.BG_sQ^2eE<LANlX7QQ(I\HW&eB-7MlgHa3\]\=YdeTO^<ohHA6<W(?[_;A#d4#S/89aZt00Zl'e&-*Xh9,/Vgm\-5
%IeJ$R?B^Lrk?%L6NV@R0V-GQUYF"gHk1Sltp4;aQ-220IbK>#-d@4#tkWaOmp;O_gc#VLP_G@S)@Wh.&Vq0@?hs&YYJ(^cKISn5;
%+$=nWelhgLTA;SXp^IO3hVNX"BtuS!k1`\dfk1%WA*(i3k.9%:lUf?@f"4p,gF;T+.p!Zn3+TShUAG^,c?U*`VhSC.W9)WZ@'[6@
%A8,m<aOQj!#1N'jn%j0rGO++"ERhDb!Nq.4O7p8b:;6CHAa=3pj+`#3mh:]X[.s\mH>5[YLMZd"TA$K<\5Z7F=3L<+&C@nO4]VB$
%DniOED`oZ-=o$F\Bl(HOR78>2Qps6R]5,i]Q)CH1nS.<rplaV-X2Q_SRf6XN"UTXUXuq,9>h'5./tRlM:7l?><kc<E9\^%2L@Gao
%QCJ/PE\B`n5"-l592CQZ.PRjH\s"Y7d;hSao?=R+fO)hTPJYq:6?W7g\"`=U\t?=Thn8Xm+1ura4ildr$e=:k\*\++2D/C+SGE0F
%N#2,=?27;ZdoP>fb]h`m;W6s+=haU[?JhhB*aFs#e]/T0iR9H?F&ZjB'=u6A)DAE%H]MO"$Hn^$]K1)8=TqV)HL8rBQ"P%6DbSSX
%g\&$7:O75k-SKfE@H%J,2ms?^)=KV1jA<mi5mM[_^23=,jhZZMAa<Jb/cE(oO;r(bfd[_%7NSb9jBCF'6%1*r2pP[M$l5IJQeaj-
%'2fKNWY^"Dfs;J5aj&C/Hh0mEWVSB6<OY^ekf`]bD_WT\'s[X+?;OgOfNuj1g.,5`Q+]j?P#p"_pFS-Ya2JAml8E<WiuntXD`N;e
%=mS2=jYo\4kC\4EaG7[ros]don*UnA<mSHVD"4Z[Q[+rFHa7!]!Ft`N/*-E\?]Dph5\"apn!tpV:Jk3d*HQ^4I!UREjhpq,WF1/$
%=.\i-_'e_AU]Fc_C8k=>S=I99n<Rld7XP,XQ"DVLIq_-mII1#Q\U*ja.sl=4mQQU"E[;]u?!M6[dRt,&S<)?ulK'8Sp??#2?J2q)
%VK9:EIIu;!Hs;qR&rU\c4dQp)ApF.9`$fJ04F)_Ur_)5*]KFHQGu3oUi>uTl:-R7bYP#:TZ>Pe3^hG!CedHUNGI>r'Q*tkCV3n7^
%E:heD0+7Q@R-E2Oo6t]Dag]a?o*ekmJR7V%(P#n449XSk=kVTt<l'6Omo_ZQ?iQKVrph6dY'SbSgKW"q)$'L'(@8lo_jpFoJ!N7c
%T:"#+!_/X`/WK-mH/g'S/?Yr;n$el/jI;2$d_D]ok^D5e?S43nn>h^N?YYiWIsUYaM$K[04bYeD45Qi?jJW;Y'*n2!c^.9@H.hd>
%Hs64R\Wc50BAe>cZuuc6SfPYFY6>+B^hkf#L`f%'#GPoNKu#KQk_D<->ZD+4*QADjUJV!tRYE8f+VCj<gbH9pd>0ED#.kDK;Mau'
%XF"/\F^R>/k2WdMpD:Mq/V&0=%"<WK``JAd?i%De(NShaC_:n`5<O6<8,8[7()Nl?EbdL]Dp"">:.3RpGBW%n!NH5#j&<KfM%sI/
%kUR#MM%<?EN5R\jd]eF=i(nAaEAd8$AV54`7Qdi9N=U7,icIW[1;$q8JYj<m?;)t'L0TiXeHe9X>tI:j</WVm(2].PkThJ`a%2p<
%doIgjj3trJ3$-EBmO@Hr`3LY(H22DML53_bV(t@nYoDso>Z>F?YC\\=E7<p?-oA<rn!LVPUkRTb3jCkTjF9`<M(O<e?8U)ES:0'S
%OIq=S,_Tl[oN*dpI%3?Fqm'AYIMA;;*`1DIrklo;_0]MTQ+lV"h^I<+S3aW]#3Qr.Mu_Gs6Te;Wg-34Ejs"10I(!<3?[[:B^+C+1
%=M;WBktX>V=ZN=##ICgK`^?[?0%Q>\ED1Ve]DPakoFgteH>i]JUEqRCfg#=0Gkpo7/l#=4/BAki$O>G,T0)3Qgt&qR>&p&H8hDr-
%WV*U"[4eB-i77M4b9%m)IG6B?=&7Cgp8YhB9.dR,q*cHO>^RTH>SKH:k^1_2M!41YpE5dX`?Pc3?SMTTlD7OH_mZ6>hO2`-XgPlm
%oN)e?_Z1$QH0`@48R>;*/egSL_rN+4js%^Z:f,c*3)6Og)=lsk."cO*REfliLGoaH7+h/"7?/SIBW7`"DI)6fq6nMWT)Vf8RBn!O
%%*RhEf@qAhk?^CJe>#iCIBfP-,F0gNWfZj;[9mMQ]3cRC=uf8=E:F&=ZH_RXg\Tbup>F1g&:75PQI,u%EB+7Wku6>c*9t@8Y&7To
%UtbsIM:.#b<.fh?cIIOIo^)5dQ9WO]BskG!^3f9n/">\%jLBPHEgWt!_V"3cO6bONd/Dsn<^(hQTPqTUj,%mOjDb1cF_+;r%d5";
%mc?,%]!DDST:JOcplkf21M?r4=8OM0W#Sj_:f0,)Dtoj7d\#<O/qc!`DH%Ns'j:2RO\+<<dT5nA9K7o.qY]UJ]i),g8+k@RGR^#$
%C\@]'8(T3Y]u[lNgcj5Sh`"jJ<;Z,+A7*)4IZ#Yc]Q!_t&BijTW&e#Yo0[Z(SZ2("%t`*Be5AF7B)g[c__e&tQF8lGb;\S'rol5-
%@8hT_q#qGI]NY"!]<T0_g:?B,Z_(1(eMl;G#sNb7SFndIY([Zeb\rnQQF"!Yl?;@YMs$qWbGutWY#@lA<\$m`=%B+8g%(\,Ut+,S
%3re!j5(1-8E8u!#\-Cg:qb#ihZdhF>Not23(S/TRKVT(#c(3im"q<FM0j6Uqf'VfkEf!c%RA@qo<2[B8NFS?K)FLscWoe*QRSDn!
%[>tku'Yi`7L.kGRLlM<.%QJO/`eLpcIp".\%F)TX$E_,7qnlb6ja4,H]R9;@<M`N+GcO^FQgR1$s%G$*TAO/A[+;h[1rBJ!Y-slb
%Yr71e%g0(9cO\WKourO&K,us#(4g1Ec<"r>:W9Zd%mC'k(O*=&jZY>O0'k?X5-Vlsr<KPDhCeYtMrOR/LKZI=+oD5#;LIH?pF\.M
%E_cA`a%:d+T[&j#%#UYfcHdVBfgORn>qVFEeA&<OP4okgiMk#jJXG?)\%VJ$c,7D9U\6ET]mZ6h^4(HSOZba..A>T\f_OUhY-^eK
%*l,"4H*Uc/rODS=,EO,O!F*6[4:6N2jPg'tdb2<hmgE,tZ<Z5!^KPle[(JdM:LjVW]XW3*"d7j#h5oHt^)Sl.$#]F7>?lGi=6'8i
%q:.[PIGTF"^Xijkh?,ZCgp)3Q,tnYeek'I*EUD-oFnaqAQ5Cig\Q%2:s&uOBe/l<[LKJIP>:R:8rcf,s#rl](VV1msqY8Zb:i@F;
%YKE=>"!F)LkN+4o]5>3lfW5fh>9>[UPEqLt[S!08)SO1P&FO=ICkcKb?5J"4r[!=Ycg5j;q,dC$cNXM?m!X!DI"[UXgC\CNqcbUf
%'LSi;=Q*2+0,ErIN8R&-'_S;>5:M#-^/_-#=]']#)#=!aSO3#E9.OA]Hf"o#2@m+<Vn9'.Jjd7;ffNl4gYRC%?-=:*'OP`rk1]@0
%>i<&u[,"mVqIlS3Zd,JkX$YA6Z<mG?oH"JnWV<glkQG@GcgS3BbCdjFBM"<mUF?!8=+ic1okZQ6.Sl\h`[E;+Y-Q$1XQ(<u4F'u+
%^@%_ZAud*EI=AAac[NGRjgQn'T&5$lm:O')X6aM]m,P;(DbkQTdT3%X6O2uK]t<#<Vnp?\g[:S/.<EEa7=FtdnI&mln1lSt*<.<T
%g"NFo2ccM243u=3I/C/D53/"1<jUGt')ua/Ofo;)hc<PLZ,*'d0D^CH;.XTkj42b^=QBt,:@,ThAmT<0KR3MIX5d5KXo\MU_1G2M
%oul:b(V/=P)./Nh#Q;O2ceWJIot48Z>/($p%7oRWDn3m(;eoKK?Jbp1G4gCfW(h+8N1ThF@^qWp6M7,Vq4Lo.`)L`cqru;LK@6<W
%gRW\`H\H48P8POQ*r+-@A_\8O=3=U:)3GiZr!"AM#KsRrHBmp5qcZp@lftd[oCP<KEJJ1JjgP*\6T6!/Za@)D3Q2-n0=2M`$Gk;+
%9I0Hb;2uK2',cjtQ<gPtGm_C9cI_E6Q89X&Is/65osB-#Y*:\&Jkq[)fKuUoeIVB&2eFd[XhB+A-:8_,%7(T+T1f%&81/Ph[+?jp
%XX6`TQ<>96?B;D;nU:f>nGY,rb#XkK9EV?qdN(9d&d25"`Q%n7!P\6fiLNptRui*8RrJcHf'V!/W:NS:X6S#'Y<fP0W5\?)N`F_\
%hYnjQ='HO*fdoiZn$hVir?t$nPp\4K]SJ-N\=l^/]!HgW1(CK3C?*Tmo=0jYj(Mr)]%%+$NRoZRT.d7UHG08g+O?*?>0N8((XLX6
%8+H@\$u,<eCu#V@:ZEL6p8HZ>em>PaHLS$\"/r8LLj$Ymcnl8kjh(46aE6il8k&L<q-X?rmJ5-NV:1pa`l!Rnh1)i-&8=O3YRgH>
%Qm%4E1tMjKS#=5jK1@GrL7d)#K6t0?qY9VF9O5f"RMr%0B0Y5/WgB%3!W(_fa5[mGFno8@<RL\1%VFg:pOa8"8i3)0eWZi]bO70<
%H*ptj\$75g>mXLlX0:8c0^\_FoBr??Fa(D[gdkd&/\P85S(HLR\spOU_ZiqcZlG_7l*gkNQXle^Q%Pmslt>/Gp-m1mOSSkEg4'Su
%?q]=Wp4LY`+`9FqXN,X?Hd!`q=QT=TH,gJT+.#US(Ei(brKGB70t&MeVNnqJ@39%D</2T-CHm0Y\dc<_Ghbtd6S_grp[=\bh6kI4
%$l/.1+Tqbo%!(K1V..2foBECC4Nft8?[f*3`>%\,p==$>F5c6(Xh3Q+o3aM9dn9VWiqDN42\;*4Y?+\Ooii;mreE"C_prr(W,A.Q
%9X=\9]=\"/DW0[b"/Ps'Y!'q=b!Q/a+.SP$IM9nJa7o.#$5]"VGAFVd=3Z3jm;W`dUrV@b>G\V:b0X1CAkJL>@FMe3k;[k!nmpLc
%>G/k>JB=_%F'NEr@Ar%ss*62rLi-0Ajc^/0IsdWaYA#@GmlnC"!cNCqW;ag[Y<JTQ94'mU0C]1c,>+QYR]@e_0dFt_Q!S"D*3$*E
%SHAQC/7k=6(Z!H`-&2?!2omMhc>=iHI1(&^k<?!+qZgNg?MC4q6IJW8-Z>N=B_f<AmB:k%I,d%\k/<PaEXG"2X`h&9euNtqO@ni(
%HaIonG[+H+Dlpa'REN1B]/\Zb)H&q+)obJ0<aRUQKRQ@GZ#\sm_9;#Oms=LF=$f^@o_L38MW!NlJ(jaV.IMNPl[r*_CXn<7hd*qs
%gU$U&"T0)5c,%H(_V"4?rYdkCBt:_+.[KI5/%<:+>]Z@GY?*,\+"Up:L0.iuoE_8hreKLeHhS^sSf2B!&ZC+a]uZcZ\rZ5s0E#NZ
%+G4!Plt]6e:)K#^p^-61q8UsK_Pc,bHSKLJ#GUi4Hr+>.(rkn>j`Y4;YZoGG%YOk_rq`gFV59M=(O:)s@C6hSJj]du%W+TCF&]2b
%IT!Ns1RXX,!sTFb.obc!`KUlSQ!Yr'2Uk@)5-n,Y^O0>32P8ec/:C[tUn^ic<HrM]W^[9:_9Y;`mN+JTZ8^XR3<s;NP)(,Ei.Tp2
%TjiQij1f/miNIKshqkm;.FkCDb<&oWm]Ul.I4M@k9./P)q<;r;lHR6?IIBo#j*gCU'JjI=m5`bi1S;!$QfT8tq>[$Ua8D+`mgA\P
%ou(:T_;f`BqKQ-:RmSRr`gffJf'C?WSpMHgq_l'eBI5s?$?$dJ[DI\sLIVr3:GKlGU-8!<jTkQYAir3OT@f'mkt!bJP?S^(nAa@G
%VeEZBd&X/]$X<ANs7:_5"H<pDghY==6Qfjf$[COp(6f8^U!E_-f2=a6n2I,6W>9i:)pe#^f#=Q5-6MJq?&.LIhs_GrYFFBArpC#S
%QYg+$#5$EK0$!_6d@8l/#Y:T]k`_H4n]/GK">nUN@&r>=D+XAU5Cbb\bEd^58$0_Y>UDZf2EV62f/>NP4F2JJU)n,ejBJ0ecoLYI
%[=3=06U$BKBt*ooYLhd;b8BGeK[8A'$[@0F:&=C-2slm#9okM_"\m^1T[dDD7/KDFdeA[G2MqDarfIHIeT"EB-U>k%B*MaeRl,Te
%_<\grO*hnX?[E>SI*_DF>53c'S$'c7XhF'9HSOR]o]`<p?sP8dH??A1iU?m#a-T!8G3F/J7eidr`#o0G`]?9WS!A<HM&kh%*&qZ0
%qXhPF(+Ng.R]S)T7^F(?pXh*09[cijpl]VrcW*^7i:2TDI-JLq=XmZu_/HFn\s>&_#],dj)&Yfj>\MZXN,%US@_2'F1Mpf'm>RaN
%?E?`mS;a;VL/Nc?YuWZUgYC>c4;1r+N.\<#0O6>AiY^#FL<MP5-')?6N393"[i2^@!2,o<*!9E(N9_'"@>gIl%?KZdD2.=fCr<RZ
%b0=$0%V9;p$tX+0l.Hs1JnmWOO`=c#YcFU8):`_g<8Gj8.b`gqX:,MJEKfO9<OPj3HAJ_Ykn:Q5kIA*:2*K+c3;?ls%Q<Ph:XcR_
%BSFW?f,sb7d1h\#"u+FnL8h?AWifa)D7Qg0giG?tYq9L]M4]T`Q=a`&``iOC*SWj!`EOAXKIB-MiTdc_^c3!n$(H$87Dq&cE@(mU
%agDNjgL(H9F3sknX3Mu*>/k_Zm-J=Xc#J!5?-RPdaajWe*0q$>icm`(=#6f&";\U+T'F-Q3]N^gj+3Fu0T'RI/i2"]2/KQSStS4s
%=<J/%0/imbQGM#.R't$[!nV6!]*$4c==WNPJmOho">!W2V'$lb@]6n(45`QujoGLSD0'()1^QYck4BWtN2Tpq3c%\g*N'*E2HAt$
%d\OIcR)Cj&@Oh^M7ahf69^TZBR\0hQMpeDRGe9mb+Nh:_g>##86c'?B!;V:K#A1;niHqY#[Y:g2*?3)/'iYeRqbW4=BIN3icN:t:
%EMY-&]#=g,Nm=FDT]uhg<6#[[B"OKsO**qp7F=4E_D?`T320o7J.U-O`ZFUP#BX?=e"Hf%%'2;XG4Z3aX]T<\gn5uP-b+Q.U5U:X
%#n$&,6X^loNsM3:_ImONf`Wp;'A*Al+$d)>RY`AQ4i?:0O0sS@(`)k2_g*@QU+ai.W+[B//;-!WA:gECnqY/V&F1I`&]KJsL(5XJ
%.g%h_Q<(5R(=?a=ED=>Z#0>=a/^k/5M-,ApBn<W>&arQ(iM+?p&sK"PUELM%b[_Im:mR%Db,7Yu@d"m,eW`V/$j1THBD%4:&Gp3#
%UDM'&2S(f*'1k%5Hr)=nO,6'G6,pO\C874G2:r6ocr2,_1(:C(Yjb8\EnFo;[_\sqe^H51\nSE]9/VGs+P<!T7*:Na[L(#C<e6o[
%h<"a7"[ST"_\FCg;hL:GL5gp21e<FsK*FCm>X5Q,Hbu;,2U2="LgGu*@qZ8[PS=dj@;%E)C)%OKAm8\3fCBn&0sngU(i5Fo4`2"s
%=pGl%d>3o^#HAg!;asmhno`%Uj;4*lqVY)l(7#As==E2cN8r*smgNf("dFQ](Q6ZDqdM_VMqMNSTuT'$9uDusj3U(\5";<0/bTT3
%k1L?he%u'IB/ebTla#1t!/OaXE=;rdl@<#n>/1f_Nkmlr7NH?DW@?4sa?^hgA5"s;9boj?o4np]lD/8XAFF[1DICU*m)jDUrQq_b
%W5^`bS<7,mfV@hn*1&Hb7*`2J=b/][$B]Efcc4lJ3=&e@dd7WV2r^-\]rL$?,CT#o-U#>9O7;sUWLPY%E+5,*Q[sh8Fp/i@Y`2!t
%E$LBS)seK:&OShn/X47LNWj%X4,;`0"tA'%X6:8==#hn:S:_G6@PRK7(;;hmHQoUoFUFG-eSo=M'@n*)!G^%fboqk93hGPN5SP..
%5@KY9n3=0SA2mm5P*l/,l)LKG6(DjkqERD.)TT7Yf+<$XSY5(*=`0Rh$:%;&l4X?c*4BMt2-M0@bV8ICHPS7C&7+O']L3Ss'Q<,(
%i[9HVk*e5<MFQBHL#F[F"q4=MNg;MhMAo&o1HJF:NZ>SAGDi^3SD9hZO4/mDH!1[*1_-?E8%LBN7.a@kL06._>sQlC6icD#"q4Fo
%+%Q*#%E:)rNJ.0E.1.7+3L]>E(2Be4X`<Z?RRUgD^WQ3m>T/Gi,"en*,[WoA)QoQ)!Mdhg-3fDs*B5^A,?eU[6rb"J.[gH;='4Yu
%/!(jZ=OiO*"hAgj6>TjC/)=2g[LF_%Z@]]%AD(FN9Ho5_NC9]b92#Q<(L%c.;I8"<TpVmCaCh:+Cd\Of'^OiodK4h?>Vp\jjcX)c
%mGSt=b7686#O8,'p]I-.g[bV)DMd=YLcQqm(u2ZV7,>+*P>cf:c$9:ZAG2>TBSe)*#;-kJZCFLpC)A0oP<hb@#a1*<7njm*s3Lm,
%;B(Ei\Q4fN;<&sV7,bs!';LQoAk.Ne"0lipjMLhXI2Em70od1t34CgVO4!Lq0AD;V,bu$<:[E>71+K1>8q%E7'9O\'8I&]A^e.HO
%5jJj;M&=_t<Hl4_8t:>VT#6LlVjIn*".0?P,%K'iJQ+c`&V.BY,#\KPVD/BaCf*p6'uSM]J!h7.ag*MhRXrC\j/<b^`\]i@0H7Go
%X=[:\F>KACPt`+Edi=KcgD7b;6dma7rQ4q5BSA$.RS20f2//O3Rq#))=Jdg1n/3dh[%eCJ?g-$.DmY74CEXNOAAmScZ4_b/@#=uT
%@o,rT"(ErYU[2k((T%;&U75\BOe83co%q5U-h6&D?s].*CfM2nM!<P%eWF\(&qCN9F1'+J9jIlOQK-*8P4#7M&G.64-J`]r1]_Z#
%E-0ZWBL:`C!_)'E5^tWFe3tkP3FSun$*>Lgi)hEE!LRJe(<`JJko<Pd3b#@lKlEY/.U1r4^aNs#-_7H@]!B\#).B4)V7MfSEP38p
%4H2H6'ps*OrXdE1_Lak@n67%#\dTJ'BaPMc=d4GHCk89;%LE&.<7.DG6]TN6.<C8p_/j,mX?iRgRN`M&V'WrE5,3q(:`Zi9%dj=9
%?tn75UI0n`$?qp`lTYA?hM;56aKK/hf/6Q,`8h[KM_WeUMuuBMOAh?8]=+RT,/a`<)i"<_-ZUugZ#glYRt`:7%2T/"N2=>o9Gab9
%>`^"7[#eTF,H+SR!iKsHU`cZV2Af24BY%br9pJ-[%=k.-%3uDH:./g6'P1$qbrE:c4I.m#+;R=I_<;)6>3qaZik!@P%%T.H"B86Y
%+bXl!dW6DR1Q>KM$F5Cp;jh,Ig$5;go;J;`Q_d21-uT<&7i<FM5eo!k?bkO,GUES\A/&GeE\Go5\B2[(..2tCo<[(\Jj1sM?3sGE
%McTOV?pS&Pj!G6$VV%\R7>I?`?*_o;#uk3ljOcAe:BoBk/S9MhAYHKh5\s(Q9\P.4$'4BZmtQjar2LpV1s7*!`/5.\Fd=KN8FY#o
%]IY2O.%4U@"0A%BS?ca/,XUEN9^+bN:Dn_?O=K/oGq:S.]0`ICI>YBAGsbDo.Z,1:C,oOrG:au^OF2,<mU-dJQ6E\RlS@o%-l@_/
%#?M<P*7$IP`P]&#H`A]T,`&=t)NLn/-dcFrD^W1.C6@PV,-J@OXMd0c=ENM`"0W*m#StW"XcB@=@dYC+'1\E"N_cnd2)NYGe28+q
%K*7Xk:3`Kp`XYtO"1*q$!,;S9CagT*'ELL_&hoK/8_h8:%`Q,DCrK#Yk>6tlX38>gar>2`6-*L$D6&\u(O3*AT0\b`)(RJ^)Ysu*
%K4%uK!ORK61u<noajXc#/R(As_JCM:9h2t\=A!C1Ld`Hq$Sr:9iu$B8oeN?ocnsPiP"@QsE[%OF6V_/P=D(.8d??q]J[Lk!;\T]C
%1*m$kV6^f+"B-enj5`Q%)bdo[_'tLR_LUAp/X^L,Ih=EB)$\[#`<m.PC5^&tr#hcq.O,d3((,dq;lp(K4)PDK;OCmM(^9#.e1j,0
%&G8AGdVRXOF"-Fm-4A",A?]?:5#`OsCk%O6EC;*B2gP;<0m0%8M[mgJ(!kH!R0eJ'E$*L7pFo</lkNAlP)MVakZVNnaCfN$3)DM\
%Q6H1"X6YMqKetp>#Q^bs<1&sf-IYr/2GfKX;*&g[[Lef[h@asE5KAktO:]@rZM]I^KZ^I+./fPN]jdDY;+6\J)eKpA)A:D:*)0HD
%JYf)7kSVeiGNp/F9EaOR.jI#$4Yce\Ej<"A`>LF_K?Z*'Fg/EH6W#mjAPUu#NQ:]32UAlZ:]"%QDDE%WaJ->IC75FL?!W]&6)GYu
%,ktJ1_%m8]3/@'Z@k&]WACTKFRSN]`_:GGojkV@OGk,o_SjN>;#<g-0gH#RG?r5NC@u8(`QpX=1kbS*KZ,?mo4"T@1RV]&Y\L&8i
%Ygl(tcNPiN,L*HCI*Zr7^nds:$"F#,Lg-H$KJ8h3XgUMA67`CF.%qE0RK`qk@?Z[CB^.]sf]ot[p,''#Y3BV):"6HA!-SUu>Qd84
%qW'E8!<h^8LU.QF!Ic@h``oBD'\4uU0M.3CmS!Ne;)W95S0CnIOt*ta1rLTL`NWag)ZQ+u*Yok$f+g=LUY=Xb)p).QHD#0.`6"+$
%WdmYY2OT;sM2_t0K*5!U&7JL>#S.)^O'BG5g)L+F/dd5j[ZPb=YUg9O>;jM!Zk3?0!EfoE((1L]<:b5tpJ;`H6jj_3R1D[><%"t*
%^*eJaEAZG[YY;EL["i'7YAC?F,9R1c+:hT!GBcC%_=/300l]UG0G@taV.p!X1=21g-Mi*Nm9u`nLfuYO3-]3?B%/r$P7.Qb@]EbO
%L`4tm#h^B3Ubsq_afn=+2"J1B)$GCtK+XkKLU'#U$YCM$0In)IBS-08`\82\LJ&q>BJNOG/1-PJY3?XQ\m]"RbWisR2%c!O`M*\Y
%D-#nC;'Y66$(Jq/2Im/g:/QTLkps7i26?6HbpKpRQj8`T\W/qr`Fi6#?4%GoLd!N<,4J'],s]Aa:fERiHD#55OF^kZo'mQ&o>Do/
%Vt/-&@?WKt&V3e1,qAJCR7b(Y::M>)WFR6X@]ERqkF!Z:`M-gA]EN,5VR[ZT`EI8VbcmAbBK#"bi]rTmf!]RZ96f8(72p;sc^%m=
%d,L_bGjMd@`=B%*L1\i]5btPl!BSPpJ?*_H6cVO%8DV2V`X'H"`&Q``qAl,a\KUjS$KO`F.9TC<H)rZW*=A)=/.k_&)+b;R#[C%-
%+qZUf[)OTU(lBQ7oU\U]6b0%aENInbdZ'Zh8k7Q$25!)>'-r@_!7cd49bf1iBZri?1*C.[e\U4?p0eX0:DVY\;_`9u/=-fCW7%&^
%R^=4Q.R#aN@#^Gm64fA3mBj5I82WA$*\fK5=RNCIZjgjcTh(Ujg+Y",W4K3udb\E6m\r7fUnM4m;N$<7LnXX_3?6g8NpJ<`!efu3
%2Am`-?#1cS`g]^=TZkGM]SYc9);tp7iS;HZGMD&mPDf7-E6D>e)r\F7]t?8]jXj./E&FBK^apFhk(WD9^d6`-f[n(?FuC@!`e0@t
%n?*ud0U@N(9t8r[MHRht<&^@_C18mH$d2,c)%S=]n_An2:ed!%3Mn*3,LXB5-cK]/KdTqZ\Q-eW4h3)J_)UB+fUiW_qC?nL6UNe!
%,A"falNe:h``J@"QS'<%I%q\]:kTD6.*;N=RW+WhC8I;]>(m&;0pX&h1,4O$RML:tH.*BZ6=``E4q(-\-r^=&lCo6'^r_`f6\CE>
%O%([3Ia"fn8+K@Wpm+ZF!N>DjFpp;X9hH:G.].fH5d"to0c:,2Cc^O%_D!4nHXcNd5h+dA6fO7N-Wl28L&&LF0QSeU<JtPk<LJtE
%cil>\Y",D+%%IU2&V>.ppOWgT(4.4FN0%CMbbs)K9I/.8TAkR@Uo00-3qFR.r!,<1_c&DODCZ-IaX<a.VoZcM9V+[k,W_\&k3C$]
%)f^oU"l^c$oqA=U4JE=-o7/`rJ3:T+gQ*%jgK;0Zd76TIc!XHY>sL)u.E[^Hrl.E;(u%O8IuA].f?aOK_8UR::_U\9BYm692S[E5
%@;Hij1uTe0X:`S,:tCA:#;49-D%UlAS`11mbJ5TEhnb*u<eDq.N$e#id2?O)N/(FW5An<;@>84115lFHC:*R47`oi6iAW<4H"=L.
%XGChO1GYX@OaJFLjtKFGb[iVB"A3.4DE.3%`%tX1U=i/GoW^Z!+Q?nC)m0n[QFb%*YbOX`_r"R/%Ta]=#)uO1O@:;f?uf3kR=p>D
%mY//T3nYefnhBJF\B@#jXC%a'_\$.96o\(2A/S5cK+6Qh[k^B*;m_ooRA(H[3e1_[U/Y"'UrktY8r]/S&qpU$9UIk%S/i45MJ6X@
%S0,9e^LSIA`bpaq_[)k$NPf8E\GsK3$tUTA==$CH/+H5(PgU!&5";i@,4[!0ksPq@$7*9rL"ir63(^"$iZ=RtP^[3:0em>0?j`;C
%SUqBKlf$^&c"2+G:X?g&^_&/u#2'2K-oMkOifj<:R?%r:E[)>)LH5#K7lDu:do*2^Bnjj2+hI6s&=?]DE]M^G`#WZjUPtQeopH?G
%nt8(fa<'?/7CcF[Z8pHT@k-8$0mVXs@4e%rB8IW?BQ>O`K2o9m1E8b7:"CH6*1DV4_^(.0USD;Nj;9rH?R9]Sa!M3Goa7=+7!s2p
%$3cR\&?^*="mc/X#s*=4N;#89K;)(R10p+45&irXOgh[T1a$rW:ZFuc``AAAE>ph>ktD/Mf9='_g/KdF6rBTeMPGMB"f:VF#$2p1
%f:n,;g6pq["bJerLHmh9ncPPi\tI'^.O+&LSn!RI_JsgU_ueWRRhr<cmY]fB`oAqZnD=`D"^?Y`-dGk@Zj2HRUq:Z>fFim5Qqqo`
%\LHTrL]A5ff4@35W<oSkY0!mM\'34nd7soAIa+"_?'b`6Tu^,nCsYp;ZN1^Z$^O@?keoT<PWFPG-Imqm%d[FjKR3t1DP(!2ZUFj%
%Ye'#>g9-/2^IbIKK6Aec6V-\9FqP#RQ5^&+2W$KO19^;?"rQpc[*OeaKoT_/jIR[[E:Eq@V$qEJE$#,tdk^#N+B2lKe*o1$NkgFL
%SjE#Wi"hU!EJn1"1th*V9N.666n?tt55>I5QHIT/"s9:*oj3iB,%*u0F2a#f[GafuU4OcMV$&F.i6a[DJ.A&b3[?BIAJ'n3Q8(P5
%mqOQ`[Y5[A\0Gm,ip;\VV^s6/7[:<uq'8YH/X*i/_(B%EYmCMY>FZgZ/5\Gdd@G=i"?(mA:#'I!<03U5oE^b;*F51l,+h/L0p8;+
%2n\>!VYWBG.HS8JDYGV*\0Far5XO[[]X=oI:M?uN)8'U;LR1,cmFW1Un5S2OYt7.\8/+oe'uWiM0ZiD9BiolsmKgCV#rK0(Nctul
%,^_W^I4%oH!Z>\e1#/YA#M-],HToC<:5oog$qaehQi\G7BJO_[1(9L$:P?n0pj6/E[liBC_9a+DA0TqikiPB&C6XVQS/+W\?k6OX
%YrJXNhdngRP!+?QaC?<jZDrk?D3;tEFCUr_nHSal6X!%*VT8gCZ+>if[OnPmdX[EbTGCJWM!=D]Lq?[)P/b@<q%Nt_j03uaQC3bk
%@?X,!QUCP-4RrNM8`S8SF=9E7]I)40nVrU^V"/pK\:Y3p!/7JVX,?j5_\K!X$W!IR38Cku)'i)hPeqR!MeqZpG`K;Gc,G;?nKuJ'
%4BG"tZ5!mh>9%+qiG9,'aB:Yg^a>7*e6t]alLPum?q2;Qak5"WqbS^PP",a#R'bN]n,Z2lDhBu2R2tj![t]?60K4)!PXOL+WR0DH
%$l3E]dOe=dXbt1@(XR+iltk\o0i:W;3/S@ONKTig+/V_fLDVCt!(:OC&-0mL*\Nd1Kc/t=+M*-2K9lY#1(0o\_Qf,ViLI`%&W9,'
%><!NlL\KBHA@]:Q.=uaV"_f[Z-5@84bn)0IP7i/Bipeq;M<T^HpEDIfqDroeROXJ*\[:nBLIYR2Nie3g<'9;p#BKUBBe42ndf^4F
%eWn**'D[I3VsRT`bb$V)_cmp?9r-:M,O:0jTA$-\Z92"Q`MC;F>r3PBFa,:^0g/D01H^S>,$g71!244K)\3uRU3gWp6kGlmE+nO>
%Qq&r/H0Do7-NJ;EWu:&i0UOn5id;@RCL6q/$A>j(4p.k7GsPT5[V0lDDDK(=UH5q]d:C\m@j0N9)D#mcYjTk0#+EMPj_[>E#Y_H;
%+sDT5G#d<>L"]&kI10POp;BICb2W]je:8"Ge"e%_X+6WkC'H;-YDJ6*a6).M&CqEUNmZgB6X(%l#GO8BLZ[',_cBqQCc*akXEm.Q
%l6tYK*]dAhCgGhJ9?@sW(mKi$G_`%":9g(EBlV[TcR2m1d@0&d$n`;+pDA=78dl24_oZ2q8]9P;$R?[h!eJ8lMgQ0_7LGH6+Ti%E
%/Pb9Qm!.79jp6g86mA_!BlcmsnVqMWQj[ke*m9/$iIl3]8+E42-U`(eR5Gk<6"kuV,g;HkC92UDXs'jCNl<AS`9kWT4:sB=<*8<`
%LQk'eP@M-$,e&3LgkdEqc]8oB9m(8Q+Ic;<g;7m0/(b?\'pE.7X37NV-BB+5<1@s=H[%^f>'4$cXZC&C@_W"W,0dLi6m4I&)L3;)
%O)s7d(_\o(-4H=O>F[r;0at=s&TSL9[!!F6i#*\4,gB`R<4_g-fC=Nl(N*$l<gAT%W,AWS"q#b^25*11N(Z&8q^,L_ged;XgCqi-
%/5iq9,T=i@DJ7tZ"(J%;'VF\b!nhH![rG)mU*FEBZl%k^$rN:O]0rN0FO2C6!b6;(8*:WVaFm7o#Rme[7_"G[Ysl\XAK\!.kOL#8
%`Nguc2It3ieq?M3%6TK$fp6K46Q.)p)HSe=6T>4d''Ci4b&pu+nu$fN6J-Ot-:o+HR,!Y)/Qn4E>lI-?T5K_,!l'LZ!d+?BA5Oa>
%p/H&0)miJkl/4]?Dfe^@*"(\IeknF:hDf3=rPG3s2J-f>#Ab"f(^E_W2X0G+6o(iHi]*rrWlR+jH[,:mY[QISF`GDqW#[e$dc/)h
%(EG"_6($Yh?jsAHC8-n$B`)tR@acTi[+PYQ:Wj?8_-mGY-dD[e,CY\@#G=o!L1dMcOsU`:D"GG_"-6CiFRdGLMRRZd5rQ;7$"G:,
%c?6Qd=CJJuCp4Rg`?pr-1,bhCUaAicZ,sBJpaC%233q)M9hoL[Z+<\).W4/UPj?D"#&9"Ylag>!^gJ4%7%brf[j(;q4J%M>EDrBr
%Ck65e$*e?A`5_1-6kHh[G[;=^`RKPu#YtGW6\-T7@VF44#K5r\A/Sn`@9O\4`+,"i;<I3&)*Z6/I8rS9L,"ugdlJI23EU&U(_bA^
%bH-U("4YI:+>/q;a7=);c*cO]5K"^bN7HKjf`GYnSJ)NtG+m!Fa]<4eOX!;7Bc/>-0h%;grr;>uac7Z;Q6l;0r=?UKTTB.V1(VQE
%Y>(`#kQ\V6*@P$%UD@I(#unm<s1\.7U;M=m:=;Z[4gKYOLnGi>U+1J#\oNRI/Vf!5<ZBU,V+mmh6S2A&/u<@tRQ]`u9M)[E%:jX!
%]0K3V1X<j(_&u??_,XJn:H!nkM3Jth#=1`3!dg/-=q;U)5l,4'<sID710O&O\3:R?4=L$ZD)/AqgduJ/Q+Ytrc&Q-CQmK"'-/'\G
%&U)<8M!E#Gg/V;5Wm.;u2+c7X8^B_Q(nDCiN&*Ps5.>+P7&jHSUPQLQ(2+hG!s2`WOC>&I*/@ra[jBKHcDWVW<VJ9^?AP8I<V`V#
%*O),G8?FS$0s',e4&cT:)h-:p?+gnDY@#JK)jr8IBYHD$G?inh>:hbEGD&u+ktnH"6?[*!9or<\]OT/Z..:Ndh;>L%9<&`XSYg3J
%>A:QB""anRD&QEt"Nmb!Q6-"4;k_gQ"N^hO9DrRLeoGORqd]eU#aZLi%!k+2L%BB\Zta<e&cl07*6*m&jbEa][nUfc!G[`J,hph<
%bn!JD1NKL%eW\e]Jui>_5gqes6?E>O"_X$Xb#$SMjR<8[BKs-'QN8I<[]8&kLd4n&XO@[7*8-X'FB.c=E-:]+;K:'K_X1cYS0A9.
%<Cjl+(BLU!grS11C+4F,6?YUFCBi>f@r(S@C0GIKKO8A[57PnAD/hujGS><<\D;&K.%u_b.CW&q68bsuCc=u4,2Au_^P(kd+@[g&
%ObET6P6nUU6O;%@?Bn2\]Tb[D#kkG2b0'C19N)X)Pi]_uV7"isdmuTk2't&[N"uh5jQ3'c1%obW=<6O<W5h3)_3a\ti.8fl!;02^
%CJL_b<M&,U=^tU=2<,kseIV$$2%kdfqYTG,HeTChif?7g]tUD8jaJ3lO5&m0#ATibll6IR^m'.3$,ncqo40=]o>V+5Vf'o"2j=2&
%n7+//7#Es'bs%CH)7jF$6nl<<*pHMf6Fi$U[BdDaTF-e$6@iX&0V2UNA@J4T!*pj_ED?Y9L"$d'"C8hLiEqR]Xf-*m[?m^mCgYTL
%Y^4M.MXO>(XffHVngZq*nRk+LM8e7fb*p+Yi"jIB3S54ir+p`7'J8B?f+BZ3:7'A<)'Ft[Q(o'nS[OH-ZF%ND)HnP^+QFi(,[f[5
%Kr+acBZ_=q]Qh6peLFmchkb(D%W/pf7$$/IU!T+UK8qM)&9l=b#XIs)Z2@#jJ1ah,&5ck_<=1`F8>;Bl7E:#Hl\D7(YcpY;5\?nj
%gn>q!2,9NVCq<)7)_YPph7;7@?#9HY4i[)8l_HMF==TFU2lpOKS=\KQ]%0-fS0!4/a:E<@(ne;!P%^4FKp0$PJ<ggD.%sc;\K1mA
%;%!p\o;_FYL."T18DdloWhKY?YK?]S,g+'4(.ln1luPTt2S.K0eK?Tgp'5&:,dOVW4N$#t`8W)_=c.D+NI"k[rkPAciFOhB\/FM[
%\rnh`3UY&po+d4I1af-mpjK+hS$8R&6XW/K=E/$p2Xk_R+4.W)HUN"74r-3Qpbc7cTjL<&/\%g&C.m'X#gas>3'`Yi8@&TMM26gB
%FmE61aR.gH3:/<As7M5%Hj)j02JIVF=L3J2Z,/-A84!Gub>;9Vh$t2Td480,`IJ?]<V-Wi.^\H0K4D"U7jAD8IC.TL7<":9lK,q'
%qGm\jn^\2^hV$fsoN"58#=!bUEQ&Pk,$Fi]Pb_)6TN:W6G)7Kb?HsaE*#X_Q6EY5Zn[_*8.iGH7q*J-iSY:%)SR>q8>nDie$F^$J
%L1V=NHo[ID%l6)rM#apq%.PdXr[,5u>:t9W>dBol:sSku>)MO<UkXp^8i^maGF;mS:X?;YRj8DMQb0s5F+!fog?mqZdD,+38gafr
%`UmGY<&oqc\&H$s>9-.>97s%DFOF3?Aps'XKE>oHki:^/Rs(;=IVn9-U6%`@O1Skh:1A\iT63$,Si40-]FgLkG8heQl%S]F5@j\#
%hLLP&]QB#hUWm?eLi\pd+sM3"-CHS/(g(2i.Z0%?p+-VJC7q7<eb'"pWlel05X7;><oNQX-p]BUHZeQS)OYZjST["?1?*:fhk9sC
%?cCIB_t'ETc+[qm`LZ@=k]5VARNG")GhHFl%AC`=U*%D=a@OVnEX</t':7&<?91$%-4+tc*qrt.%g1mTK4QNqJKbe6DJ]<86G&ur
%@1mm1T`L!8mWO6,d;6T:537?-EX:9j$TGs;)G%79X`Q)G_g5R)[k!EZB]s>BgDmOBHok]nNble6PcZYNIJo3"?pNG=aEE2kn7*'X
%V&(8jG1l1bF;RH_&98,SokcBZEV>)sX(>(<J#uBHPQ;b6S8,<q'n0#L9RX;E:n#[F,oYK(iQruFesdJ\5E3u-\=r4Qdq?kn`=AbV
%WP&\qB&/M8W[h1^E(pGaq_/==pG$ii0:a0VccD[\<7@S2l%nO'<8u'7U=/>8\Q).oifn"QKgAKG_u$i/M1DoQK_O^$B`;E@3t3Qh
%Y.S`!Hbs;2?Y@ipF&T\D^`GnoA:p=Ef]9.9=[$GV4@eHX[>KV[U6s1['L=7l[PG]bGjl=f;j'tLqg3B:9?9ira:.u/ao,q(f#[Mq
%$jNh6<Fd@O)T`I':f*>@#18i>C',DNqdSPT',FQcWR1i,o:!MR1D"ObG';YLkj>AsaGER3#:eOCG5K4C"'\C*Fh\Eh@Iu2)@p*$i
%8%j^R#UjL1S6E'K&G9EtZFESQVg;Qa8"=2MOj*mQOSlA-E9$B0Va%l1es$Ik?X6=+ld1geU*lrMfRV+!a_O#W*$jZ%(RaD<q1g+S
%`m.XDRNp%R$Xn+[hGHO]LX<i!WhIs$f]$/*'MenEJB4!P=Y]*H,[ZY?[,r%UUi'TlFVP+W%IIlnnG]1giPoo'_<1[5a/AUb\"6In
%QO"Vh!2h*9j'0^\C&?>4+V_GXfoticTF*bBHYh\L$e%h&*EKe.0c"mq6'pR+VS^H2?-uGWm2&:)+fnKs3=?#O!te$>o"PH%iN*;]
%*Tk)]@)'QmN2_`I!$G:n^]s+[abNZfoX]imZA?\S#/n<s,$-LmWgJjINK-iW;5&_PhraV?1uk6!]SQ6Mb1+T[8=BsQMlePkCCQ6`
%^j!T&%#F56&6)UUMSR`<muK4n"6Jc5Zm&=FJ^QYi+ZmV,iH*-"AoZD5"=:,A7EB=DQbG`:!HLF5aPW4Ob.iai!!M#:=%.+p[s#Ds
%61oJ`__mR,,+Y83b>;N[H*R-mE1DMuSVe[mR,XtOs'>1n+?e6*\>3:F-U%/`KQS<pC<L*Zj2A<;`-6KW@CdVM'/.U`MYoDD`:GPI
%$9]Pf>[Ps1em-4u187B^/[Z>DC0d9L15ON>e@S9fUj/<dBs'F#neFau?16-cE>A"dGW]kOcE/H+]GlcERM-tT>2LJsD*j1G,?-gc
%(eEE4Qf-"_WFRT3@N$IX]d`m^b@AqfT\)qs?E+<u3'bTKL2ieIff&.0C82kfB`nZ5<InTJT$U1I8^cJEi;tE/'>GY.QuO49Rt"AY
%*!NDDlKS_BoIr,GaT`M5RJGCL?j8gVS?,'r:s.<-bjn$'Xk+2Q^.B\SX\N+HIi4oehM*t22U4(;!R:&.;*^7#il?EN"EhVoP<T58
%N(c53l<O%fVH.a\#+2c>ItqEHob<p:#ZH83b?*gk8fEEr`+dCd!\!g`!@j:C7Y31c`;n;_U>I\_0%c-#Va]FcOlkur\(]oPdLW+.
%E^3J)`9[J`O>TM#+Vg%DDk#t]Fqn,2$DJ$)$meUa=<\VboFUQP5q&qUYtP%(Gh.0K2WsR.ZI>7pc&;l7864@@RgI'lnONq-HWAf[
%X+eHdSUC=*Ce_=;?49@h3'@S5jh)R:U',&"+N:mO&0E6poC>5"`NJTFIBT[ANT$uoC6XSX1.]2eo(nKn,'1MqiIMsp6u?.7Q'Z(s
%(Kd/4Q-R^:`>t.YN;*g%VZeTdqH2D'<LCQ'M63nG%#g><QsYSLb`X'Dr\-GU\&A3SXLH]aa(s*PY_*;6oOh-j;b46#WuKK)pZb;q
%OQQDrTc[=SO$bC:4`*g%J59DG!D7NHs,:rY5j2k<+Sa9HP2bR@"iSag2D+VZ!/2d4aKSW!En:ZO]n:p9dBk8S[UibKg6'oX8GaB)
%7hB.C4`*co."THX/W+;F7EMOmnVm,tg8mZ=I0G4\lUqu'8$M"65aZ?QB7W:-bAsq,a$@tBA'(!?OInJX+;)SQefqR,$_^Ze/78S9
%.q-g_,8h`KMn]%(&M$HVJHXgrZM^>u.j-$>TW)PB+]QW%bW;W.>AGsqc%Za.2@B"2g/N_*eJCPtbiZtL%:W3XP']<SHCQg$r3SB<
%A\2*][HXj1_Xf63.?m]%!Bt)G(b,G>mKWSh/5%0;fF$bqUogP.3rlY;]0kl8_>1Z47EZgiD[VIN"&rhlSkq\b#8<hMXcfnG=FRM6
%chQmcLCTk'><*kQ.X4jGJhO+C&`Q7.D26>Be`n#>Vj1JEX:UoOQ#,&Whdu4b?lES:@KucLG`<<<Y*_L?X`;GnqeZ<f6Le&!r3^TB
%QuBn+mNGI[^6bP0J-p5SJC^@q%8C%-/E0\.@q6uPf*ku*2G9I3-15c?>(K6M2+,0GOE\6"%+#p'\_b1o:NO*uCfXM-$O'ML%UkqB
%$Bj=,ouC)UU9H7(C6i9O\Lc8dm<2@f-WJROi3c7gbt'sIDm-I8JUdmt>\+'lROsX'0j!@#=>r"r-Y6O&:tLV).tDk7-M'_ElUPAr
%:\3C]6`J+:HPhSn5YOE%THQGJk93u81a$2fj3`OMNQH/k0Fb*)%t?'3jSc('aF]Yl29\2=3:hdL+%F;g#'*7h[H3RfR3KY@\.#&8
%JOnl,5ghM4%!<k,:E<:#9cH^b$,9Tnn<,Zr,SqqT"_$t9D_#`M:^2%2,t4RJAZ2ck\h/N"TpdCIB6";6Xo\)6#W+CmM_b-3e-LSN
%[."`rS;Z-b56)Z6KmGCYK#<dd.ah+MK;;RQD1MtF/kp2HF@N'D@R2^Q4;Z1upDWeZS77R[WS(E7gn%;n^Q-VY\"oB8(78Tra1G2#
%R=u9r.QTLVW_>t-O+[utA.oZ0S4C>P2>DC.Qk9tiDT5;VM'Xr6Qq]NYfo/i$09F)+"DUJGUgA^JTs9>7.5$$9X3T5;3:L[=(M2Y9
%am)JH>PUdp''$W\6>D%.Wg`)4J8RW@6&>K3X/4Ss\N+2kcf,S`^68Z)p6g\@VJ[<q64s$Irm%l#r>d)sNm/J!kAlZ)\0I(&h5H-5
%%2'7)pD"==Yp%;/W7&inAdA+7)3Aura_=mcn<L!@P&K&58Vl.Z[^HNOAi_g85Z6kD9,Hl$AdT]&]jPJ(>oc];YPR*6bOBuZiR?iX
%m<d1CKV8k%nJ/@Vja@&4LT1rOnHWM8*M<l5%mn!jc\KM4;Q%uRK,p5FWihp)dQF;7@sE!DQA]?tka]6;+Ud(^bm4nY5W5R=A`Q@C
%VQ:lDkePqq5d^%@93r@BBbXP00]P(d-l(ZH'M$32$"YJ<#^fW(XbrBa'YTldcs/l.]kT&c4QGsh_Kb'`gQcsI1P:/h9VYm1'C.oN
%.$[1n+=gO8p(3Pu6&P#B,%dJeRF#J";@:"]YUutJ?Y'W7<N[$aOGUT7%79%"<S1qh#4?(S^TLOkIE\Go</6i=7e59cL2n5p5Q^\^
%X5QT__rG-o77ST*6fR!2I^TJ%m#JeF2C7un\KL]$c@p/76X^+n3mrQ,*/EXO1F3cMS]rL?)3PNqc3u$bV>IJ;aHO*LAhk>7#M0ek
%Ec#gtK8G-$'lV;[gm4'4a\@^=jY;b@j@@GQA#n*ZL[4N9YCA+$i*Kk4X$GfQ/I^#L'J`%P1CAq-.R=KDmImRo)UkiiZ;1p\MIu8:
%*>)0`*LE*S%.D6)qc.R"b/bQ]S6^b,fk?mX%&UVg9AH/$*&iJZ6$[o[g`E.C%FOnEWjXG4"_nB,=FDnLE&1mQNP<HM!ie,]rIN?f
%asNN/XP:4D:6EU_@;5l)bc<m*#2+iIAYS6#p"mdr;2$e)SWNEX\qAbi<_OGqWX"hl;q:r%*C\rj<#6mA9336=Tjd(=Sdtr'otuH[
%,D3DCJRU$pDVI$igK=*O,pV^<`,EmgVK>=-%]qLp\NFf-7Xtt"SpRQu[SjRnEB!u0i6X.YAX*A2OZ:RAGUQn,&stSJ..;9+W^;Q0
%hV\HccTToZ\NX,WfWerd*S9>cYQ!e4pB'(<)\HrNXcW&<4#,^YGCfmF-`YqX&HBoq-`d%(5Q0VLrq.pOEZ<'cKS:C#4K.U.EHiX?
%.jIFdcd)$_j+?T2g@5.;9g]B-W<;DJ:X&iM-ej-Ha\sL<S\$!?#u&)O6t)RBMU]ND^H#C'!`KrGZN2YH5FaWfg)"Js-ABsNq(e-Y
%Xl-0r-?Qg1MU0WT/bJF[,QEoOO`8g,V_j<_JXMIZ7)bfPlH'?`D(I;M=Rl*8?C0W(gkQ3'5XiV\hu&VK"PfPU<!;BEBP%jm<F,GO
%j1J3+<C?t^\rH$NUO&I9i/N!H!+AtWYBnGnrfA[oEAObnX&3hR796.gT4%b-N)M;f1Djp\=]LRqS@f.*_/$"5W2bNt(R`,FM_^tg
%E%XmpLT[R,/uU,==k/@@'-Ed7Cui\'SJ?`<@a'IV%iPajpo@YDK(_)>8C-kK,;$@39c`s/9=g.;f"TWW-=m;E-DleHWKrUb$c0n,
%]B*7)1M+qZ@#0Ht"l5?!.Dok(6j"MOJWuDm:@DRBN^2mOC+1_bAM6\e%L?Toc"Z&p/-jCaVToVs)*(kOh1`HW)&"dR1Jh!RWRm^5
%YCL@Gr=%.kW,kn4.@Mnn&q&\<4e.k^64k]@J_>`!M7:qYG(SpAAVU!/,5Z,P+4-4XkaB'g0P_.M_*1R(Q4]I@l8YGlLnWJe5H3d4
%'9tM@<K4Dd0Imli$t:Yjh[J2nQq6)>2eA*`>>1)Z'M.SK]4"oZ-ZAFP^Fg,n.To5&cbRR,$f)+5Flg$5^\)`aPlGk:*85VD5"QHG
%=CP04@3Z/a'-U)cLL?RHA#.-Wl/t"t,C.Po[4T&KJT!H%Pi:E-9VS6)giMoaPsu6r;uWFpA0ktlhQs"!B53e1@9]4h8%';j%k\l.
%[TSJV$_;0TD@1KuV02$n$N9<^kA5PuY&`#\-d`mCAu?=!k>%Ch?N#.<#!JW,@$6"=HOh"/)6BICfW3-`Vcn7T'0EFup#^[`75"?t
%Uq%hm/l(sP+;.:O]Z:.D0hgpRSM:f1*V1bt>H")KEh@F_41C'&iA)(t]t\#:X-->LUAi/s(&(\q]WS[r?KcfEkj>bTcR>-e94i!9
%7"I="V@El/Vr[P9g;9'dHWtSh?%l6h450#E`%Wda!D=ccbm8Npa._P[,<)$/@@`+,$_jmB3C1sH[UrWoL/ZJL\:3=WdYqM'%)VL@
%*,$c86b0E,d,V5-k#MD)=(nrCp&Pt#eQu=c\YC/Vh@j(NTT7B[Jf-(>=elMR[*&k?q9n3GE^3/_OMe;P4-0aCJ1tFTNB=No`OaKp
%:G2b5%K0!k=2=/lC:0h_E3M4QbHSb#>ZXl51jMGcI?'N0ekb3#a,\$38b?6@4ZN9#prT[$/*kj?s7BrAmEj3u[cBOF:%5'iAZ5-C
%)mc^M:Kt1%n?b49Wd;-;Dtr](/c:f:1`G7gd_J)Z9r%+37Lf:e>I?(Tc^XT^heq$br[TnnXnD(I^#?_8e)"9cDVMtq2K%HFh7>>Q
%mP]"ATAI<^cl;5ArZ(VnBj"(lG`gnOlbGa"ZX[TqIW*9=5JOg?rdB6Fs8Ic;++ChM5!D1/YNrqoHt=uor:U`pK]3FL,A!;j5a2Ti
%oSqh\jpK"HRi]^%WWn'-iM$<tm=Vh%nKcjh1CAu>h'*9j`Z]78,52[T!#'R<bC`Ai`RDk%4)1-(=p8hA=N(Ql&EF\@D9M:DVMJ'n
%ZgUM?V`a`0E'6O2E+;om<WRTlQoK_tbEt7sd9<o-9m"?JW+T=8^X:N=Mfei:&e[NV=&<bOeiFi11I9`)aH8H1k5+1B^opNTZbPp0
%&_dC+dNm\Qf+qHpbke2([-8.(Mt&`Y"t2IC/`Du<_BBg>:go<X"MFLOi6t)'LXArLq%r?n2T5lIn"$jJ9;2Q96"fYh08skd=EjA/
%_Koe!!G,f6$Dr:I`b4``A22/[kG)R\U4ufrF&F&m`?`Mts)2bXd"`M_lW0)_.qD)hE/73@YBXD-ib6W;.mT]1DLtnW@SIM=P[^[+
%9:Ss/Zkqe.iWpF!:;J!h\/>i7Xb2@EiEp.AlXK*gY!)qn:^MIh59k?:&3UN,[OA(se.qY]/2Qn^6pr>Ql_-=HBCkq&,ab!)dHY`j
%a)$pXe(MEW,.Z"LjcJAaR/H'G$=joZ^1[sL-[<6%Q":.=0^^[F(:sg0>]*@Vo]9Rb@ODeeaT:Ws_smhe,/hP'_SZBg]elPE*K4^Z
%bd#PE"Z%/?o1<UuT3#UG!>QGe:EE>Dh#I:m1Dc\Hlpq*TVa(3(s.A&*f'm=\=uH9>B"K/WT@n+1c@9lPQ%nkO/JnBboVVM`5P#Z3
%F8>1cq"ql)i</Zfh-R5Ge8\VTpIF9:dWcalq]5:eGa.+Wq1-D)DN79#p?n"Vrn1coXZq51IPcQS/fltNp+3dT.PPf0e-b#-T+qak
%><f)jk_Ar8>QFf:H@aY>="n#n\5P-OV4U^B*\[Ibc+',X:5['1`:/[bNCUn*;Ds2X;Vc<P:F[?Nflg7RoV%mW3^-aIJ"PACT@eYR
%'DnPqqnJ_^+8Ho)PF*U^p+jXTk"Qe/6cP0JOJKZ1H%g^lY$b1.5"5SlmDSK?,A,k>0`t?_E<@1#Nlb[.B524ZpfbV?.Kr-]^Y<>>
%&`mB-HJ4E1kQ!n$Kp7W,EcHZ6k:V-`EBgoFJf\kY,O#HZ;Hi$lO)i[/n0BFf"?jll[QEABTMWBLFf-0jS!&nZBX#L9&Va#$D9^?h
%*cdaGYa2=Z/:7OjP`2\&@ZgbFl&k'V#1+KVdN=JUBLU[X6[Vh6W(H\?5g=T(6F2/DR&n*_kSP.%\KMjM!i>9+)Rsr)RnJSfgJsY3
%:.G&Z9KaknaN?#NLH7a&N)kW9J<2:?4?;1J&A*oR)*-)!@iHfEJHG2#3Q[L@ckT6[@C$Xq&4@57]M[fc<>:Z/2[eVma??qJ.]o-m
%0iYU)Wo\LKW)A_Je@gL-PDgc3?&rHCb#V:kN2T]f(FX@/PD0Bt\?!-Bn>jD;q(JY>/4eQ$0d'!i7_j)`6&N$NPn,!h]O@VMm0H[6
%f\l#m>Tbec-]Yn#=YZW<5lPd[Isrl9r1eOeDi,$ng:t:t-4"VQ.)[*c0`&PBB:+rb,P'#T&`ueWc\M_/+0[tGj10as.YH.d:EJcR
%\U!Dn?:"0a<7I<dr?IURP5fa"JV:WIM#`VhX[l-Og4jA#^(&[2Z7D&=K[JPO;E7+c5ocbC37*I*Tl?<j!Y1DW0\99d(mP7:rl'7q
%O_3UEY#K$fWY\_X(3S0g<KHf'7-/r(kuE52Qk53*e[B7:e%,QR/u-o47:g,1,5-epF>>E=Q=5uue,6/C=[-/13#@o^6!.N&Wl/$(
%OJ5/W&&8Kr<K,\TEUg5A(74:saB1e:+c'[M,k;$Pb-'Y^OOp`.9LeW0`''0B`@L1YFin3ClpO#uJ\5Ehs7oa,/AaoQq'5hAeSOm*
%8FnWs$X&1VH*LNnEhkWG16=@)Kqlb^K8;_>:t+Ol@d;c\IjfVTg3,7p!MOU<-\]I!g`tu(Np.g/X;Xt]ei?KHM#j"lkVDDBBm(!-
%%eGc>1,]F9MP,BD?2u&p!''iTQZ!0@N[SkQ_`bO+/#3,qJgR=6GK^C6gch@K>#DVsFX&;sl!.Y!&BKA5Z!A0cjcK`anjM%EjqS3p
%&Q(NcfN>mL(m<47bfXi")=nn8LdsL^1U8KJmMMs%7@jn?4Q+bX'U@dK?jSC:guD#!mkjj6as=Nm:dc=J1mE>Z$k<FGX.+g=>,=>^
%EEH^R3fk0bA!Pi38E_Dn.;Ep*"/r\1aN]IG"D:PiHbN%J0pCBec5$H,%91%K(]>$Snt:c)S0).o6Wbh@!Dj*n-tZq[\/T;paZ7R[
%%BQWYKMHn-fs?hYFI=P"L".8Yr@H%[_aY;)c\NHsb]()aWGo<*_qj+ocmh*Y-[m1t4_m`cegT)ZatkeUGt0&:N[P6i.p?&SWNt5t
%'a068:l^,gma]giE#;10_W"'*Xr)]qRJ!2p!J>#oA-%9FN2gjZ7Im!hirCS;DO1sIOUS*K`*9AXEt8s"S\W!u2*f`LmHE=`1=TFf
%2U7#.AA)!8("E&\6l`1G4(<Q@HHS#-=Rgr-NmPHq@"t9(,KtkcBmX0r^TGe$>7S9.g,=/s1kQD??$gRO)TtiYUgZS@_2tOQH%>[5
%OKafN#>bb:M@u@@%nQ"QB]qQJW&^o-Sfn\%*Z,Y.!_72j:)<arl%PEs=];#^Tr)X2C2sYKC27BD3KjBYOJ.9'Me!(h2+kD<a+O\\
%N@$M&;1sB5XQ!JC3#fT>8BP*]qiVdlMe(TqP4?1Ub.^F+=sRfh,idX;V!O#84ti)im7#Hq(J3L#aZ(l8D@N*nU`#L.TW=hI&4Gdc
%ICuFE;kg+V.jpJ6U4ZRtcf0Cq+A`8sRI,//(F+AY,20*)F;VPBW6]PZeKk.G^!n&$pNn@WA_KfSg.U2<?4,F`&h#eD'M>?Re:>Mr
%,s5<(\1r)!ad-&VS[Tsl>BIPu]:K;M/Eqgod?9,=P$7U<=AN)_7>"YK-V/lHM:]-:_K)FdAj.2+hUAISi$aPqeI@c^!)%Rc5uV`s
%57?X7OQ%'*rAQNm>KG(=]U?S01];bogant6XK[+!5-NPl7K%0jWXR=!LrSHdrEt(:9r$mNFshB0mjB(uPsoC"lP6)t0.)<$0eEAp
%_VFi?6Gs'7[2LLf,L)ShXGER\QqGtY/p1eJ4^J"m']I<*`]O8f3oM>6MC4QB##U4>&?;'Zfp,@NcEd&elSpek9'1j!V?/V(1RR_\
%p6g=r]%ON0pUC1s'[64\LZrL,.Q!&BrFd,fQN,\d9%@b''2&K8BFX4k88"_Il/j>9MW()L?l>T;*&8D(+VYX=.h;S>Tk&k?%WH_\
%<$@NngZQ:ulc_k)!9CWeDC2nmLCga"Zg[QS&S$\#o(o'()L'oVkm:3UN*gIpqqZWJkY]/*rdI.%rm2]MPZGR\*`.*)F_<=K018On
%3Ge_M/!iQHK*?)_\mLQp,6e9HV["ZQ:AqFqqY;l?A>uOas(#3JQiHtZJ,,^DrmO+2;[d#>s7Q?Jrq3IEq<'F2j1kW'J,>Qcn,N71
%s7-hsq=cC:<q>F]Gf>`oG^[lB*cI\N'5$gmI1T.^Z$#KkL"h<-q;0Ru^#I(A]ftU]Y.)aWhW8][`u"Z\OtUi8XlTr)Y@a\D4KW6$
%B0<?\5Q1Cq:#C-a]+j?c,-??meK#_nn^h=i^RDNSCY%;^6l8MPSEI/&]A%,Y'NNmrf7=#N-eBo!Id5[O+tSNIo?2'M`nUIA0RV?'
%gS_f3DEJ6g5p]t4DVA,f)&bo?pF#Xgm7I8"I0014b9Q5k^?n=VlS$%M(WQb1d+bZ0FF>u`o/StJc]<L#+"pbmR`J[HD`:2Votb#?
%!lMh.m8FNka(J"75KqUWcLn%f9HY^-^X\-hiKu_jold(d^&)u*J,A.h0RhK'];Im<e!?$8oDR:NN?PRd.L-s(p,u^E8jZG#o3B,^
%rpB-Yh\O/pj\I8<?iR&JX:AJ<EU(Esj1cmsJ,".p(6:K8>r5&97$+QocS*3;+nG(e!B'lg<(>s>4@9P+ECdc?,gh6kn`:?O>1i'[
%)a]S);eHm<W\0I,o_QJGVtJ*>IT=jP*kjb2rfm@%`s4h#k,T@2O'[#&k:3ckT"hh8]'U4n\p9t1<b1;`AE?s)j]5pR=_-VcAE?Qs
%X+r?hW'BBg7t9rcTkBLa>EPapOi:sq`B03igKE+!Am'JPAaOZ,[HC]DSn;-;SRnjW09>=\aO7E9dK^t3\$N/!ca*7,bM)>7CU^XO
%4jC;+4NlIG/8NS<X?Fh6G!!n$m4<&!Z`H=9ZM)ZsCU^XO4jUG-4NlIG/??7dX?On7qE2sdm4><aZ`H@8Z?eUUg?gG,ca0]9ca*8l
%/??7dX?Ot9qE2sdm4><IZ`H@8ZMH],lKp.'ca0]:c*DXWbNeIGX3\,R50pP2d4D?-Z`H@:ZMH],lKp,Q\$N.uc*Hn&bKB3'/'kQ'
%4O(0P43QpV/?@+'X?Ot9qU$iE\$N.uca*+(bKB3'/%;jd4O(2&4Nkn7/1]&QX?=b5E]_Iem49d6Z`H:8Z>u@EGAOtNXU`i%6*-;U
%<\,eBD&c+u(&N#;iO0V)HnOW[E>C>,Ftula(/KM@KAr<rY6`OBO];AEo"1ftV8q1K(?4O%Mbd28EW;P$8u=,+PPAsdck&Soc?_Sl
%&lj'PV!@f=TiX)l/A6B+@=!6'H@5&1>C"!=jhtL(".uLB4g%.<;,6ShGM/=pC[]Ha9r9/8p#YV8J$b2_mgjf$T#/eXK'Pr'ep.-7
%h\feh*r<Qt,_A5mJ+e=/*[GA\%\kT\=*.R_mS->-Z9jP0eVfB<.&KIe`>1pk1ThRg<%iHdqR[j-d1:3&!3at3@gP>)k4<JZ]ig)6
%&-%Xu[Op9:I#dlFQ,0^lmjpP]++(*;]8(n!1,plCbJ:7aI%:D\'#*;%7=8m@I9F#6VhGQFs4pSelf*+;aZn/M^H1n(<]`kO=61hZ
%DAB`f=Ggo]QsDhJAF?IT54=B]4t::I$720l!es'S-_Qbm1eDI:P@k"7;RLQceTAU-8[PLj95lU/5`5PQi>h);9a/ZW`]@+GN+bd6
%(H#JM*Df.XCAo\=kW_F_Mg9GBV-Kud72&,j*U6@@5ti'H#tY\dH;Q+Y2@?,j>SRRQ03I.oBXA*^L4<9?[Sk,^iI#Kbr"jC6N&I@_
%65ec9fd<!#@#Z6;!%JMcA-r\T!m9=Vm.)XP7Wbe*.P.iG)UHHDs*CRM]"Z%6!?X0mW\rsor5eU_MR&:/qXe/-38R:?O$cp;3S/f(
%YkV#t:r/c[TZdm8,i_#U^EiTf635$s:6/O+etB2HlZ"J\<\NpdH^)mfKA^GGq:t3j$InD;jlUnsIj0[9pTL*+Z/sl&`teWN,D+L=
%*tu$\r2?:]kJu[gLW8dI/3fE&VeR$?:YGp:EFIZU-=%ccG8k=p_6WDa@bE7+QubV9[NOXT`.k?o1%Qo0cW.`61B/Pc6lOF2$8!f$
%Tt<Xj.e*:"OgNa+(KT(U8<Q:rkGBS;(7deg&9@KUkgqT4i=<ee,A.O4#tT$<bl1Q*[d?Wej_PKLa$T&R=u'\$MdE@Y07F(q",/Uo
%Ze)Vp0VR37EZ+tB!4E]<"M6.=+_bk4Vq?/=7S:KnF<_F:&#Am3M":WkBs2>3ro6j,>.GXV`u>W<&7f#Gh>1g?^QGo/NX?&m#DR4B
%[0Oc-Qn)he9j)IlLCQX#;)0;iqY["4KY0It-p0ddgagM^4J<(,RG1Y8O+V2$Oh7#LhaurOBcB'"_.?d15L3QKCZZ%:4`9NL#>-oW
%ouOglB;T4Q@/D0UIY5#@N4Q\Rn97X^!udU+F\^]G:01FRg[k+GbZ;9HoCbr+.>@&?12egaK/]Kn0l.S=HU-N6@pMOR&_08T:?>uM
%C?.3Jj\'4Qj_aDWiL4XVgX?d&%N&u?12ftM3XA'SFPbjgLj@hM`4^"[[YP84abb@UlWM'\P-9^hXP?:qAgQlMfU3*:kpDfqoJ348
%ia)hgIMGA9Ig)EAf?74S*p/,2TMC>j!7gsFia.X>jZci+*Zj4,LU^7QN_URNH^Rmbk4r)W37m1>EK@Mmo[-1g*_;<kZh>_8"+/8U
%cIse6j$NuK=aNki1TFdJK#]U57s*-bB'jFS&k65.24:o9m0=X/bgBDD*jVb33_^otm@BonS4fd%agAauURUH=9&$s\!5Em7?J`CM
%AEs)j[(R-ade<7?8b\r8c"VNpmBnqPGGX\8'!kEPT!\gcg;pp,-gbJ_054[Sp&p\',jc3.\,i\,]aNhq]`VJ1H_@DF9QG@&*fFFc
%/p5=i6OgcW8=&A5]t@Xf1KVIdg;Am+NgOfXg<3/-LMW!H4e.q"V1;Xq*f,=slg1dU4VA%l]KDANE#'4,\4=sgMU$)9:cX^4dV(*R
%]lNgC+X.E?fMg':kS5jN"8:[Q"N*L?.p(";H<">a5G\tMXK;bShm3d#hI-bV,@rMU,`Bon8R,Yg2)(<^.=3O+O(l=K+:dJ&.re"G
%<'^ehs$t5'T]%`2Q*SI$%_XqGN6*'l,Z>98PW^E![8*X`XHYkAQ)Y5d$L?jr?Dp/ki;XI49%c;".qK7_^Lh%$3+l#K\2%u`S@o>+
%BpQ:lkNid4Zj7X3HT[2J9'/RbhJ"REPeEPTqsTWPQWs9J`'*:B4`&!:*O7'ZOm0?_q;k0",C`DO*o*$b-e,n@^)dm;L#;LpY)kE@
%%W(7miI$01^8L;YKE2tNPcb6#H!:mF8Cp5^`_LE2Q*(@hV8+nJPci'lNZAJb9%V818FQLJfCK&XG7.q$#sb*Wl"P^EgBEb3(J*F"
%86cOum0dHp(.`p]+FRT>FY/^Fjc[pK"YuYc8:4_dEF0jKZp;p*2icrjU;B'%0=)j.[jJg%p+k+@lB``&%u50JF8MQ5GCiR-HREp3
%lt)J3<&VEgp7CHM(6!IcEQQl1E$rn#Wn%&C$4eN^a=C\[FcB"n8&?=/1!1eL%p0r=bf\PTq\$&JHbLQuKL_Z_ob+2&-qCjT@dNPm
%=$aE(lCbKCZ]B2kr+nH&kE2p&7n"%gY&q?iao';']pfn[rSr0<hFui<B);Ih\61fK=CM)!HsWqaMu)COe7J<!JDO(^k:-$cc#.'P
%12WL%Q]>lF(6au;i,lX73T]QI+;i!M`p5q;bdMA/S6fm*/h]qnPEpaRn93+8'*F.Y`U37!>W_"B,;k90JKBspm49"qm3nar4B681
%CWNW#J97]!)?WFVKF^.tc'HB@V"8diA5OuQ1m:ZPJ>^*()1^ljaVfUn\TJp>h"+9c]4HGQ!VdU&hU9t2BoWD8cD\$C`V^rV1,-(P
%)PM%U$R;F1"b3nVW]hM%5P(@NhV[5-GP$]KbtOIb7,if=<t;0]4mV&G[gu7Z4ac78i-4dH3qacr`[<V&2H[.iM.PD26$.Vp*(+b@
%in?+@2<k'I3]GF(1@+^P#P54ULRHY!g#76cHG)K9lOT<2cZ]-a8k8mZb1c?S[<4s"eTH;[Z+b+Jr=c?chd<O!heQSn\6X?WY<A3.
%)*A\ljU&uu]6j&A/qEQ)]\o]QGnRu>D4]_8lJ1=Poss%j.s/[IfB@')^JAium*#F1LV?!!jaVE<l5LmV.n3N5o*9fr2)DoM7\];L
%!Q>$T64b'Jh/8["\'KK7aV)174n-&n@-m?nE'#H(5'['rkK<6m?2:A\&839*4gZN&$%$;LDJ&m'U:Zc5NBlr=O%"6DJ_S0<9u267
%0RpX43;hCOP^tas[!;&SE$@I64`@gU]p6V)lT[+`DEDk8r1>JKegJ]QHI"W2her,8lZ^6p=[IP$L7e?AdPtQ_HZ22uor/=ckF=SQ
%qu!'6%9sdW*F)AfkhDX0Hhh?<<gEt^XClud&>qJES_ald35,:]OQ6:`ci04=5.-%#*2Ksj^eZ5.;#51V,*`!M<=Z+1&[(!"48&F:
%p8PO,]7'LIrd=ThkQ5rK\C2&H5'Zq5p?U2V[i)dEDtA!Ng=;?n\<#E-p/Vm:Dnf5/5.-7&pYoi,!j37@LcsOQg[3:L6bD#SC/\U0
%o0^8ELsrE.Q\Y:NY-MC6\>u\@gcbSu8HBf]gHUack7V9NhG]k@oIju@UCR%Qh'9ZdK@>a^Q\Y8!a">7`J(RZMlgGnn/I<iWq9q>=
%Nu"&^@V_nOc8_LQK<1Jd8j`V7RM(*#.%LK``MX-kq*pe%&MDb7d@0"m9JdU_'e)V]AZ5bs+ZVLe4+]Gi5apCIOb%IB;MbH,n,iaW
%PP4C+jgkXQ8+<_?^pgLQ&W-Zf7e#AK\mkIU7H@ln8LF2Q+j=tR,2BQS.#>'B$=sGlEuh&!k<69H>#(f<P,Q%I3G6Aj+EtDo:j!c?
%'b%ZM5d_Bj?'eRsTi)b]3oIER@u+Q^X)4q@5>6]6'@OC!6>'M%N?pt>?@Et9'C$lGJl>iRb1K6F3'bd9+DVg<omull34ND?,ZR%_
%3p$^qZ*jIQ>@/S(V`G9;n-lbLh#63PJ7@KO6rLnllO^r&+uI@U"u130("QR5&&NXSl4Q%4g+cXLOG?cn?"d:(dm=)36J95$TTHL_
%^S<DE8$TQCb3Vl=fEer2e@>eAg4h`C<b./;m!2Ncn^uF8SguuVDA`:=&_^)h3%Gi[)Zj_'T\Rt1gOadYXf=]#@75^_LBJk=C\i_e
%!'>.U65m6-YEH^E[jOC"2N,1#N`J[t'RiWsXZsnl6)^)mTjQgfq+uAj^1;+kbeTMb7;0Q^FF=1IFCk_O<'h%f!d#cD`>X_^9lQL3
%d^q#gpHqZe^(1q)<O+7!@7<`&W)_B9J_!FWoFBakeh15NFHlh->rQXcTr-@`GbO(k6p>U`I2b9mWAM:K_@+A\M*'&gD>L!Xfd;?o
%=:BXa;&08\U-492khAoK,k!HWi/lKa9UDis.nD;/NjtKj@AC%nl6d8W3<TXc,_3=]XAeF`*YroR[5ZH_U:,`^S5G:mNhNn]l[VSY
%E*)W5&_a:GDu7Gn2SV.\Eo7%fJVhrp7GE$X?CanoMueh-+M.JN9kVlU_W;aiZJpZO+<>#1fJI=po!l$1=d$R`8Z604;t+tXD&,M#
%=D]iBEp#OmlTqODgiTum/KoXCkZt-]giaB.B"[B:Kl5X3DM/XT]`8L<m(TK:aSbH17rZrg6W$2Lp(Y$$fXCWH&`FH%_?jQWF))>5
%j&!)lSN/]g#Tg9V):`I%4"cVXMgmO?QW]#ZKD`O0"i:QLm^llBKStq/6Sc8=/`+t7]LiT4`5e:pN0SFjk;;Xu/>j<HK;]i%C13mU
%Ep*@:TQkX-<])W1JH?10gE.Q&$d.#b,G?lVKY=)6Xi5,j$GmCt_t4<M"e4/QLq[M+7j(6u`tcu9l=OAahZ7INAg/%]Y],q(-bUf?
%LrdZ[:FcmWH'KO+?Qj@tl4)`2.X$^3(X.G1L*1`HnWQ54HV[!D/=*KW=4F$,7R4#_SE?pe:nG!UM!@:'9A%e"Nhk_R8N-u9aa#ou
%&4d<E//[/^&2:_a1t<^E5Uhgs2(eYi$q8_8MAC8S;@f7/We2_5'chDuIspBT#kr;]RS4G9XA%D8"W&Gd"*3cF(3Mp=`!.YEQ#3Ed
%`8N9XN.++LY)*F]m>"W?&3,Xop,S@pOMZ[<Kb/H0]7SnX%1t10PUhTK_C0K4g8_GuQI^[fQadW3aL)5=J$@h6:@TML.%i\f<]B)]
%#F+GqhN3aGnlI].U"WII9@E9<$@W6G,k,LVecQU+Z&`g7[op>_rj@Jc:@9%Ap';/)aXO@qO=4X<I,20Ap(#G=ic"EYAH&ef\-N:.
%*X40HhRNk7!,rHgdg;^dF*]o6D)p-.-_RX/WjAKB6u#kGaLSN/SPeP/h5CNsTa]gN.le]FCd:>?S*i(AlnbmPIIS:U7MR=0:o9Cs
%Ch?$qD(82;%7,*=H[].Fh_pRIe13eL9\+aj*")+Ul5I,Le`&h9X8?"P^'NiO`L_jVom,;9-:,lE;Q3[0(Rp/+K*@C&D$+Wb.'ftR
%9Z:.<%q7\=-*90G+YS,)n0"<"mNp!u!CVJ@ML4)`i7JTd)8qiL$QQEHbXoX=+G$<'##F5q'-@j3ee!\B@i+pS:N*1BJc/Z]It]b;
%&Saii/`n]:9Aj(Ol=1Il%DgXOm)0T_D7]WVnu0"),pSOdn'/Sc+E=B-1Pr[`S]17Ef-TprPk,fR#nG+cWXh#qLj)BU&i_WYpU3`Q
%A3=#M-i4<BOAE6s>SEXD-&XTKg(_&kj.]RW+,C-&8VjU99bR;r8lr7HiKRrZ\3@ne]ePUYQ(?X,2_.'QfiYSm16b7a#;iRDcPfP'
%&,'l91kI)6?GY>T(J-cGFD67GAuqk)mZY8U&C(%iN>D:]Ea95f]g3tT!OU%]Y!&3!?F$`ZpV_+ulak@q`)SJ@2&;dr#S>^D?.Tt/
%Tio7h'STE?<p(Q6\C+h+hrcmi)nV%,R+j%\4;SaCju/tQ(HIK;G$1)rn9N($,>Fo9!(Y0NO-UOD/?K/^/pSZHUH)CiTA,'Yo4O:a
%OM'35]g4gKD0L9#/k'cajtX>tS0=W0OhcT+1W<cpi&&k`6,t>sWGXa\g9TA>&/QWq]/T/'Id_"Fk2fHg4RLuOYD$02m_(nd[t:o/
%Du<4)D<8-O,=Xcc[T:uI?'$m'b(I2FjSJNo@\&I(adRL-kEO2lgHl[nbWn2Ti&qs'0?:%U%o\WJ!_enlOWPu,6ai*ig:iPUWGTPb
%:&nXlWE*!=$U&\-jhk&\a5AgdQ@(`FmD`<&ra8gr6e-!K+L]Q5QVI"dWV1B0e<`B\VX)VMG59?Jlc-hTU-RMtfC)jKZ^89oIQ-/o
%]8a#Nm,c!mI-'e0\Y@7fp2]?-_bZmfp>,upr9l;J*W(IXp$W^,G.5+*]LH[f?/T4Lh0Q4Gn^B8j%RZ4n=5Te9aQr9rmjmnQF8Z@d
%X73_:_0L%W\lTu,E*f3H*p]/>#PZCHJMf)&"Nii%WRFcD%d!Mu7BbP=bC&#Pa^"j>M\IYRR:$54[,]@YTHFn4VELJWYp8?h$L0=L
%1T=g38;]NG_cA3O;FUmhQ!lTR<)['`7@"+#dkp'_Fu7camm9ECV;-c-4r:4EAU,OG]`o&bX)*P:3G`#E%f">$[L!_l"?IjcC#KAP
%T8Q]]]:V!mb+n!JJYe>MP@KW/kg\[jgf1)N'%]BaO`tq8ObO4A;jSK$Gl]\K["_)3dAr_a"@I8daYgnfa_N#6/qF$FORK`A=-?>q
%K=?KV[0Nr1*CTH"TNWFmo3pE=c4=541]QXARqc?R@3-HbJ'<Oc7ZmF]a58e`M[g!^_=VRkPOQf$]Q>RBX=tL^;nsh`@"_]@$(6]m
%JdMp3A[Pel#_%k<G^:>L]s+^^Y=6=:Ead8Lg[6Udq`]E2mY[,%o@Nt@?KLXg:Hc$TIY(s97D?W?;)%9"Cj.IBAo<5-:M?I-R.]@7
%*8gTEApAp*["pjR2iQ%_++H@_R_3q62g)BtcSP:4-cPf2c_\WS'IZJac%m7;jMS/'#g[&s;oT;>3_F,?RpUj?oZV6rk3('hccYBK
%*'&+^_2>r7iI.=-f2(/;`u2bV(NDT$o+0F1Iid)"5G"J>ImX>5hr"Fp0E:s"rO;h&huDrUX:G.M+9(F&q>^H],6e+6/oI(e&[?rS
%c!]-GHq4PZIH:+p(qjhW;n/3fe)dG`%1oNrju;k?Tq?d\H0jGPC5*uN6,6<I+Z2i`8!FKkR8sf^!idF_5+Z-_V(9,ApMY(Do98??
%&F]LdGkecN]a/(s_F8.aci*aPr^H,k$4M#r&.a_u3\lgC?I4*c8lBupV,T[59cE(=d9c>0#%qBTrjIf0r:^'@^X6Ue8PHDl5rT=;
%&&1jfS1iaX%[?MjhY6^k83ZtQ?-iJ=>h8]2)UF"[hl"E1a.:S`+H@h>L%bH"^G"n[[&du(+69tIU3>Y60TO!7AXgi0f5EaM['km+
%<Pfgp&pb`^(OrK]`1,rhnI']AA\84Ke#bIJj42S=;d=G:,(Vq6+<q?b=bp6&4@\m@W9=CZeH+;jb;W;nVG^:=KBFk7lkm:gTmnZC
%(.Oa$@!F>V'&Gcpe=bP]nlaZOPT[se@B2'Ef&r`VI,s2GL;hK`-Q0Sc;uQ8u#PL.Sg%m8$Vap_>^Ju9^o%,7:7bG,M/0grV@</UL
%<(;=JY_E:+)@dIr9tj=57HC.>m9,C/7-*VDM'6eD`k@5$D*uL-S4L@po?Ok>+:5EHg6(+rF3peW,PFu<&d!4]XD:(JQ\UfcDq`uE
%BrIJ8SJFn;fM.Rh7+AR1+RG'W8>$-Rc$C-Fe?kaiLf!8Xr&0PTh]=2[fUEILC2-/+[m#%I13\6SC=9\gSK'USRqoOt\"Tq]HDql4
%/=!af^J0N?(+RRVK)%Hi(c$^IL#(SWq&k,VE&i'SMnb3fs.u//hkYK-g(lX)^[8[Tct:..>FC/bVI+>]E^QLUN3JthNV$/%""IoD
%@mk\pFg6s7-NEd)&R?)uFX*mo*RL`fPJFLQ<_:<AV]@(s3mg.2"1lTc>.#^0joR\7OTN=n$?J>S]]R&JHJ$Q.PPacsfkgHN_E$Z>
%V.9F;nSJ!fo%ENe"U+a@#m%eF7)88Wd>$O2U^b(E8s$sH@Zl,1Qdbg0j+=l%a-&4W[&>n\G$,-$?<HOfO%\ejT,*d`VrdTL5Mn)t
%%DH%Urq5:qgYf\Tp8:.40!l)%>A@@QD\j@=I^e)bph@Prr,KhEnop#;psZO\i5`]=nDhsG`.(s<\*JqH#78IPl9:Dd%/EV.`V]^N
%gCiRh`qq9]9UXtO9Q%@O1CoKXkj$YkgUi?N3:b_9gcfl<55m5Vrk*1*I^S89r7tN]:LCi\i4EpBIJOkq5O@G!P"^@24^H4+EKBS0
%5#`"P7?Y7uFWJ&X+/%]Ep=Z88OD,C>pWZXO01GUlMuL:`N@-H*DEJ9c%%fq-H-/\q[neCN7ge<QJ,ZY7q36@L%g$FA45JY*P#b[C
%g[3jiR2L^<Z'UoF<`0OB_HjMbgBOq<(l]%9Dh\D-gckK0g4F4W)^iMYQ[<LoqK?d8:LAVKr;VSB&>auo*G+7IboY"qC(#W7`U%_6
%ch$4B!p(=AdIl;`HlKX3`0qa.U:B.5BlbebgZST,gPCrG!1e8]q&(S'93ri_5AhB^LjSb_gXEU4XJ^h[`nGIeKU.]20@T89IX^_Z
%[1V5D\*dSK?`jk'q:i=94Fd=soD^%Q7+eqFJ4nX?Or>p7GRLr;B#i2<A8a&f`WpTKo/ki^mUWOtN/JCqk]O>h9&f9lhs^:1Gua'@
%CXfj>(KpZu%'F[\'GfD?W;%h.+?Ag9Z<N=b4/kmH$Phm[0?8?]p['%Qd,.@dYOPQA^R3^cQ3"RJ13.9iQi.aeSMYgR4-FnXmAt28
%<jIu+Usnr:-Y+d%)Mo!$!k2A`E7W\nrVWtYm\K[g-H`GAQ8.l+)D^_Db6(tjSO@Qr4iudY[D1Djoc$Z!5JR<k&&1EgpOb7:HTN!_
%)YM-1</)2sS]F@V;*Y:Y$A+AO%k+b$%A;&QUVMH#60/1f#KZ0:Pp3$@>KWfT+X_fUrU^gV;=&rGfRXILBn&"?@>-2<_Weug+[lo`
%]lu_5k#t_;8>=cBb).>B)=#HB!0LmXiR43GEe-jp:tZ>jeX8,A)<gGtCBGK,5<4>h';%THJZGlT10&ubG=E>u8L#]XrS9(Dd((/F
%TW2*r5c>/[.-R/\G'^4g&C<6j:oM1</MTRL$#.a$JZ)Zc+9_Q!qiIts2fuuq0/&.7XbaRYWj5"uH.7@bA&KJC,*M\#*Y]p?-F,_p
%_B63Sc(\]rD\!&J_QA><:1e\s"b1D,+g0*Y(8d`9:mm$%q4N/JMX!L)9A$WJAqc.T0JgBM<T=%=!pZla63pOHJ6H2p':."Gg<qS_
%0VAm^&Md',dRoKbLh@kSjC%TV:`5IS3Z+-JmkEa/D-<fA_ab9%+nu'<'kUSN)REQ"X7/CVD%d2g!-t8S&F$],\V*]a5b(^>c*mD)
%4sW$VA]Ne8r1m_1Lq>&fs!k)TW@i08l94\kY_p)U7*ntR^_R8jm(WWG&<O'Rn'':c[+h&=E$ZZL,:^E`D3N%a!3pVcTpE'J+N7li
%P>Oc"pjkeTi&3Enf$'4NL62!8BMIN(Z?:(28C7kbeSS@(b=*h#HD3es.sbHaO0#)nZ$-fp#dh[]/Z3h@g!H83qWNs1,d,jB-Xf/0
%e`''X9%F<-Fl]YMdA`@+.&%PjU-EIH8AP:>,gH`^EG[!8AObI@]NgDG+E9lF=-0&1E`5=2fS@3+XkQUmT4+Mh?BVNe-,-44d0NQW
%VDOrsZkYita'_MShFl;V*!4845_QLH8="qB"I0!ZC^?sumj0E](,`iO]@8'%7Zlu*Oh1a0P<q>=lWL5\g`AJ%3EsS:cR*7!T7m=R
%M8pkYKht2HSj\^I,n_VO1P($1"h2__]*[c3O5cLfL'c5*9mRS2#enHZ**D#I2.sS:#ZZuV#.e[IObM*o6BjaU7$j9QEQbA,c(9Hn
%C\W2!G:02_!_t&'XN6sPEr^>s;7u"k,g\(rO;)sj@89ek(KZ:[d_/+Sl:"Y_10qb7:0L74]3.0d!r&+;b:'%)_KU[3P9`Q"nMgND
%cI,8qU?EI:<BpdcLU3'RH1(aX<p]Z(<_="1]"%]*(L9X)6<S4Zrb?UD5iV&P7&<;Cmj';5V$%O1;Y(Q)iEJaKOqh<S4_NNk9bEmY
%9.NTlG3eH]Q<&SuAS(Y3H/\m'k5IeQ%q8i8Su;\9T#2irlA@%7dVBW@0LO:,&-=-tTNJb8JO'WbPQ!sh&//T6>9Y6c*A#0eVLbFC
%$04R=2OHaP1kAbAW?kp]*B]cK1f>pIVH=Eu[3T\N(b$E2?"s\u:G\"$+O-Wa6:+XH:X\B5.m_q3#m0CkV3ZY'<>%[$it;#.3`^m"
%'VMu;C,(YP=Zm&@d\cW)q\+QpQX5ik8]l[+Tn%/h^S=ta)FmMC_Lt(UC2.UqU(TV4P"ZcQ[nY@'5g_'hI"R%DP#X&u_%kb-?5BQ'
%7nsN%BgT-W#ce+?b?>N>*iPO*!(fNZaI<[\J0OlBMWFaG,)=ilgT>L=<uT.j?\HG@o*.$/EM3[b3W6p6.52W*IUu*+$4NuPE]60T
%og/Lk>enn8T*D02^)Q*PC<U`M)W<sETX%mU^g?9)P?9[uO^#&7gDHknQ\AI.-NG'[)G8A8\1eO[YHVK%QIM/M^Oam'\u-Am,)C_6
%Lrd-kf7N$V1qDgm;&@&7Zr/GqFT"Lu]\rkU/5Cn;aa=DD"[[]*eXbC/RW`,U8-gWQ0Wq^m#kZd*8\)_k-4:ah)@9jga?>No&@l\1
%p91@j!2*WEL`=bYGG.20Rna/A"\I'0V)0&te0X=a[VX<(/jU`[7"T<B6,FB^8Ms<&"QgQ7[V9INYjdp3&_@dT%Z@(D?(3_p&blCt
%BJO2?6ar+;.dHD1TV,0\3/;JgeQ&>:dblk@ob[6X;hh@V63^"b?t@71[Li3U!0LbmODEEFZXTLs6<6nQ/LCYm%07ca.lAj*\,mjU
%++Mh>5+p&qW\3jn\kODC$$k*PL7acS.tF')r7W]2hlkV'gr1JeRYT2hDue-+KhU25aF<akC`a(*".@X'9+lH05'^)<q7@\7^P_;+
%d<58Q;W6:thI%=i*QP*+'G([3K#mbD9>dW1gGThI(drN*cmZdI;KO_JNmK524G%rJl%XHE>PbiD:..2QVc5u)QZcNEm8>#JRf?5^
%F4A5t2q4+19gq.UjfCT6U?Nllip@R_b<3(W9WkJ#P!PX]I;jC;J9m!o3iW4Gddr*q*i+*qj.kg<;+-Pt``nYYb:%uD#EL*-<Da?Z
%,2.^s'(BZ/^/Gp)d+YE"o2auq1@LhgLoW+q;nkr6A<lO(&o'\d0:>?;3Wu0>,F(o"-LbYM*Rn*d1dn@Q=6mDJ0@!Lo(\QRf\jp%s
%)QcsPp*K*q@;&ie-tkYbFaVL"n_47L;OF7f]u]J)W(YiSl!tpf?4'>/m#*qtQ'J2L!O;2XT[C:BYoJ+OCKKi_nc6f_)LogBHpG?^
%iXIFc\NsMU`2/Z?-;>`24uroTll_/62WJD+M`d6D`7'jm!RUX$87^7a9=*?Qg28/'pCrkSjU\tLdsY7^1XuYe]rCE/MDl&q1)I$Q
%Got6qZ]BBoO.O;_,hGCNm(/SH-@T-6LlK!e!i\!D?b"p@RWQQnEQp'+4dLhi@Wbo2<Z#YNQ[<Y'@RS?@+:WGc<m-jj[%X^4jg*CA
%.c]adDlq5MSPDT!r#tL[))V]l5[.(<(D,sk]d7)"n9<UDEtt`7*_*$9eX*+:DVO(F>]\Rr(X*8W;_h/Uer-=F,e?D"TcRk>0n[3V
%8I4'+kpI1jd,X_B2A1n`hoGE3mot)GoNnUq+FRqc^gkBpM)/E.$YGsnb7AjUGXc-nZD6nd@[&u%5\[>$PY'6I+%E8EX;]gs;29Ku
%gD7EY'>Q7/W5d@,CZsN-e5p")d9K=1,"RRt-5u"Z%/?7lM,*+WX!aTEg,N".+XC96Wc/+Ja+4:Q4qH7T:]LusR[['_?!O3F'j0H@
%C=84krNL%n7%85er1M^XEL5%``F1TKB?Fa>f"*.^?kfP$.`80l#Jlh6oq%D#XW$1J`m,9/.nu_K(_h$eo?Es6[I#:6a3NUBc0K`H
%PS^#\L/J:(<IW'r4A4"p\k$oL)J9?5K:4#]\))gVLIXJ#,'`0P_7iN)'UhbXR>G-b&m%;3&Ml(WYRAgf>]tHM/hFLQ!tlhl_G-qC
%.Y5gLdD(fKBpbMO6s$SiJ.,/.9^gZ:3UVOli;@X_ORT:hee\1a$Gq#d:1eb+VK+#H@P/03C"n)>f#Oq@8F#Zsi969<-GA9u78?V[
%[A<+t[_uf8Vcb6UI;m:H,a2t":`BfjTTW)5P]8k%dI=0%OTaT-WFG@PIWa*Gc0(F%L_i:'*b\b6PuF-`*5Dki>nZT-mGK>ne-EHA
%r/cP;i?)9"$q8\2+NFr^AO%[FD(0t%WKY08"N^^[UW1@2"S*0s"OZXTJ8$<`1n)g33RjE9U:Ns=8K%g=XV/bBk7i&YooL0tFF9Z:
%8^L!YJ-o@<fW/?/QKF>>?(O[dOShb%aOe`s,Y]n1(on3,ppc5UHO/=mG2%r%<p<VZY)*%=ji+3Xj+fJYTebQa%23KD/!#d91[nq.
%.6$I71$FN'13j+sVK+BW?PX/&8Z8IsnQIE-#fYQ?1eYr@&=sI!-Cfb^,h3FI9*a$&j#sW/^c]7=^hAeeb8Gun5:R(L:,ChDKeSdP
%+fpPrJ-m`D#>%<e5G6dlmi,>MH[MiOI3c=K#0dhOYd9DrN&LtS]/!Qb/h\2l*EcOWN+GQ6Lp3MT(lk75%=1?b4DOs.ZHSLuf/NCS
%T6eMO$!26.i`R96)tkq>]@*bf64j5:aAr.YOZ)n9n`)bC_&b4L8'(OBM7\kf[9^th6?:G7")UsUNDZ!aRF+j*%07"NEDG\ubo7]X
%*GW*a5fFm7\h#HF:d7Hr#-/nlMna$!B%5M>$"SA$_+@.f&.Y;o`-9]e@@e-foF!1@%/Pu^:b=4bSYHk;PQ.Y+72Hfb;0lSrYaZX,
%;dL[;7b4phKUM@1ZfjYgO(Lnt>YPkj:_[@=[#MAbK_(CMKjs[i9CVA&TW4+P`!SPQ'd.7/gP6r!0_$1&`Y"HXnX38JaeP:cg&"@`
%r0V='P0.heb(h_O^%pX.(7:Q>YEP4?'1corquW$D(o)RWSWdo>$p%(;&82QWgj:f/VSSRX&ellR<jcHf)"e@=54h>CmD.X(gBQba
%9EChW422.^SY0RbQaSc3&Cj^g_$.R?;U8_ErR&GAS*_"';6YdGApPKq;e;6MnEl]Y5[gC(ialr2,"2OC4`8Br*>JbCOPU0<(@Fb>
%7U7<ifG90Y<a[tY0Y,<ghc,mF:Ro6M)[L7^Au1G/LEbn38fKXR`^hXp#QMVJ@60M7LNR%!rqKLdF_LF-/SI34&nBR)_8ECTR0\sc
%X\40#:B=uBF[*:<p^IR^Fl0*BNjGaS9Zmg\X&!C@qBC)N^@4D0E$eH?V?W)CRI#@B5,t?]N76"bo<`*>AH^bAk2tFSW%F6=l2'm5
%>k9/m6fSeF(rC-NZY16OKJ=<S7n6rZYtggOA#e9G2XI0j4cH,8+CK#2)[<lJK#pY4q:Ca,KD3Gf"l:WR<Bea8O1-?P7%`CuGc:%i
%)KV+/JjDSmTfOR20T4tQ8mPlEV,e<,!'RrO_p[Bt>.TKD"B:ImfXs5F$Ni`qPI`F=rq8__ZB_r$naOpn$VGI9_NG';ngheb5o%Q:
%_",lq*oaZ;GW+2fPkhqjFk^rq!^m#m6:E,2hbs.Si>LB>8HQUL`XDPck$1'9L'=qqZYZCo8RQV>gSb^7Q,r81''`$A#<?\bpiOYO
%d6.p%:`'_P?*E'3OoN7kpV1N+KZ[NJMLNIV#Vu\,maP`-PZ(Tq@T@Ab8@W?,oFK62(i>PFH\4cLMX5E2"&/<YQ5>jV%;NC-VI.mt
%d^X,j:4V).)(:ApFFZj:j]G)QF=*AC,?NVo>>P,AdQMm#2n]'.@cf>4^1j4Qq2;0HBpO)M4fjGUmC8-5:l_BI"kLs,9[f`-VSt9B
%g6t=aQT<f4g1T0m%j.W&^lh`;.,[`jP1i09!`cYf6q+MN<?A6*8]V$,"*`OZ@]%78S-'?N(jQj7bQ7@?dK_S,IqcjiLgYBl\`ZQT
%;fhl3q>)ec(X`62>MhYklYesE*s_f,hf7TCK`)jIoeWsL2a)Th>F;.o!r`X?8aZ`"!u0P_:^rc]Y,iZuOKucK8!4%PM+epp'pu79
%.V[+kSh1cqlXoZ);KC]qJ<FSsV$_M+d8.F"jhPgka7][]"2$5Z>TL%HK$/g`:II+'Q9p@>&>s%EMLZS3[>CAYlABClE2qNdI'!BV
%Q18GQ1'N1<7P&_Cmg-R?:3`ouQH_u49Xm^'L1F>HjOjuT=`S)fcM0G$7pT,0;iZbgTet:hb[ag7`Q#ut>6j29LGAl?^PiQCnK"Fu
%K8&irC<C@0VqOV-Y=Y;0]"CkbC2t3QbBU[K:PhhjZNZU$5!ND_f!dG):]9XM6.pn:cC1m&mCWK!q3_?<I=CUWok.p`pQ?q*QA'tG
%3pJ8j(`I<V[-kE#<5U+G`\M@LP<oF(:)t$g$EGEuh"b6?[ZT]9Lq(oJa&6[!IX1<"-Dd[7GsfYWb9=ueS4&:mc1&'qB;aiQ&nqYK
%>&9So4uU@OIN^`7^nhR*A33>Lf84gqS&1d"WZ:X(Mb%U7N=SPn;"P^^;Qd8EZE#-XqP0tjek'*9I1>/^2bW54>!=Jc5*%3ISQF[m
%qRi4ESko;?T,qV#^>S!76%,`k9^\78Ho'Zj2"JP]b4%.b&9]HI+0\1)1'?(B)LAL\7WVF+TYso3fa=r"r*[cAjk:EI97p6cWk\Kd
%IC-%Ag!<:aR;d[L]n=XmPeMt95rAA+X>>KOI%e`INpf\sMpYV#'/Yu`F8Gt3d\]V:KJS-Y_82i\&`N5&p\qWdp58Rqhh6gtp3H%h
%]Mg'DLK[-`Ou1uo6_<&%Q/>91#CI=A\56E?TVMf8,'`eJnc[2#-kIp@$IP9G<c(drmC!C@hpXl;0-VB^G='/dFseV9rOETkjZ/*p
%E7WkPlaAlnhp9DA:TPD*AiB]YH<(:a4rjY]S<UkH"71IG5o+Ao4jGDA"Zs<H2;H@0QBCQqb`'#(HR)n5nbORY36?M'YoEA53Vh0W
%mqbbU8I0D%:.CV72c@MW]TL\).47\YrHjj\D/[.`.G<$Go%3;r2iIS3UIf\p?[ooCqF#jZs7VM/pS6F2$[8`aGQ9tI3cVp(hTqkl
%q=`!-Oe8nHIl)jDRe!*'SaTZgSd4]^UYY88R(Y_In#""IA@d'\a*YZnVq4G:h>NT95RtV5q2t^9645'9CD&`S&q?*jEqA'jiS;0H
%\!nc>h0>#Wr6.9si@G,Zi;WUKOiLQ']%Q&GVc?L>GN;`M8AJt$FNs*,CkJPpQU,9N,,ijGeHRQ#_),@.#ILXuHN\eSG/tiDM7'pW
%QI:ko"LGk,K](_?qLBMR+3BP@go&t*$n8F,T\>A2T0^OKO/,6F\/RFiUF!e-a,0t?VVQL0pFn&A;T@b,N5nQM3STQmA?<\fFrVn6
%foC9c;eKCMMqb4LK0TtHnke!^>F7($6N_)W(YHoPVdkn_`,Y+\RlfBq[]0$()V,oi!*0MU1\_%4)9[sgX6a;,gbR`U@rN5%s&%:b
%P\^AJ*du^PG=%BVHW-?>VcIaX1ZY9iQ>d%>fhZ$I/[4k0Z[aa]>sW?V:mb6]!N>Qt(C6i'^LQ!8(#hs^<D=:`<*>Ydc6a:j(]Zm3
%!NB;L(&1*lj>*JYH9O'VLUQJFP^)3Sr.QE222]O[-lgi2c6*$/P'Vu7S]E)<eahoD1J8#pT?uT15j*'FcU'pBD]94]HP!G%g&,\+
%-9,_"M\aW(/16ZYAtf@#?mmq^SrfM\&fbL?!AdK4Ug&ra_;8$H*j#[^JI*E9gWSU9-n*N^a6f*8*MjMD0oJp4)/jEXaQPf&^qg%+
%[DPsU18RG59L;;,Zj[s#go'?q=Sbas8K0MZYqp!USYVduC<7#SU+gNT=\AK1;%\6;@qaCJAmJ+iFnYYc/W%K1?I"J]YN'[4gb_#\
%O"-8Z9Q=GJ,o"Mu@1Y1f^&fRUeXJVs.[GlE:<cD9V'+'!0(C5Tb\UKjU-p\P?"uI\1d_Q/*^Po#68uiA7^e"nDip66RN4q:AJ(+O
%/gIT9%0*7f@#d&`PIj#JG'mM#$2A`Mpu_+IWH=Mf(fSDc!d0muf&`"hD<,[l7/@cd:8MCW>YD,7d7b\]HrC9@Vgf<VH$n2IAHh:Z
%11Wg+&QM*b6:oBug4Bm1:'M5Q3b^@`Wi\i7+HS;,SZ*1?NYDrj43V%dHO7fOgbsH;,La*mG:S7Lk!+!!'O"tN2`c9uk\S@7-1FTW
%_'lO^/g85i!ijD3_681V^`c4G)bil2i<\$!a48:m-jX\`YBW%<D5eFq//CjhXP?-9VSp$"0WHIq6)S[g*PMqJ+m:A;.pfDBao,Xu
%f#TR1oaAl3(^fshYk=S_.*6@]OYTQTZJB\nTe%Mp`fA0`fnOa9#Usf"FlbB?9rFG)UmE-(e"4*GJFfR&INYE,Nf`h/gVd&X.#dSN
%hc<X$K0;-NXiLai/u!lT9QKW%2[jKK3n?V5)ETm6^=,2$m0d/H3P'&<q`?YRM!PH5/^sLn<AE_?=9a<(5l@!R"r"?PGRFi^1389_
%'#0IN)DNMMo8IC^R++9089F.aKT]S4M>i#\Qi:)4=9rJ)9&Qc(nl-g%'=Wr1MQ8Q;P=kU0m3GMki>#d*"Q=B.6bi_S%XA8H^]Z/'
%dr0n&e1I@>XTj/?2au.l$[OI$_^K8jUl6T?6/>@C,7[a)jZ&qF&M?P+Jp9oYO"j'f:7`1KQJaFcH]q$=[ZrUm+@.<WNq&!Xk8T#&
%ZDCIb;G;6H!XKO]5G0]NI1Z@p(jYU9RPm%K31[)a'6(;B]NqJ]73dd>*-p3oTqc5`X-sg/5p7io8S\03<6#(SFi`H@29W+GYUKcM
%.jBdY!YD?<#]Wa0ku7..@g.XW,!VT3Ff=V[CaWqGimrWp_5C]p#_"A3,hTOt=X%$qC&4O/OuB6t%VASNRu(WQ>jopIpb!<qV["](
%G7/rN0;P;b9?(C72DAJ-oDlJeT);m@V>Dh;L[eLLL\eMmPF4cQLoHl$#\p&`;J[,daGEH(_+i%no;\ZR8_i7>_3L3YbnMmt'*61r
%n^YO:>4SD-`!qI=D,q!1ROM17N^UBoZKYW)Q$"KH#;5JlZ6<gGcjR"hBQPGV1P'42Y2dM17m(\T^H[Y0@t7aTI=8*cYCJYg'.C@6
%d,dC-.LV$%_Se9iC1r4acVj%B7gECQ)"^uRA:>Pg&+aXW[tC*"Jc7-7(KBja.*3!C<04sRcOf!A6a(5D)/FrakQs:&`$lCt<Y0jh
%%gQLgN6g@RFnEj/BFMHC!)b&>3S$3(kQoG`1>,aP9ItUH=aC()>V're_[VTI[%`F65m_jR$S!Cfa$Ag2^@BCVi=eN$1(^`:kQUjm
%%U@Q=H>UW:)-=8X=,)f6gp``:'i#J-c:!d;c%ki1]Lqr[3Z:`B]H"!BiZ86$XQCNL[*(+tN%uOk"t$.J*,+OD:!a7/mg[_fLY=UV
%+-KeT!<roc//LBk/DL@.3N="P.K?I`'`=APCTAV(QPb(/>;Y5&%5W&_n6)]r`5u,P6-6Pp$DQDh5V7Y-+G#hb!gc8$2qmo-Z86i9
%,GN5mRCEk0F&!$!,[V*TEQsBL[p(UsFtF8qO&q0F8&cbh7CqJ4o-EX2lmOA_:+.8>dL&;@*MCdofWda)dfZ%DhItY9#(HpXjC"os
%`7;onUB;(i1n3okDe2eMW)VhOj6h[6"8jVt?suUHGM>FV%k*E(G\p.):kUIHW0"/i_QabZ!aWY:6Wqls0BSD>p[W#c]W":GBR4#3
%^?p1;VeNZWL+)"j+/WHVjGGZqb5@j]Q@(!I;dDWCHIXX"IiP+=E%(M#!")+fQ/IeBN):";;*mBD**P3*.JJc%'195C=QHo-dm'pd
%+Xm_557=2LLA\__-%>$+Yq7r<'M[,Rl2cd!AOL9slG?n.]smB16(hAK63tA$Z1<ZB[G/&gOh(N*h\:PDXqLK>,"[Z*St'!;A41r=
%dKHMNf2?a9Q)J<GW,LE?o'#%cf.k?+Q:M<mF4k+;^"(YTUh$b"K]ak17\&T>0L-\i!-LF#j0j;tG"Iem.UL.<EY`7rcn$<$VuR_C
%HNiJp3M=K6;K+oF+p_/\;-R-7,psh`M%V#K'AF]=65-5H<!Vl/2Ua@%#hpY8VcGKKZe^NMA1TTjM*Oh!ad1.q,sW'_#CBAH/)G2G
%Q[&a7GS6bKn80Vab6]XAA<M5?!(70N=%TDpIRVp_KSH?8=<3e>0MSVQBOC%47P<In8[O80"_561MF6r1,IE3.Le``&D_`u[$f)TG
%).d@3@/Ln83$Y,6[rd__\uPgrb"H5*bd%KkCT:?=T`m5I1KtLrPZ.._DgT'>1UFD#.[_@lj<\6h=<)h3Y.Q56/Ii#JE?YDq.i"^o
%\(#2?m!]iZ/_stag]JjTK*(;cl5r\?#]NF(?@k^WPZL;eeJM?J+#;Ase7N=p\KV&c`V<H&-f&mVS3+um%L'&!!U)$,L[eLL#AtX6
%KV$>Qk.l[6&^)RFZ0<u]X;`@iL!ob#;n]2JC=V9^Uc<su9=\h[f,tPt722ed2Zp4;<7Pth3+?kmdR7b(@:1&p=DUTNY,_*e]r?tY
%5l(5'D<A\>"RcX>mPnqhFi@W5kmC:faHV48FlouKO,9`l@)ddm=?p*97Whf6dY7ht)gi66X&rGZC+4-G1-8heX\J7T\`\n/T16o2
%]%LZJASN[gl$'%KOU-"u!KeX+=lP7NQ%QL!HaO?#<!R-kc4m_nJMi^7PkQZDS3B6TUBK/RkgBG\Ii;]agomC5h]5FRWLu;:g%W?d
%BkA^E5X)um:@:T%._Ueq0fIHp\rV.n9b^qBF"db/<Rfa(6%Jf>bX_4%jAhA3mU)7S"V'VrPMJcH2=Eg94860o9U//BhU';KH[?>%
%_[*B<bPQXp261`?AmQ(&5Dt48IkIR.6<9bpW$\&TTPiu_+3Q`(_/dZh&^395#Ub7f4FiA0Y6l8rFVuU801)WUOrYCrI<q/M4Q(&h
%BJ$kNA?0'f`3Vi;"PDq.lAMBNcXZXXoPBbNPEZ;tKGY_&6U0R0lhW6(Lp(hKDeGEON.r'6,dDns+q7Xf)O%"eQhb2F5'%(<l4n)G
%/WlYqAW;r]8IuHWX2_ce`^J&l"iNtXM#0upQ;?QqHJt;X`Wm'1@@*h8,>"8.$4WZ,F"!5-ICGkCZK9PBNt\,3N;d8*_1K+PG"DJR
%P8t$@RUVHZFnu.DaLc^!dcFd=9jR\d39SZ[93@d:d0$c29TtsOc_Q"fBJAPi<+d.3B3]10R+r6f"t4UWDV.74ik-jFHDK-bHY;Y;
%pm$a[fO]#ar,mZ&ZWD@D=-(Pe,p#!TLCoK:Gl$'[#*o-+0NM"pYa;]Y%C2]WW92lU+@V%ED36b(XCot'Qdmo\4c_e5aWHC1?StU;
%@KVD-Up:0h-C8f390=qlm)+?A1J\8\0Qp3*"%`9[bP7<E#L1BF!lRsd?XB=<O37s!c_ga6*8@o%MhK4/KZN`naR^'j_dS6Q7/PrY
%J&!$ZU+iJG)QIS#M#9(ZCT*,S>OnNBHPbCY/R#)&L1lSNq2G\p9l.-M)RGF*O`^X8Ud`9e)I$e)!?!ORJh6E-@80*1FB_s`DC8VL
%3_OO8A,jV:aE`s1(&K/<k:l@j>+3oOJ/U0I>8mYIb&fm?2/^7!\@0m%\=h-_9IN7`Q!dL,e*^F_]FlDYWpS5'[0.'\Rf1-eC0kr>
%S?;:'cR$4B=5+QKD1gt-laK9^.qc[_N6pMuOFJ^C'P`Tg'o;Lmm3l3ZX@ON`#T;E[82A_=kK()Rpq3Uf$7^A=8OI[Y3U%NO1AQL5
%jRA/1&M@OpEXVqtB8UNV98V.R(FbPTX'Fp`P#-&>;%2T?8.s1s.iC,T[hMbHILL6oo=]Eij:_#HgqP:.JST)n_l1_hm0m`f'V6uK
%Vf:(^I8^>?[3fEG!Za`CTajBLqt$Yher.nI7V@#+(dl+j&Jbt((Y64ZCm=oQ*HW`f6t.h!6AY?9j]dVZBW@^E.;E_9R#"%\(JYc+
%PajG\.fF\S#R<tk0n6.W<fl=fVZIq`8WC&IDX6`,P=bs)h8E-SWAU^u@R79>15:<GG,3q52Q3n#h)l5JJ`IVXN+Rb`4cT+befG^i
%J5h\+<)[-I+K&=!p#=?I?nu*LboG>DPT'p0Ci'\\^C8C+ZS%$N&'V]N$55mJ#e(U[F:0VX(FDWhP8#S]gb<jId,8IVH<at8'qDn*
%Nm6oER,4#I_bCb5#b#Z=Laq@FMsS7Wfhd\EG5`s^iJ<"6-nEnBVrHou693]1U"D;hW8K%:X$HMO[a]Y2l3_:ae0J+6+GU7eJR!eW
%8,u#Um1/Ti]q[UVNQ+0\OD87k@e&U@P!tej`9n*s,)Rt(iuhBlPK^3To:Zs*!U/*#E'J>b"m_aeR%t`7T#hl#Gt=S8e&6TWLq7d&
%qDh@l8TJFrkf1+MlqGq.!ojsjadG7A2e$CWadO'0aD;aR6*;0>hO[2)9fUj[VEVsu,*i6+,p_e[>'(q:YR.aJ3pEl(6`p,u"0X]R
%&8>18@pQpLar[:M6BR8T,sE_aUsSPX9<(!RQbeG7^)2IM$Y!X3Z:9I"_pDdhVf$8f'`!*(m&hO!Sc1&B]'TQq5')<.P)lLaiq-k;
%/0bY(.ZID&o#&^p0a6H.K9rKLA(,.?Sk7+jKtiG)C,e[D_XA1d;^G""fjBnm%M'(ecZpGO\_/eJ_W5-@!6Z(l,WM&98J69P]L6:j
%9ICQ2b1CJteNFP%Saa=dd[>$CaJYPsCt4B5#`T+8=gM,Z$r9PS7eV)JE<AZ_jKCasm->acNbCbd:IO8UZK=YI,BgTWhn;]_4p1(A
%(U4t,.R,f;#j5n)oj`(]\L^s4?$.5#DUNAR79bJ;N$++CXs>`n%`aEHIs$`6"Q,6IOB\`6+MDD@noT"/=->_@VhM]eK2-Xdc5^&G
%m29%eFJk63OkVZER.^ff12&)%e)`Sf#Ru4fmlrlY5<gt3(MgUEiq#3XAjH7ZY?H*jfSKj=d$SKFSO;hm*Ll7F/n=s\Z;8EE_peg`
%<J2^6ZC,0iJC3QdA.Bh%0lqCq/.W"$r)Zd1apUkn<eTC*d!A)(8YLQR3\$#WXe8Ki6Rc1=`D%;[=kfUl`FV1:Pe`Q^LTN%J0Vm.:
%^n,(5D$O<0UAIe[:g92_N2o4'?V>#c^lAii$*>fT6hq'mIeBB<]ID5;,:QS?fV"kA*8aoKfCAY4/XFV1paqjg)6/]UFuola"`=C4
%-PTCS!>A9pCbd/MCg^R[@A-a[Q*2/Uj21lE*$#Xi$=?Kf<HIa,co<<nU3,&iV,kd:]Z'ro,aW*"f!"<3EEbkl'8:3Yibg_['#\`b
%5cT/8W1gpbgVUW,b>`$ME)t^%+"4mUgBf#0.OtqU9m+Q(+XKb:o,S6!VX36lBBL*6AoXERgsUh:8"SfK3ff?!7)Xr.Z>pQ-ihgLN
%_/tbl-m38Y5SBS+5Y1oHBXosM-IN^*RX7?I&KoY6fHAZN7C`Ne9oL\*ZlHkH<P\_b\aK,XIP[]Y,KTEF3)V-0:9Gh.oNog#7"W;M
%a=_ZRBE<r/+,V92."G?O%>@($"MC(5IEi]+Z1/^dQ&CGlB0^d7]Ca3=/0T\F=h1MtQ4"pQ1aR4N4F>j2Wgr?B&LthmbjchMLB1R'
%[nZ\:(".tkrSE5dW[Bk88H-9C@`;?/DL$a\eQ9/T[tJF*%3qHm)Io_u+AkTN./aU;Odf#A_*#jP+eI';#r1s"1)@5'.M*pM]!'nt
%OX1e,G.d*qgNjll[[Tj#T-J-1nSp1gL2UQ/*BM(l4?t]ui@ZAE!0`4lani6(g6ul(Eg:Gh%imuN=JcL=Mp)Xh+U.-'p"naj2AC5l
%>*$sI\Oc^.Lcfk-'6oq$#[OH&2i=[sX)8gZ<3r/]U>JR6SngUGV:!5u\/=oj['2(o@\]?G)HW.E+?FEHd>dWFmTsW[6lF]OLfS.R
%$n5fCU(d#qobM`WnpCFS0WX`W<QEM6q?/&N2F)[=>R>gRPnOhm!O;4u;G7TD3)(SJ*aK..-ioB'&Q(>9KG'JtQjZ^C(3DWI>H&U(
%Si7NT!.36baUE*YoNPT(s"HcTkj"5[:V,gI]aJAi_ZRkA4'Bl7&GM^9%"miR/LHZ6_sq4j`@b%tg/Q1;cCM^_e$qlP->C0Q9[S/T
%'[9/m038$!&=\$jZXW#&FT`Gim<6Z%65d%'>&3]T!oarW4d!lfQ2]bQbKC\>VN^X`W_:S8+iG6BOU"uq1&P3O%dSn@^X7E6aXPGD
%5iblI<-&nW'b`n^2Zu\PaY@/`rAZEF]Wc6@lU'ADhM(MuZ%Jj[-F#cX7T0:r%&"d_>tL2BXckKM)[I=b$"_oVYughTJd1A)EhH:!
%F1(c6"XmtiSCRh*_ZNH:PZ/j[5Q%PQCkShAHue2&_-/:3+!;j<laSM?\05rClUOYr;086hj\i.C/,(_lDQ2M.KukbnRQoIgQF^NX
%W)[*6P[>_7h05Z:6=XL?i+)k/c;5gN/cbE%qi.&0oH-UbG.f-nR4gr"1mB%kW!9oK;2*>nBkR:_dc-*]@7\kAi5%_0TLq4gV$P3Y
%X/?k1."VXo%f(pB("VtnbQL[mW4B/"V@k0!&Cbm>3mn$R,ZP=HENj[5a&/e9C"%7/Z4N9cSDG?,9Ob`DW[[%:\LpF*3ISDe!Ha+H
%KLjb=pYu#NBY//n/(GA;TnBTk'u1<62*e1p#6=tWU#rNq?:pVbDaH"#*%^2G5tH<WGCu+;+%F==(Q`*(h4/iE]?hP;)$L`'oFna.
%!=C.Mo+m+0LoSt+DaBLFr%&'\VUV9)$BtW\J&/2B\r!guK(.*&8fNS\QDhpk+,U_`!7?nD[^aqr/sPm]J@>7orBl6d!nq8:H<bNR
%6\LFRO?b%G%3IecCRDDs.YsL"OeQ3@RptmUg>Hc<IT(@j.6aj%gB;#Cr4/kXaN*WCiH?Z=%s!.:TXF!H6WEl,h*pNGJeH?OOlT<@
%E-VNl\e[&iXEuIUCQh7S7;0r*8U!`;/&b?j@#dN@--t]uPgS0s&YRc)7gY<bR]L'8/mrYh&<`4&_%p9T$RKk]]utUR^^Ld`I6ag'
%a^<#pCf!uJF[e65OVjaJMmt.cF.oI(?+WdNaM(8?hAO^N<a176*'#r[N\m_LO'5(?WmYWT2n&#05h3b6F@eHMrF's%MLutZVDN(X
%EQ'Lgqi1_U:9A:($mN),:]5h2lW$YP?Xi4Q;6stM9DFXb?q)a019t,-R>`H-MP<^OXNN\^m[t3t?ag;XG:1_n.=_o=(oHn&q4#B\
%MjmbU4@<;9IQA=4Z[a>In3`K^"%9m5+P(#RR+:/<3b6UbjQh23GA9)`!^BI+#A(6')#EMn<O"0N0G&4HC_k_nr\QMS1h]7Xg.S]d
%#6/Qtj`s/nXhhf#rr8JbZCX^Pj19F8r"&`m5R-"CmYh$3[:R.h#?\4sB4B4/:^#E<@785a^\9la<7P8daSn_&1B`HgB5T:=\Q!1Z
%M%^^GJB7*%5u@K\;EZLN+cBe&;cgGS/uXqIGPuPKbr]V.BXPB:`@<PQ=@OZnrDi.k&1M+W-!on_/Sh*^m8+\M1Us_J<u'mn<Tdah
%N:"0o/)PLV9djIXW[(Q(B1s1Nk3`Ho<VO;AT"E&?Z-EtEX4nkYacM$N:\?KIinDq!j],FsBtBnmS`(Z:aBb.=M*j,,li"un^J5>2
%V(*d`c-fErag\dc<?F@iV]XA^JbB*tc.bs!bBN9QKjed^6ksapSoY#H"Sk5qB@I12X>j]7ZW>=`(%[h\Dhm9\2b[6m>PB%*mgW-m
%QhRs+"&U^o;`WgL[);s-UEO\sl/!ifW.Mk3Jtj64SM/bhU!O@)LBu;EED6=6_FWHO$=)62THD83]pel5B4A/$?=`)Y=nosLYPWna
%dSt-+F`\I!A;*kNTJ*4B\csc,0Z=Sf&)7a:1S_H4Mb9tn5f!KQZGIstnb7iu@;,MaeBL<&aSZ\=+Q`Pg4h&/ueCu$Q#U8Gkf1$K[
%?45^fmJ4>3LVa$DR[+@V`,U#RN[O@%<n=)(IbA`J!F%g#:0T>;cU@_SVkNmtV#A6&dI2E0-JB$_>$'&8R0Kt<*=@V=+;l9T7>-O?
%bVJ].6m09W[q*qoLf>S/W_aT;]4+SC;BW6<#4%qQp;;WWKaO],8(TX+)N4.mM#%.bG"F)M.&b]JL:g\p$g/Ie+kI<%c,ZZ-af=jf
%'`Dpk>DJLfq&</3kt!$=a"&t.i8M]mk#')b1iKgfe2R,_\';/S8k6(Y`rWU!*fU*F475#.$8mPGr:"&%jt\Qfei%Dm#[nSTeCS]B
%b@4555%GH=(02C^m)WAc*eE+:4VPncih\e]`9]AuLuc.GhE]d!+^;LLRmAaLMk5L3FOc/:RaBmf1fc2$^6B@KGc>cl#i>E`ZXMC"
%>1\(pHBDB^],987FHHu$OA6RoP`4#]@@X7cp!E3m;:0DEgPU0+GFGT&MT-]<^[E3;)QI)(lCg,5&n"gO]7^3AZ5>OD6dqn@D4noE
%9`A%+;%smAm:bEI/fcI7PEs6IF7pE76<tfej$#+mS]P<W3E<`)n$jB2_Q_1*+1=B31qXTaNbhp`4Um2]9&6X'5q<I1J]]"IQIAO&
%!t-%rG1u-,em6X>B5LT'-CukB(?qMu=>77<&<-lF7QBU42&9+?ppdjda.b^^_,^0uGciXue3u+P(lsMr#ML5+N0\JbM57Q^icHT8
%'dd...[-Ggr'M7X7Uak672/(F6Rg&9*$*h4k=n!$r64[-^ljHC>I-R4ho&#%FXFh;^9mc*k:2L[FFUDhN<>MIEoiU%9f`ft'Uo,/
%83];,i(,J#bE?VtMCup'>:g,ZR'B',,:o<GFOKBU:^j;BaQ5A4fCfn1g\`V,&FYh5ms?FZgi*U_X?9L`)5PBEl35EX<YiF\fq=!f
%bQa@XjZ%iZ\AZatgL](RG_$l;h\=D]LM;MA/1AM!_`B6O9`$q9/5<_`(8?KV9Mk:GMY4gY/O1mJ::YL`g[X'%"P)(`M)jSLl-E8Z
%q34=h>7;ZeZ1>GS@hpuaQ1Ocs@Jj[oD3+HmE3'.>155)Z%2$^Xk6R\SB(7'b)#gLigiX@0g?mF#@T2nFd-.C,,318K9m=sQ/KdQB
%OZ63R/<-g<m<t#-l9ODmi8Q3Z(Q+2F@Xok/97S:)V3Opna[^49$mpW&da:s701/FC)`'k_E<jR_.M)k6]2!_o3h?X0.[&&&PsSS+
%*V=^sZq9`dZ]$0C)kq^.2FuM2R7n,XC"^3/(])RoV`VP$hu]p"4IGl:CSK.F6Z3?F7E0,+=5lUKM>kE5?ig>f_Bf;AkY9F9De(5)
%;hVc.#E?Yn$qWR)*pn*LDj:4'Z%u-+YOBjToSK5']LaWUammV+WtqZJ'ssQo]q6s;j7_Si@uP(&kja8AIbC50U,,il2LTH6\$A[!
%NR+.?9RJshiSBk:C0NmA=a0b*B7>g-(noW/5F9[;`r^@6*]j#DQ+Zr0.3o:i!3=C$k_XTfk/T<(('5f373[:FkVAAoJ0O'f._.4]
%f4IQ-P:F@O,`&p=aWSKockefI>iD=r/36iD]]Igk3V2>WlaVPB9Sgju.(*n4%kWL)b6\1QOWE/G7]:KoRDm%GM:08RP]Lsd"bDYd
%)9VCJ,/p.TQRQOk:n:!]Rk(BC$HhB+N4[?sVD\Pr#Z2q&dH5lJ1NqY6*^rEfI]5P6rLnR%r?,V8<Vb!+EHI9V_DQCE7#L3Rf\WJW
%![Ym?q,*POWRrGV3!^`,e8$DJLPanQ&>##Q95&CoA5-ccEcHS+OZ%f/2AkG/KauN?]l;KB7PId""&r@?1(*k7Kee26ma377b%(sU
%R2`W'K"lhX`&Ru1FYQf4,C5`YWg1[SmL$`*q[Z![O^6&\cc'A"kODe/^q2+*SM-A:J(SO6.u%;ngY5=Z[qiGV,?GgeM2c_&J*<OI
%*Zoka7c!IdROV;;;jH[!hk)6Ugkk/Aj%@C.D,[29E=dQL[B?b;eiQ\"e]&rsg[ut@T2(Opcq3@L6&[4h?a>nRTZ'(8"Q_WrFlc&b
%$B=:R%#[aPJIn]7$)'*khDdXc2=_R:[#,kMmR@fm%DXECa&7\[O>A$SI[a5W5kTS3W@Bg_Lt7=Nf\0+SD?"cq$@&KphPU#MftlYM
%-,eWa"'#!uMGG#\+c$nN-Up_B>=\[+L@0BE2@_1BgllWVc2m"7U[/Q^9rJk]"Vjj<^-@h0I;/;b'Q,[NZXof)<%8tNUQ[+N&=]&1
%r"*(41dUXFp2=qLV%_/l@l1T\)+YHfSUct!U4Iif/g1aXTEbHqZ1;rQ'RGTXm!I>AES=,^J"rR''Z>"qlaQQq$Ae4p=Uu!86BY3!
%ouu2;b5+f=*l]%8a5@u__R6Bin(S/VG+;]8_4E&N*%cLf%u;_H:8;'5M53,;(5ngcj^B7XD(FsGklrE_Hth[&&nK4:Aqfq6&%ke9
%7;K/2?p;+q:SONnb&Z7aoSb-+E7E6V8Fr^<gGk-0/L;Y<@UVN54<jNjEuoMDioAc-jYQMT\Y;<El5Wu:biA%cW/h^UpX$lZ,DhS(
%MSj>dA&L-ZQqQtI:f-jWU,8Jr2%Jg]C8RKJd-tEV3`a0qW<$b9hIKUf5iT<U3c;uk,XR_jn,[s5!4cDjpG!G"AdZscD>A',BM&GE
%NHd"TO900nYF)rk('7)_dagMjb&r_SZkOPJQ/6h"pkKoJ$&?<'[T0leUjK)/?Zi#&\d[>/6[K$!"Tu;UC_'n>6t1l/[M++B[bNp&
%.6b-R:B_@fm$4-RqL7EY2N+!\+B(_m#;;OG=gS2kP+=q*Uk$Li(9;]O;@oH+mH-<k*Z&SOU;aL^;r+8WbpmX12e,gQQHumk/(bcm
%0M.QHH']L<:CBW'c"0MZ."ITs?2e8iFji6ulC?=s.p"(T0\%-Qh,WIh/Y3$:PZC%P:>%Y^FVeI>AR`NdL)UmKAB(XTEXE;+G4M-C
%W=Kmb]Raf23a/g8<i)reZ882W`ai40Y#Un\Pbm@D8.%5)`,Nt%Y7kI<,7Tt,(P'`<Vo)Y(T9-TTFQd2hBJSXF(l%W?Cn:Mr/YRZO
%(WOjU&2M_J(AL-a?,65?;QlXoi8)PNh=!ER_NidQmN1tLk\LP<aUE6)>pMQX+:;]o;UJ6uBZKk`H'$rGROl5=53?(82]IfXE0a<`
%_Nblo:DAE8$?`B*!0hp,NTq\*;BS&3kr>>Y)Pi<-K;g^:9cZJFme!8%c!Y."[WhjhAa@P`pZmrg_?Zle[WU4?l\rrc;[-^*eFM(o
%gCu!:.=%B6]T1R7(9S"hQ5]W<)?%*ic>_l[nMV(iEk$/OFoaDBDp913%aKTh8#EQ",7^&PXt`i%D+K1M1%$"EaG@Nn18l82kK#sc
%2HP!iA+VWo?D<L\+Yk/@NG5jO0(f\f\`;>[i>LKE,Z,BY=X#gO3ER;1V$_pZV&(h@Vj.bnisu^="b[`gF21[q7#i)316@F,D&28<
%&?2q?8&e62gV\d:PpDaQg\mgq@_Qu3k\.'_Lh1L%XW^M+4r.\.T9JlX[B(Zor]]Yr&[S0@f(7$AC_t7,iMiel77\p!nQG<9PDtip
%@KH9ll8iHhIkbUGQ:u%JAf1iUV2,Y5ZoEG>a^Jn(05SbPP&]m8C-%pc5kjimi:sKKRp/?^5!:#X_6Dh.O0bqr7qr[ea0@i#+uU%(
%\?][jO@UCLQ'`JlKT>0;7Xs]o:BqENog^^e+T?$uNq>(:PYgU!TFpQ(G9fXrZ[<UX3$ihQZDfjZG0=us.6IS_fqM:nNB0Z@*h$f`
%gM5lHVMW/"D)Zokn>fOD+iUE%!#M3^aR^WP+4$<"(aJD\H<5>)'hdMhEfc(#@c\&%bSRB(#D*KtEa[Qs>C[82fQ_8\2G`PVFq&P`
%),3J%'7[Bu7jRj/EG=gK4nE7d`UVkqpkKo2f7B_h20FmOVoqo]]NnB"6OA;\dr7r9d:LH&KgTc0qQOr4[5SIf>t[0r)6B;q.Sdpj
%@fL)SN>0!U16$o[cm]LYE[DT&PG`cl2PKN+/!26c_)7_AI6.*55NEu@FO&r_aW0fX]hUdN31`n*_CKQq[L5i>m^fbgg*f;6^a&^n
%gSp<eObqrERj?)YSR^*mbt?+\MTmuO1tpLNcX$2-TUY(c$r(9)IJK:&W9")4+aQ5a]?O:p+CnR7U-(M-s3ScBTX)^<QhgfD?cg^`
%5oYEDXV"3(p!?W7ou[^1Y.lcq+bI.Pd:1P"B$kdp[q0FI!S$<Y`8WA!*2p`XRR=f'LjQ-`P5U^5:tK2=_Nj&<\l#-ZG^GQbj@X5e
%)$)/rZBnkkplSIc@#l'[f,8CEN0VDjA:"9'Z2%>U`.Vo,'BbQ\32E$Am8&t'%4)ppoc.Nl\Ar1P,4n$#*mN<"NPZc\,7LdI!?P<@
%g"a6I9.]sp%W$Z[!C9^D6FX;i<j%(L<>8AR:+d/CG+]/LgQ_fULsTbP+u?RA0gONs3mu6"LZR]Z<W#4(ZhBK8%eE5(%#"#cpDDI?
%#"m#C?C>@fA<uIBNo\`=.`p/*P.iYJnmIi1R.Gsh++!/"R8?0k@&?uc4;02j[#c\W+I:%DOCU8Cgh^",C>`42Q9'K9>_#M]e@*8L
%9orL1OLH4[T/elco&3nF8)_@a"=cej^q&C,`&lZu%EG<nd::+HA-m-*ZrAsTgJZ,QnQ/$;8oa!$!+ZUQJ[C4[;"^"Y&>$he@[T_i
%KO_;)10I0ke@$aAbs,,qPY\teea]J7W>DdGF6^`;Y2Pr1+*pI`a6rAUQ-_&QKqMRe!CEGX\U]LL^e_:BhapA$h[,JrCP,JaODl;;
%]GlHTp($J4!6*nuo[?>8.7FV4j@BPnf%W2#jq;MJZC"3f],eJ4RHg9Nmh;d&=s0bRO&tOKK8QVaH;c3Dj8Nj).JJ4BN'or_G00fX
%QDUCi3u$9I%cef%d)]UYO`#p2U`9uG;+"fE<AA#:"J,&@D)L2iq4TIs8(I%DRq_Qj0*KCm35HV=GslNp(-iePNiXeE8;Z![Fud*=
%X99&eERbN+o-kfm2T*hC]p)A@"HI4>MPO-RZOi8m&!/cTm\4b.5q9D'JLjV(,f+tZ6Z-O1s/,RlMkQf6-V.o[,>)fR%13p/JqY4?
%9Hp+h6@93-J&]nF3t@CW"DPB%$m+O]T``^egD^o]n2gDfoQ>*6LX'idL#c?B<*)@-X_mU_^gOa>i^[*WW"-sg-8cdn!#T-b9L3)"
%p#Jrd76JOHF@oaSAYcUseZqcAM&MO^e"D-rK&Kmqd>7X[H1G!qE=sCqPbebaP>5*`bRnrVEWr.VLdEE2RoU`..[GpK0'X'LkIoP0
%=iMKgp'hj=FK8sg]((/=E;+0-nb/ZocfB#h/DtPQhJj]ebd>XIEM7+[d=`(@g.):u<ds<@oahJq/6TAqO,#>+g30)2%,@-\UdUsq
%XBS(9#I?X]L&M?58@(Q(,t4DJ%;u=NAl98YZ>)'Glp2#6N52Pqr0_4KORId9(iE=Ta]#>lfN3pQOA%pX',<;$`2jqc8==e,AH`'U
%i=^DI!Wl2V=J;8rKMGEY[UtNKWks[dBe\rh$.>Y;Bibb]WoY>9a!uAA<j-M:au[qK=NL8*]mQ4CWAiU*4cY()4.KbF;/V'!JH/d<
%U60=(+rT#Iic$H6'`6+tWY-&_Ye[L`>S?-X;_S2'Dm?pK,(];T^fHk>3Ck@h:>eHncq$L>o!]eE:2\0sbIKtIY\=ZETUTm.8gVhq
%V@#=g)AVmpn\$DC<\/hK;&H>kEOo27D^^CD$\u#f+<CMo#u"DP=]@+@YB:S`OnH;@'+P[<MTm_)q9+\MOe;KeIFNlC4"64(I8nfA
%#m6:1U&T-UBjVG)N/Bq+@C$lO#LMeQ\0Rdr<k0An+nAI+`)DqcMkSWh.4Rr7>LY(/[LUn*GOOg_n6t\iaoTmYJUDBTLf\Yg#:>/Z
%Itd;r4d:7884-.67LE*\DI7<),'Q:!ca"3l"LW*7*djGs-OTD6h'!HLHQPuKg6`O9/:dqB][u)Mr6D6b^%(>?9eBkKj:T6k76;.1
%W;=)UPS7e4TOE9nbuI-.`^O"WaR#BN0Zu@H0P>)+DSMS</&cXYOi1e]@>6q@=Yl<mO,(hi2<Ib;D0;,8:pPB0]'\:,iQ?!3;V"\,
%EJ>'kAGL+t&*[2W)$U=$62+SGG$A<epK6j-,4u]>kn-;)4gbL>c#rAqdG-bA4\^\8rsI"Y=mZIc54l^i5F+S.k9(/;N^WP\<5]3C
%)l6mqGcO:b_;'6NkKmp?[R_aRa3$Q=dd#9SGUG/.X<RtRMDD-m39"$?jm&51r,7mai"J1nn[W;qn,\W8s$@781<9P8R\O,]fsMIq
%,/5"/L.UP[\F.:)`U]"`3k\bGgR8IqmjPB[[<kGM%*l[%[XlJ_L$A7^Js7<O.dfco0BGQI9pn&DYBa>$[\q6db)]ie4fO.m[A8=N
%XY(gFiWSL0C`s=D0+sAGO((73Z7tqm?D*Zu_/j)LV;9G2Pt.4KrC#qXl`?pZ$5^IR0(JgBl5?-nMO2_,V=SXbI3_Z#B3'oaWTEX;
%=2+R[EK;ua>F:?fppq#?BWu=1INfSE\mXP=Wb_",&BaR<^S*Ff+(saX$RKp]pBKWDLN9CY7<f8^6i^+uR0.q%R/*F7ge.p.DD)S`
%qfoS;'.#mP.LgmU.b3k-&d&]c],_3"_`g%:<:4JOP&23'%`1JCb[)gT9KT9/imj/jN_ka`Mst'#!JHPe3h.ZAVn[pCC5HuC$HSYL
%JC81UhdgN!d8=JQM;>qV,E?#^VGsBG_[NMR#%&ZSZVsa3\^oh9%=k6oaJPe4=#&E)aY.#%P,pJ]>WutA>T+B-ka9iTeJT-t7k?_N
%k&dj28e5%tmj8C/akNYQ,ZlE=>WAO98/+`,ahQ3RL>lWA:7XaoN+qCfElaku6eeK^#R&S7,SC\%74n<R7Eek?>!mED_#PgAYoFHj
%31s\uF_rE-d"74B+=+:@m6j]$+aIPd>QtlUjV0<#<[,!ScW-;'%:roYO=1iYXUM[A[$G=pAr$r$;Jdd^7&0k7I^&W8k<uM589SXf
%8a"!e&Pi!aiDd;RTai9eqj'`b=NQ\De"qXI[B<4E:*r8TO;\sHEp8J-_ZF7:*,^G8#7EaoDdkbGVJl8GJWTf0Y`Y+YdWD=4WhqY.
%!1&ZFqB60RBh9G>ctU1)0h"R!&>Orf`/+04)gO'GS+t=i/G,S@5`Jh2Xlod'@qn.^dF^!a9>GN>$q@2\(/[K?T\Y_sq9118lC/'P
%VU-#BiPQF'"tB,8!sNf$$k5L]Tdq%l65/d[%]"%]G,2&`LFqW^TfrP_@"t.Z=?Q#[?#+G^cPI!ZDs8B(%hFg>BhRC"E\p^OgQ"a,
%2J=l-&V,(nr)m#*e>eta-<k+&F%bk;MOC3r8],_OA.#!D_]k>hF0Knm@?cWB=nN92+EeQ)V>W>(kCj'ogUb8=29VNHb$C#+co]Wl
%>rqs!@cOopMc^oL=`gBKD-2f-Id&+kCh_-(P`%QC,"&7rO:=HHjgBP-'QHZQMb(\e!WHs40F/csH@WOkqB?1e$K#umM'1bEm!UPg
%g6b1\n=^%pInGf7Q4NPomdV0JIV@<c@DhGY\JDc_9Q@&W)A(64JV^t#*!Rf7.!;DrUO4@J27nXJS^N^BQf,60=c]GG<@sD)mhh`2
%QeLY!]bB4V1/lZ(m7BaJad1Da1f-Hemut!n36e7C>KMrM`m;6Ig1!csaLnm8(n1Y8:oH\e["+#[LJTVt:r6.YRn;D`j(dukVBq"N
%?BhMk8f&[K-IaMN4!]c]6NP&noIK`BDb5J>@8/c52Br[V$YoFEJn6r3['mqPXgj8)6=pMEI4OXe'mLiETElmKAKQGg?,OZR"q<l[
%MqK3KkO,;KGf%Xga0-))EqR!`UA6/d-pL(u?Qd!o77Dfn")UZM;hZG"\NiakGCDqbme/Ne>XHi7jZFaT23l)kM+"`UNIOt..NKB,
%fi?XlWIm/@anT%(Oj_]Wj<mE[cSQA?.>kjhYD3Ibc1*AEU.MT4d$_NjntOL5/=2/Z2QaiJ_TJ)en?p(a@'NMj]r_'@jLYom9W[j6
%8)TY^&a7K760+M3\QKFd`s'h0b@I:PJ<EXH>GnS+(:+`l/7llaYir=H3-&#W%3t89]!T$DkgZ]Z<.ri^dajp5<O_\j648u12Cj-r
%TTr;AOCUi%22Ck5(\2E3-f.P^)%>IZNs8"G8=H8^N*l@'=EIr;<-u&^*em%B4L9E54[u3Qa^B]``mqp^`..3:CY-)>OPd@pM@RrZ
%1V8b3M(0)a!:7Uj0@N'<lInbF3mS5+*/KlTOqhcq0Z;0E0Z`m/pTTlr;c0Td+L\c%3oB?5n_VGg3'a$3b^0Spps#*q/6Vp%"qU#B
%1@)YE3:fZO707js;1Ols+BI<+c5p-.E/nH>W#ARNXKscnW)+9J"X,-H^necB`1h\(dTtUIXd-8]T\#DuA1>DXX5A,^qi+/ra7ScL
%aqUWt>Z%;nkZiXnK5a=k9QL:Q5f<I!<LQ#t6ZSWRdbSUjLsFta.4,g_RCot#XGCQLZp]<Q'-sTT2DPlGp5O%P8nZ.qo,_34;c3jL
%CnckN;^,\^PoW!dVE?3Mr1uoR&V$sLJ9l2OX`6s3X:]`H,_#o:Xtt,ILDjs%)HcT%Z!]K<@H/Q6O*3)S2Z$GQ`.[_P>Lr7,d$<`=
%o`1Bg1Lh/4+sWf4C-\A027.G73,u`b$o!&XlgA/-d#J;8SH.m@gNLpeMK]jsk(niSJE4U6pc^HmEGZ;oTdgI@G5aD!J6lt56^dXu
%/ikaO2rRZ3S<iI#!i"e4>;Gdt+&@$I:F7+(laL/2%@KFp"Kt7?,_/M2hc>f^Ui!FoJdK4b+'54%FA>N=)%o3H>quY^oS$)*qH#ho
%q-4M^U`)%_VF/HrA]`V7YQcQPQ$:l\8_cku"pm:*/"n+\L?\jp-/OgPS/O2&[PY9SJh+-mpBFN`1`qDTfpUL>LOZi(NF36K[i4p=
%dfc[<(jd75=L^9#B_/E%Ejk2&MgWsqkB*#7;NJJ&eoYI-OlH7KRe.@I4hpA.gpTSEnML&?hjaoRMc>g_P"H]&JoP7!]DHIec.G_s
%1L7<ZJ6&1>ej8Jm5`HJuMGq6OgspeVRR%?C%i+[Ye"Dc5KYo?`#sQ[c<s^7T\de=o=.<'Z"nWpTdI@VuI\s,AQY^cMK;\qA='#8i
%&r?hMD``e+8$-*hQA1.uL&,8*052K#CJ'[<mo\/+!s5D@mC.-JQ^TUc4PV,*YAm8"YkpcmI6)HR*E0a`]![Rq;+_s-Unk*Ir8J!)
%8]u@u9.,4+WB/jO/i&0,WTp@r>YO&D>j7Q63pk'Tb)Bdc4%o9L3dk28>mZYqhi\'cOi^"=&9`paj[qphmnNQAG3*W_.E0:.?ci,I
%aE:VT6_5Ot_\R&D9'YmP;Y_M4bdj[c7X5Q.PaLhLU/ftI87rOFO*H\+CMSd;OIF]-bH1TdmS=i;F0=cVmQig*pe]NrJ;M\b13/?)
%iEVaLh+(GaYmVjLBUM7?HCPPU.CPQH5`8%dAE`,<%K&jG.Dn<0N'MWp(dnUkN3lR^aL#>S6h'7jQU?*CBeN/HQCOEohn8b3%VF^%
%NgTpUB7P1G9'U+V:(pP`GC<fjDE/[[.]1Ej,l2ob_9W7pP]l=830*O]gQ<W>Fg3@nKhkh4_<)9!'D(Vb2,\[Y`3SGlS`)oq#>3$s
%M<6/U;erf_gq4As(Q?Am(/HWTmXNkK!l6nB2LR/3BqVIcNI&*clcfqlW+U`cCFf*K-t##%E-FbC"(XS8W*#?Q?6B*L2'kJKG"u_(
%pTTi6,*5.^r7qdUSm:,k)3u.m+FN3tWSSCfC0@mO6Lbo.eqO[`PbQ(]3:_^]hu[r=OLVMP]!#^qkb$>Qbj&kh$kn`iBm+p$5j9jA
%#7FDoQ74eR3ut.^OW\.:54\[i:>*HSLUfBGdu%*Ff\*lOq!+2qVM\28\4iV4H*),bHb7$hOuqa,Qa5.t2X6u%=B[Pm,tYG$qXd,<
%ffbpG>joDc<!HXhe+9gqmD8@HeZE;:55`A](n<HF/]jJ%[$A$:n>ek44"N/RTn-]V'%#C*8Nu4Ojq"$C?5qQ02S:+o&75QPIPCq8
%.2JK-_5%2ERCO`I?-1YE0D>b-[(%8l"b.q?2Uq;`rf*cN$*j3GB0CG!BtiTBDO-\F)CoSm0a'nGP)5[(q=3/_R:6ajWKW:6RC8Yo
%nDOa4WX^#])g-jZ.7=UBKY^Ol2,:aDlW)h8rbba@pW>7cU*j.L2R?`B6f>D4*,I.kRE9Qg?ZO/,>)^MGqB:X,n7hU:hMGS);@4S4
%P^/j-KP#q^"(eom89UZN:h?)p$>N2"/!05K<1]\W<bcW7_fl?W$r^7u'-#u,V49C?7fS0?7mK.&S:H;Q'R^*CNI-gCU<q6W^6Y+G
%:g=,j&u$R&n`:j-;_g\5L=_GYVM?Q+i3B\d+*r.Hk;HZt+[/s%ZFi%M9N;%D1oR6MPhX2'(qfK6Ndgo+rusk=8%0lHNLZC3"b0^V
%%sEHdT]ip4OU4oU.J!1$W)"pp!ifbM&*a)s"%n$[<=[>#iq2dkTU&Sp8pIV-#DL-!9FF7B.Oo0sSORk*PaP?IZXm.<nLeu2mo.<"
%iabL&>Nb".IO9rtep3je9W=K\W0dcWW$K,@mDd&O1IVW[C0i^GNG:R"YbU.LY#;j:qgLOI`QoQ/Ztbn():Ee.W0-a9Zh:_j#sb8U
%!aB`T_gIHYUI+@]h&e]!4\&MR@@@frBjZ>O_EsD81J2?A6beVWZll&=9i!'DfQLY_U!ODj>q>QoZl6ba/O\FgG4%;l'tGE6>+VR`
%W5\V>.ac0I<(Vq!KG\1m[GJ<b\.q18CtrV*GM7I@lHdPK:,8`:f4O9u$#M<kj4lBENZ%mKfJribU[HORW^S+d(mtD8M^J%DcdG6k
%!DXGBn2j:4M:uso0BgWqX6C`&kj5t0Vtm*h'cW^Al>M7%LfluA.C8(=IH%p*P:ZPu*/WoP[ck90\\VZ&k95YhD[D,$`F'm/':;p[
%$F<.T4kt^Bd-'?-J#lDF_oq:0M-EnDM(KK[A1Op9D(U3%EdiV_@MQZ79J!Q:,@lPs=tGPr;:38c3N>FJ<BtgFV(/IYe?W4&/5Q8t
%[-a5<kN?#cT-d==kZIGmkRY@JY*Sdd@85MB==m\Tn3f9PFW:RLZW>93ig2'((H%pfW"P8qRT1PGlJ"L-Mk.L\d4+Tg#TFtM:hoLt
%^bK8B7Zu6a;Q:t.8g2At$*&MAX0I3!8-\#Ing[/^iDe4ibN&UmI:gp4`:k#.1dqil.h7(s8KqCCF#F!!1oK50(9a-:gQk:u9Z*\/
%<JlC_5@LU?@Hn*?@MsQjfN8rr5P3:45m_9Df]g#e#/s?'5hSo3Kb']VMnZ&dc3.![b[Z.>69dja[fW_!Ell+aU3,O:ef8s8k=u&B
%GCJ\9H`]uc,:7pM)_$!kW6-r;Y`JHTh-;:!E%hAp*.1#^WMC@q@t[m=Kk!3A5Rl@Rc5dot=i8O)CKn_f3DmHcObd2[QE$sh-KO*4
%.@V+FkoOFt1M8-Q-Ymn.,g;G<%lSq$SF\Gm,sM`<qD:I8pPEpgIaiRP@$KDNH&c"8n^u69F+X>eiAC2(j>^bScfH'@+tDC!^Y!4N
%HDP8IW[+pE+Uar^%&d@ZPj2L8:";9m'>%%1imm\_o_4bJ80UW1<@Hn<.>RT$ZuMIc,)0V#V/:Gsh\j=$ha&O87kFtoran!IC)=bk
%emsA%'9pQe_eEi9j"NcnU(+VTXi]6tb<L*rV]TA%0OA(VW(*m`a&?8*,Z)E-9P;2MR2)8bG,T.1"*]OhQWl7`d[6$qa,\+S+S&][
%\V#uK)!BWebpRRFSjeE[<WW;4#8=PVp?EAE$>.%5lLUe7<5e4lB2NEZ-k#RXaWIVq&Jhu:<#=VCbO4X5Y?H"A6^%U2ZPGTCI2&`>
%I<hFMOFQo\@`B#tXY%XV,R@sa<Qp)HARr0aV=7&"#RBj%hU[B/>72K1cTKZeJe=u;lJe_8nEIuh;"KHLr_ql:Hq5fGfoX-klU;e6
%RFj2/%Yr+I:Zus7fs#37ZQXb<[iZ@?q;6Y@0]gNpmRgSb^YGN8<D:?n.&D9SG?Z?d#@(T&KYFTR4JB:F^Y\o#Q-$84<3TUbi37%P
%'RiS<,VJ!h543lE^>O"CkE^K*4!$3HkJ)?!i&gkWRsb+t+5?"kT71phDccrF%KH7-^;F(KlX,,8]C.r=<m!LLAW0XM&E)o`&J`;p
%>Hq-Tnj+W-<4WO,MGZ5"s7jiU]nJ;o3Jp^n,1KRk(1+OB!PsC2b%F"`a))I(h4Z7KK?BIo]gjf,X1k>)?AddQol3r:!\bro8>IDE
%jb?X0n2<^b.t=N*0d)%$UiXIG-m"'^LZ6C8?^f\GNnZdnD_E%XrS!nDl>M.IrU9d@Da+4#2o#7XS+$CE_g_^\f5QH!QDg;'s5kDP
%s8?lMqt5`ZrnG3djlatio&YB"me>Vs\,Y^1J*&CKJdK;D5/\P70D^HRr:ZWKIDp]T^V%cfSaaqcOHpFqk\BZ%]pekNL<6.U7L-h>
%o&Oc;]u^q0P0/F%iQ(#Wo<:5"0K<G[2F$*qC@c*1m:?ZTeE.hdU`oWlIlX92Q]h5Wj^0uS?VZ4mrc04<iKo#(a1lXMi$Ftm"46d;
%Lq@8)]'!XGM>p(@Mq_ILS/=3_jj^fXmlTM,dfUE$QlpX_pJ-j_G2;o0bA$NW^$tJE;1AMFs)\/8e4XhbFt`T:&14!QoE<rLWu]X,
%dS^GEm2i+&niTba7s[S(J(nul)'>3Sg=mhd"ee[&Nd,B<@1!a4J4(t'2t5XhT/@2K<m6+YIWoL6h!G06:V@#/G(<h,1>4uaV&8%@
%:QO*K-?qH9gWN==Wuf(Mj]*DXj6+;]J*_s+hpiD7&,XM`ckbo;]l@tVYO.CkX"VJ;fd@=-[=7Q<Z-%rm$,R`if<V8Pq%nUrh4Z5,
%KCe#P1._7p:B.cSD&Lj`nd^q\HYCoLI'<]AXFY1SYe@Xe4.5hbp4s:jESP,3Is/9h\CUnq4S0-6gC\2tg'0lc^.2Zt4^NK&i7YIj
%B?/1:d)u7@#C#t)@=^Z:6f@G!M>O3!?!gtf^:Q>lbjs<_nTa`G(bbdI#A4:91^fmcn>UCeiLpB(7`\([Er>O06d)RId]5!EcF?5e
%7,RE/DA)djfVR^]Bb!2%D]a-++5jp^3@&5a`I?6LVl8N3Ea_6lH'9>=+pcp05&YTW;rW:MWU8.>b8::O/1ZW#6S@FiQHZ]lSS;6r
%Ai+9nS>E,fF-5&A14108FI$)R(F<dGP6q+5GJJ'"=U8"1;Vq<O')POGDg%b:L+gOeCDKWU15-B3=H_4&&d[A)MqS=n@5nT!_@?]H
%)$!"E'J3,:*dG6]5\NIepQIth+uN3.q<Td205:)WP*X,p7^;[;Q"<-4@fT^oT!0l0])'n!Z1@U@:)[nDeD&#PnK>L\@L=$AUG$RD
%R$EJe,G_"&VcUSMM4i^a$#WR^_A^K0%,X?!U2IMEg$9^b-'gCN1..u/&Ys\%M)4f4/7=.4;9tWK]hf$#o(FKBc>Wm8p"+0I(,$[V
%SH(.=]lT$pPPF++>`b.i;oehl9?W:cO\gb/AENR('!'1JbPNZb3h1%\9T<tg.JOWErCa_]8a``"X?bMJ9]b-h:M#dWmUE,lg`rY`
%Kmoa2l@tV*YKAIfRCph.J$H]l_J^HJ`YgKlIKpp\,*Bq%:?_Q,4-Zqhdd5aV*Glp@B7Nd=QQ@Ju)GIp-!</u%'`5%.2s2A`Z\@"W
%P.<ABMe<bgMNfuO5Do$q<7Cq8LT6L+3/G^!22KJ3:+VX';,f3DBZ);;:SXl%(e(''N2$,W'[=fLl<cK-f(1;iN#%WleK6<l(fc4/
%@9O),)ADVfkZW<3jm!?Tdli#)N0ocb*0;0%)$@k@\1@U#YrsN-U6mP`JLYW!N;/4I"-l2'cs]0'Sn'l,m@I9<5V*40aC9YO_B`l[
%P7"66=4i^P0J_p/;Y^Q0bC-23E6:\&nW_WHZDC!qg)8k?O-$tYc;5;YU)HX_o"kL1U%&M'$J&6m_G/GU2No^._VnP]n7ViU#Qd1C
%H@+l6Ob]0(r'j5Hj\YeTcM1#3ho[3ZL9VOY'ie60_W72?nha3,'b]tk$;iaaksV=r@LH>Uo;OqbJ,#Z((jMrci4>t<3Ss2oY8qUB
%/A?VXiTg/u3q(#E1[]5H4%C>EIFm,hL$p"0$>[:mr,Et]+#a%'T-/#a1?9,>,q0UQg[p%gad^=om<1OBamfUb&@l>W:,;S;d.KtB
%/mV;$ba:)=PV+^L16kA8&qZo=!U9=*%j_Z#XQSN6bRK:X$<1\&mN?*^aP(9PWY7enUS;9(h$Y2cVWAfD"FW'_QB-6b3+srec3A+,
%pq1;':MVD)famiPfCjm[jSScTrnhqn#%%.srUEgS>4WB,`kJ7b3DJ&X_$Q?DCMUfL,K2:2CrE:jVImJEF)0R^1\D)*Z-7.o#>-T*
%cIH%ilDWL1.)U&u.!,kAZOUOT\WDH-cr;,u;\>R(l:b;>&;k<nl@:S2MH2=6]G'@GaUL>DP,HBr$C+p+W<nQP\afAa)oZgT\WK+]
%M=mk^md[LJ##),mFTeSlqmliIr6EU_WQ_C9(de$Sm.d9a,-ElDd?Zr=&GXRX>T0HRTEBnKconA1$a?!5Hu+BD6<SCYMlq[0cYZ#C
%k%(^M/gY1X*5F&s0Nc_k76-BG7P`Kg"4QfX1XG+Hog2Kr:9WC"'rY5EG\gC9`\+G/3Dk,I/O+Am>(4o?19U\G&mJHVbXcVSq5OsK
%IE=m&Bn#"/li?DVhpVb?nf=9?SW[@7%@ECKmKe4ghq8aJ]ueC1iQV=1Jdd$iXrcU3;;7fu2K`+b?`<@Gh=Z;3%sQrr3+'bUPqJKI
%[k4TlWerSV^Qi#PU^LD<C3=F/RAa)!32K_cMdYM3JrCTZFg4.rJ/[/C-7j0`UR8iJA6&=a6rsG$2NT,#;JJt.%jPl5H'FU_niuBF
%]=1NnaQtA0K.PC\d&/99EeW`.>k(deeB-sTell1n"=!:B4M)uY5#7ONGK5()ljk`"I+5;b/T:ERaJ(u[;7F[gbB8t:"&T`TQIT\F
%kQ.F)kcM%<H\^Q179:0@c]6)*`hGn`DBbjN\Tjkc26.MPK8$r@1M`;>(I<tTX<"7ZGQ`&0=j#iB#nrEFBm`D-[.%-t(hCL'C'WYY
%_%ps=?o.A?-PG4:Q`p5m/'t?R!req/Y41+SGNdZPRF]1:?5)/TIJn?@g.TcVX7=th0<Oj>j1CYmI-81('E"9l/XDX$W!)+SnNS^A
%&%&UCe'JLdd/i?=ad_ET4Ta&L/q[31"8fd$8'[iT$ts)j>Il!;8Lp`9ap<Y/UTu7LJQ!YcVFhAeP$r!G?*u$+\!Lt0M+tukIILa1
%nPqg/j'UOSg9j'9Kansgm#AWC?2ESmMgn&,X?SG@*]Gl+iQ"dpD)9bVG<%A,>T9]R=)2bl.[E:a/-\c%YO'LA;Ck@k_<q`TkZ_k;
%RdJrjrLHp4m]u^b<l?PSq2Fr2-ABD,coU3IY>NC"F,,_"PgBk]B#O+1.Y,?@Qh8ud31s:K8PO*N`GF=.[9+ca'Nd'O./^qcL(#Wn
%6_X@5-NlcGi^Y@%N[7Z#h_(4[9Q%V_U'IhEA8X56>OiJ+`^G+?^+9&F*GCf2;\s3>]XJP39:e63a7/hIV4.G>R9EVIfq#_L\O/$Y
%^3&UtIX,P+N0h'oIkD4[\T%&/dWXHh;B/!e;-]1,.R=^<\M^t=\1_%>b+<!WMl8&.n$YZ;Q($mR<Yi9r.SY-Cb'$EHS6I0Ci!sd9
%N]keC'^^<Ln@p#@E`8V;;Id7,>4L??A,N%H-c.6Pn+Q5Aq0^ju@",lU0&Y%rG""&iFpEM6Vr>m,FdiZtn*IQrk$GV/r3KIqpX20R
%i*6)Fn%Cr0m&3diI6DCUIpfi/W&@FWF7Ve0lbp(7oXu5K-^6M[.6hWXqbTWAh'Nmmeh+)k[])Vf9>0b1e+qkS*a+*`$%70R`h1g5
%I+\`h2@Emb_`e",4b:HKU+ZM]]/T.]G3P'S/cH&NXSIW1Z(luFP\_0<A3KDA'[V'n'=1(q:]!G<N[c"bqsD)Bc+Z<gcfj+.g6$sO
%0?of/'6NU\Bln;r;V.dJ3ecSk4FJ?`kA"%t>oprS$j!"[U%3n7VA?S'eS:uP2cSXD-N4<;M8.BHUJY^%JWf?\UJ#u&_g+D<0pj%Z
%%co6Q-C#FX%d!S*q"-FJfiO`CH19UK^u*t1)Xu'Yq1qORlHAeEmSq)q4&l!%]/7b)fVr%sT"FY*^NAg*rfpddH:.SfSW.LRT?/nd
%`'q)Fru]KSh&Cfm,\AED"ucoT2OC.L`dGUCgg%_^P<qVdqU)XFEp4bQAIoRn.*WCn&3qN/:a50!'jcX[]>onK%B:-1]frVeB)t;K
%j0^pi;D0^&MNdo]7H&s.^nl@c(X?8=/-blt2H(UY*EI52b^8]R(;Ib-%jUo8QQ19:1]l^EoSnY:rtm,fK<J"0Jk6<RjKsUh*VC_u
%?IEmB8mf]%1](HJI55>k_+0UfZop.,"SO:mS00(MJaSEF5Ec&_&nthA=")0;&aD1$US(qN)aRYX4SO4%mCr(.qZHj6?oFm$H9ua)
%[ID(TMdHt7=*BE4p(#8ZLqUheQilf_c7r&]m1\tj>3KDIXimqqGDXItC_i=C.98O)m$(MOUU6pr6D?J:hks*2g%F@9PdTkEk3GYA
%M#qdL<)eG&L%p6bS(UsNUf"Kq"ei6"7!B2;IM5m2GRKM"@4H\)<m)t`^aSV5.VKugloVLg:/iDYA&msZ#R6!FgdCE5;SiptLW3.h
%J_`9*;.l,e@l4r!E/,TS47Q"CpCMpk-(WKV3=O;TN!>MG3fs_0]3Hd>j2)p(E_g?NT`i<'5<CK\f7.e-/#hTtmT@^O0E'Umcb9>B
%&*9Y#Hb`3:ShHl>oa5j=QDGW/Pf4>5]Xq@pE3SOHTat*,gs):^^iXCeSfq]1DPi;kOB+_F)%X,#)5*qmJ3W38ki->AUeQl=U!*Q]
%<VaI0]9R/g9&2:-',,S*X[a'"^/&To%S=G6m;6J8npg:=rS;\tp[+H"qtBoJ+)es@s8JKpJ,@!qs5l8TrV$,\rRJ+Oq3um4p;8iH
%I>?;"\,URI:EP&arO;h)qqli%m>$2ja5?h[+LpXFi9*?)]Dq]aJ+ctD+6Dd:c2~>
%AI9_PrivateDataEnd
